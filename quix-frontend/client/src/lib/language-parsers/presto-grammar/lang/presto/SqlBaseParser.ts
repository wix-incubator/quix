// Generated from ./lang/presto/SqlBase.g4 by ANTLR 4.7
// jshint ignore: start

// @ts-nocheck

import { atn as _atn, dfa, PredictionContextCache, Parser, Token, ParserRuleContext, error as _error } from 'antlr4';
import { SqlBaseListener } from './SqlBaseListener';
import { SqlBaseVisitor } from './SqlBaseVisitor';

var grammarFileName = "SqlBase.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00d6\u05e0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0082\n\u0002\f\u0002\u000e",
    "\u0002\u0085\u000b\u0002\u0003\u0002\u0005\u0002\u0088\n\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u009f\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00a4\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00aa\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00ae\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00bc\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00c1\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00c7\n\u0005",
    "\u0003\u0005\u0005\u0005\u00ca\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d1\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00d8\n",
    "\u0005\f\u0005\u000e\u0005\u00db\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00e0\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00e6\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ed\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u00f6\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0112\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u011d",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u0126\n\u0005\f\u0005\u000e\u0005",
    "\u0129\u000b\u0005\u0005\u0005\u012b\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0133\n",
    "\u0005\f\u0005\u000e\u0005\u0136\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u013a\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u013e",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0146\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u014c\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u0151\n\u0005\f\u0005\u000e\u0005\u0154\u000b",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0158\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u015c\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0164\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u016a\n",
    "\u0005\f\u0005\u000e\u0005\u016d\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0171\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0180\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0184\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u018a\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u018e\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0194\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u01b0\n\u0005\f\u0005\u000e\u0005\u01b3\u000b\u0005\u0005",
    "\u0005\u01b5\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01b9\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u01bd\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01c5",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u01cc\n\u0005\f\u0005\u000e\u0005\u01cf\u000b\u0005\u0005",
    "\u0005\u01d1\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01d5\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u01e5\n\u0005\f\u0005\u000e\u0005",
    "\u01e8\u000b\u0005\u0005\u0005\u01ea\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01f2\n",
    "\u0005\u0003\u0006\u0005\u0006\u01f5\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0005\u0007\u01fb\n\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0007\u0007\u0200\n\u0007\f\u0007\u000e\u0007\u0203",
    "\u000b\u0007\u0003\b\u0003\b\u0005\b\u0207\n\b\u0003\t\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0210\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0216\n\u000b\f\u000b\u000e",
    "\u000b\u0219\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0227",
    "\n\r\f\r\u000e\r\u022a\u000b\r\u0005\r\u022c\n\r\u0003\r\u0003\r\u0005",
    "\r\u0230\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0238\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u023e\n\u000e\u0003\u000e\u0007\u000e",
    "\u0241\n\u000e\f\u000e\u000e\u000e\u0244\u000b\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007",
    "\u000f\u024d\n\u000f\f\u000f\u000e\u000f\u0250\u000b\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0256\n\u000f\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u025a\n\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u025e\n\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u0262",
    "\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0267\n\u0011",
    "\f\u0011\u000e\u0011\u026a\u000b\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u0270\n\u0011\f\u0011\u000e\u0011\u0273",
    "\u000b\u0011\u0005\u0011\u0275\n\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u0279\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u027e\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0282\n\u0011\u0003",
    "\u0012\u0005\u0012\u0285\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0007\u0012\u028a\n\u0012\f\u0012\u000e\u0012\u028d\u000b\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007",
    "\u0013\u0295\n\u0013\f\u0013\u000e\u0013\u0298\u000b\u0013\u0005\u0013",
    "\u029a\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0007\u0013\u02a2\n\u0013\f\u0013\u000e\u0013\u02a5",
    "\u000b\u0013\u0005\u0013\u02a7\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u02b0",
    "\n\u0013\f\u0013\u000e\u0013\u02b3\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u02b7\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0007\u0014\u02bd\n\u0014\f\u0014\u000e\u0014\u02c0\u000b\u0014",
    "\u0005\u0014\u02c2\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u02c6",
    "\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015",
    "\u02cc\n\u0015\f\u0015\u000e\u0015\u02cf\u000b\u0015\u0005\u0015\u02d1",
    "\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u02d5\n\u0015\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u02d9\n\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u02e4\n\u0018\u0003\u0018\u0005\u0018\u02e7\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u02ee\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0301\n\u0019\u0007\u0019\u0303\n\u0019\f\u0019\u000e",
    "\u0019\u0306\u000b\u0019\u0003\u001a\u0005\u001a\u0309\n\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u030d\n\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u0311\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0315",
    "\n\u001a\u0005\u001a\u0317\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0320\n",
    "\u001b\f\u001b\u000e\u001b\u0323\u000b\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u0327\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0330\n\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u0336\n",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u033a\n\u001e\u0005\u001e",
    "\u033c\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u0342\n\u001f\f\u001f\u000e\u001f\u0345\u000b\u001f\u0003\u001f",
    "\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0007 \u0353\n \f \u000e \u0356\u000b \u0003 \u0003",
    " \u0003 \u0005 \u035b\n \u0003 \u0003 \u0003 \u0003 \u0005 \u0361\n",
    " \u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0369\n\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u0371\n\"\f\"\u000e",
    "\"\u0374\u000b\"\u0003#\u0003#\u0005#\u0378\n#\u0003$\u0003$\u0003$",
    "\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0384\n$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u038c\n$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u0393\n$\f$\u000e$\u0396\u000b$\u0003$\u0003",
    "$\u0003$\u0005$\u039b\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u03a3\n$\u0003$\u0003$\u0003$\u0003$\u0005$\u03a9\n$\u0003$\u0003",
    "$\u0005$\u03ad\n$\u0003$\u0003$\u0003$\u0005$\u03b2\n$\u0003$\u0003",
    "$\u0003$\u0005$\u03b7\n$\u0003%\u0003%\u0003%\u0003%\u0005%\u03bd\n",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0007%\u03cb\n%\f%\u000e%\u03ce\u000b%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0007&\u03e8\n&\f&\u000e&\u03eb\u000b&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u03f4\n&\f&\u000e&\u03f7",
    "\u000b&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0400",
    "\n&\u0003&\u0005&\u0403\n&\u0003&\u0003&\u0003&\u0005&\u0408\n&\u0003",
    "&\u0003&\u0003&\u0007&\u040d\n&\f&\u000e&\u0410\u000b&\u0005&\u0412",
    "\n&\u0003&\u0003&\u0005&\u0416\n&\u0003&\u0005&\u0419\n&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u0423\n&\f&\u000e",
    "&\u0426\u000b&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0006&\u0438",
    "\n&\r&\u000e&\u0439\u0003&\u0003&\u0005&\u043e\n&\u0003&\u0003&\u0003",
    "&\u0003&\u0006&\u0444\n&\r&\u000e&\u0445\u0003&\u0003&\u0005&\u044a",
    "\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0007&\u0461\n&\f&\u000e&\u0464\u000b&\u0005&\u0466\n&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u046f\n&\u0003&\u0003",
    "&\u0003&\u0003&\u0005&\u0475\n&\u0003&\u0003&\u0003&\u0003&\u0005&\u047b",
    "\n&\u0003&\u0003&\u0003&\u0003&\u0005&\u0481\n&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u048a\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0005&\u0493\n&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u049e\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0007&\u04a8\n&\f&\u000e&\u04ab\u000b",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u04b3\n\'",
    "\u0003(\u0003(\u0003)\u0003)\u0003*\u0003*\u0003+\u0003+\u0005+\u04bd",
    "\n+\u0003+\u0003+\u0003+\u0003+\u0005+\u04c3\n+\u0003,\u0003,\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0007-\u04dc\n-\f-\u000e-\u04df\u000b-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0007-\u04e8\n-\f-\u000e-\u04eb\u000b-\u0003",
    "-\u0003-\u0005-\u04ef\n-\u0005-\u04f1\n-\u0003-\u0003-\u0007-\u04f5",
    "\n-\f-\u000e-\u04f8\u000b-\u0003.\u0003.\u0005.\u04fc\n.\u0003/\u0003",
    "/\u0003/\u0003/\u0005/\u0502\n/\u00030\u00030\u00030\u00030\u00030\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00072\u0516\n2\f2\u000e2\u0519\u000b2\u00052\u051b",
    "\n2\u00032\u00032\u00032\u00032\u00032\u00072\u0522\n2\f2\u000e2\u0525",
    "\u000b2\u00052\u0527\n2\u00032\u00052\u052a\n2\u00032\u00032\u00033",
    "\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00053\u053e\n3\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u0549\n4\u00035\u0003",
    "5\u00035\u00035\u00055\u054f\n5\u00036\u00036\u00036\u00036\u00036\u0005",
    "6\u0556\n6\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u055f",
    "\n7\u00038\u00038\u00038\u00038\u00038\u00058\u0566\n8\u00039\u0003",
    "9\u00039\u00039\u00059\u056c\n9\u0003:\u0003:\u0003:\u0007:\u0571\n",
    ":\f:\u000e:\u0574\u000b:\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u057b",
    "\n;\u0003<\u0003<\u0003=\u0003=\u0005=\u0581\n=\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u05dc\n>\u0003?\u0003",
    "?\u0003?\u0002\b\u001a0BHJX@\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|\u0002\u0016\u0003\u0002\u00ad\u00ae\u0004\u0002\r",
    "\r!!\u0004\u0002\u0010\u0010\u00c8\u00c8\u0003\u0002\u00af\u00b0\u0003",
    "\u0002\u0087\u0088\u0003\u0002/0\u0003\u0002,-\u0004\u0002\u0010\u0010",
    "\u0013\u0013\u0003\u0002\u008b\u008d\u0003\u0002\u00c0\u00c1\u0003\u0002",
    "\u00c2\u00c4\u0003\u0002\u00ba\u00bf\u0003\u0002\u0010\u0012\u0003\u0002",
    ")*\u0003\u0002;@\u0003\u0002]^\u0003\u0002wx\u0003\u0002yz\u0003\u0002",
    "\u00a5\u00a6\u0003\u0002\u00b3\u00b6\u0002\u070b\u0002~\u0003\u0002",
    "\u0002\u0002\u0004\u008b\u0003\u0002\u0002\u0002\u0006\u008e\u0003\u0002",
    "\u0002\u0002\b\u01f1\u0003\u0002\u0002\u0002\n\u01f4\u0003\u0002\u0002",
    "\u0002\f\u01f8\u0003\u0002\u0002\u0002\u000e\u0206\u0003\u0002\u0002",
    "\u0002\u0010\u0208\u0003\u0002\u0002\u0002\u0012\u020b\u0003\u0002\u0002",
    "\u0002\u0014\u0211\u0003\u0002\u0002\u0002\u0016\u021c\u0003\u0002\u0002",
    "\u0002\u0018\u0220\u0003\u0002\u0002\u0002\u001a\u0231\u0003\u0002\u0002",
    "\u0002\u001c\u0255\u0003\u0002\u0002\u0002\u001e\u0257\u0003\u0002\u0002",
    "\u0002 \u025f\u0003\u0002\u0002\u0002\"\u0284\u0003\u0002\u0002\u0002",
    "$\u02b6\u0003\u0002\u0002\u0002&\u02c5\u0003\u0002\u0002\u0002(\u02d4",
    "\u0003\u0002\u0002\u0002*\u02d6\u0003\u0002\u0002\u0002,\u02df\u0003",
    "\u0002\u0002\u0002.\u02ed\u0003\u0002\u0002\u00020\u02ef\u0003\u0002",
    "\u0002\u00022\u0316\u0003\u0002\u0002\u00024\u0326\u0003\u0002\u0002",
    "\u00026\u0328\u0003\u0002\u0002\u00028\u0331\u0003\u0002\u0002\u0002",
    ":\u0333\u0003\u0002\u0002\u0002<\u033d\u0003\u0002\u0002\u0002>\u0360",
    "\u0003\u0002\u0002\u0002@\u0362\u0003\u0002\u0002\u0002B\u0368\u0003",
    "\u0002\u0002\u0002D\u0375\u0003\u0002\u0002\u0002F\u03b6\u0003\u0002",
    "\u0002\u0002H\u03bc\u0003\u0002\u0002\u0002J\u049d\u0003\u0002\u0002",
    "\u0002L\u04b2\u0003\u0002\u0002\u0002N\u04b4\u0003\u0002\u0002\u0002",
    "P\u04b6\u0003\u0002\u0002\u0002R\u04b8\u0003\u0002\u0002\u0002T\u04ba",
    "\u0003\u0002\u0002\u0002V\u04c4\u0003\u0002\u0002\u0002X\u04f0\u0003",
    "\u0002\u0002\u0002Z\u04fb\u0003\u0002\u0002\u0002\\\u0501\u0003\u0002",
    "\u0002\u0002^\u0503\u0003\u0002\u0002\u0002`\u0508\u0003\u0002\u0002",
    "\u0002b\u050e\u0003\u0002\u0002\u0002d\u053d\u0003\u0002\u0002\u0002",
    "f\u0548\u0003\u0002\u0002\u0002h\u054e\u0003\u0002\u0002\u0002j\u0555",
    "\u0003\u0002\u0002\u0002l\u055e\u0003\u0002\u0002\u0002n\u0565\u0003",
    "\u0002\u0002\u0002p\u056b\u0003\u0002\u0002\u0002r\u056d\u0003\u0002",
    "\u0002\u0002t\u057a\u0003\u0002\u0002\u0002v\u057c\u0003\u0002\u0002",
    "\u0002x\u0580\u0003\u0002\u0002\u0002z\u05db\u0003\u0002\u0002\u0002",
    "|\u05dd\u0003\u0002\u0002\u0002~\u0083\u0005\b\u0005\u0002\u007f\u0080",
    "\u0007\u00d4\u0002\u0002\u0080\u0082\u0005\b\u0005\u0002\u0081\u007f",
    "\u0003\u0002\u0002\u0002\u0082\u0085\u0003\u0002\u0002\u0002\u0083\u0081",
    "\u0003\u0002\u0002\u0002\u0083\u0084\u0003\u0002\u0002\u0002\u0084\u0087",
    "\u0003\u0002\u0002\u0002\u0085\u0083\u0003\u0002\u0002\u0002\u0086\u0088",
    "\u0007\u00d4\u0002\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0087\u0088",
    "\u0003\u0002\u0002\u0002\u0088\u0089\u0003\u0002\u0002\u0002\u0089\u008a",
    "\u0007\u0002\u0002\u0003\u008a\u0003\u0003\u0002\u0002\u0002\u008b\u008c",
    "\u0005\b\u0005\u0002\u008c\u008d\u0007\u0002\u0002\u0003\u008d\u0005",
    "\u0003\u0002\u0002\u0002\u008e\u008f\u0005@!\u0002\u008f\u0090\u0007",
    "\u0002\u0002\u0003\u0090\u0007\u0003\u0002\u0002\u0002\u0091\u01f2\u0005",
    "\n\u0006\u0002\u0092\u0093\u0007\u0083\u0002\u0002\u0093\u01f2\u0005",
    "t;\u0002\u0094\u0095\u0007\u0083\u0002\u0002\u0095\u0096\u0005t;\u0002",
    "\u0096\u0097\u0007\u0003\u0002\u0002\u0097\u0098\u0005t;\u0002\u0098",
    "\u01f2\u0003\u0002\u0002\u0002\u0099\u009a\u0007d\u0002\u0002\u009a",
    "\u009e\u0007e\u0002\u0002\u009b\u009c\u0007\u00b7\u0002\u0002\u009c",
    "\u009d\u0007\"\u0002\u0002\u009d\u009f\u0007$\u0002\u0002\u009e\u009b",
    "\u0003\u0002\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a0",
    "\u0003\u0002\u0002\u0002\u00a0\u00a3\u0005r:\u0002\u00a1\u00a2\u0007",
    "a\u0002\u0002\u00a2\u00a4\u0005\u0014\u000b\u0002\u00a3\u00a1\u0003",
    "\u0002\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4\u01f2\u0003",
    "\u0002\u0002\u0002\u00a5\u00a6\u0007\u0086\u0002\u0002\u00a6\u00a9\u0007",
    "e\u0002\u0002\u00a7\u00a8\u0007\u00b7\u0002\u0002\u00a8\u00aa\u0007",
    "$\u0002\u0002\u00a9\u00a7\u0003\u0002\u0002\u0002\u00a9\u00aa\u0003",
    "\u0002\u0002\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab\u00ad\u0005",
    "r:\u0002\u00ac\u00ae\t\u0002\u0002\u0002\u00ad\u00ac\u0003\u0002\u0002",
    "\u0002\u00ad\u00ae\u0003\u0002\u0002\u0002\u00ae\u01f2\u0003\u0002\u0002",
    "\u0002\u00af\u00b0\u0007\u008f\u0002\u0002\u00b0\u00b1\u0007e\u0002",
    "\u0002\u00b1\u00b2\u0005r:\u0002\u00b2\u00b3\u0007\u0090\u0002\u0002",
    "\u00b3\u00b4\u0007\u008a\u0002\u0002\u00b4\u00b5\u0005t;\u0002\u00b5",
    "\u01f2\u0003\u0002\u0002\u0002\u00b6\u00b7\u0007d\u0002\u0002\u00b7",
    "\u00bb\u0007f\u0002\u0002\u00b8\u00b9\u0007\u00b7\u0002\u0002\u00b9",
    "\u00ba\u0007\"\u0002\u0002\u00ba\u00bc\u0007$\u0002\u0002\u00bb\u00b8",
    "\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bd",
    "\u0003\u0002\u0002\u0002\u00bd\u00c0\u0005r:\u0002\u00be\u00bf\u0007",
    "a\u0002\u0002\u00bf\u00c1\u0005\u0014\u000b\u0002\u00c0\u00be\u0003",
    "\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003",
    "\u0002\u0002\u0002\u00c2\u00c3\u0007\u000f\u0002\u0002\u00c3\u00c9\u0005",
    "\n\u0006\u0002\u00c4\u00c6\u0007a\u0002\u0002\u00c5\u00c7\u0007#\u0002",
    "\u0002\u00c6\u00c5\u0003\u0002\u0002\u0002\u00c6\u00c7\u0003\u0002\u0002",
    "\u0002\u00c7\u00c8\u0003\u0002\u0002\u0002\u00c8\u00ca\u0007\u0098\u0002",
    "\u0002\u00c9\u00c4\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002",
    "\u0002\u00ca\u01f2\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007d\u0002",
    "\u0002\u00cc\u00d0\u0007f\u0002\u0002\u00cd\u00ce\u0007\u00b7\u0002",
    "\u0002\u00ce\u00cf\u0007\"\u0002\u0002\u00cf\u00d1\u0007$\u0002\u0002",
    "\u00d0\u00cd\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002",
    "\u00d1\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d3\u0005r:\u0002\u00d3",
    "\u00d4\u0007\u0004\u0002\u0002\u00d4\u00d9\u0005\u000e\b\u0002\u00d5",
    "\u00d6\u0007\u0005\u0002\u0002\u00d6\u00d8\u0005\u000e\b\u0002\u00d7",
    "\u00d5\u0003\u0002\u0002\u0002\u00d8\u00db\u0003\u0002\u0002\u0002\u00d9",
    "\u00d7\u0003\u0002\u0002\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da",
    "\u00dc\u0003\u0002\u0002\u0002\u00db\u00d9\u0003\u0002\u0002\u0002\u00dc",
    "\u00df\u0007\u0006\u0002\u0002\u00dd\u00de\u0007a\u0002\u0002\u00de",
    "\u00e0\u0005\u0014\u000b\u0002\u00df\u00dd\u0003\u0002\u0002\u0002\u00df",
    "\u00e0\u0003\u0002\u0002\u0002\u00e0\u01f2\u0003\u0002\u0002\u0002\u00e1",
    "\u00e2\u0007\u0086\u0002\u0002\u00e2\u00e5\u0007f\u0002\u0002\u00e3",
    "\u00e4\u0007\u00b7\u0002\u0002\u00e4\u00e6\u0007$\u0002\u0002\u00e5",
    "\u00e3\u0003\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6",
    "\u00e7\u0003\u0002\u0002\u0002\u00e7\u01f2\u0005r:\u0002\u00e8\u00e9",
    "\u0007i\u0002\u0002\u00e9\u00ea\u0007k\u0002\u0002\u00ea\u00ec\u0005",
    "r:\u0002\u00eb\u00ed\u0005<\u001f\u0002\u00ec\u00eb\u0003\u0002\u0002",
    "\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003\u0002\u0002",
    "\u0002\u00ee\u00ef\u0005\n\u0006\u0002\u00ef\u01f2\u0003\u0002\u0002",
    "\u0002\u00f0\u00f1\u0007j\u0002\u0002\u00f1\u00f2\u0007\r\u0002\u0002",
    "\u00f2\u00f5\u0005r:\u0002\u00f3\u00f4\u0007\u0014\u0002\u0002\u00f4",
    "\u00f6\u0005B\"\u0002\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6",
    "\u0003\u0002\u0002\u0002\u00f6\u01f2\u0003\u0002\u0002\u0002\u00f7\u00f8",
    "\u0007\u008f\u0002\u0002\u00f8\u00f9\u0007f\u0002\u0002\u00f9\u00fa",
    "\u0005r:\u0002\u00fa\u00fb\u0007\u0090\u0002\u0002\u00fb\u00fc\u0007",
    "\u008a\u0002\u0002\u00fc\u00fd\u0005r:\u0002\u00fd\u01f2\u0003\u0002",
    "\u0002\u0002\u00fe\u00ff\u0007\u008f\u0002\u0002\u00ff\u0100\u0007f",
    "\u0002\u0002\u0100\u0101\u0005r:\u0002\u0101\u0102\u0007\u0090\u0002",
    "\u0002\u0102\u0103\u0007\u0082\u0002\u0002\u0103\u0104\u0005t;\u0002",
    "\u0104\u0105\u0007\u008a\u0002\u0002\u0105\u0106\u0005t;\u0002\u0106",
    "\u01f2\u0003\u0002\u0002\u0002\u0107\u0108\u0007\u008f\u0002\u0002\u0108",
    "\u0109\u0007f\u0002\u0002\u0109\u010a\u0005r:\u0002\u010a\u010b\u0007",
    "\u000e\u0002\u0002\u010b\u010c\u0007\u0082\u0002\u0002\u010c\u010d\u0005",
    "\u0010\t\u0002\u010d\u01f2\u0003\u0002\u0002\u0002\u010e\u0111\u0007",
    "d\u0002\u0002\u010f\u0110\u0007\u001f\u0002\u0002\u0110\u0112\u0007",
    "h\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0111\u0112\u0003",
    "\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0114\u0007",
    "g\u0002\u0002\u0114\u0115\u0005r:\u0002\u0115\u0116\u0007\u000f\u0002",
    "\u0002\u0116\u0117\u0005\n\u0006\u0002\u0117\u01f2\u0003\u0002\u0002",
    "\u0002\u0118\u0119\u0007\u0086\u0002\u0002\u0119\u011c\u0007g\u0002",
    "\u0002\u011a\u011b\u0007\u00b7\u0002\u0002\u011b\u011d\u0007$\u0002",
    "\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002",
    "\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u01f2\u0005r:\u0002",
    "\u011f\u0120\u0007\u00a7\u0002\u0002\u0120\u0121\u0005r:\u0002\u0121",
    "\u012a\u0007\u0004\u0002\u0002\u0122\u0127\u0005n8\u0002\u0123\u0124",
    "\u0007\u0005\u0002\u0002\u0124\u0126\u0005n8\u0002\u0125\u0123\u0003",
    "\u0002\u0002\u0002\u0126\u0129\u0003\u0002\u0002\u0002\u0127\u0125\u0003",
    "\u0002\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u012b\u0003",
    "\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a\u0122\u0003",
    "\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012c\u0003",
    "\u0002\u0002\u0002\u012c\u012d\u0007\u0006\u0002\u0002\u012d\u01f2\u0003",
    "\u0002\u0002\u0002\u012e\u0139\u0007n\u0002\u0002\u012f\u0134\u0005",
    "p9\u0002\u0130\u0131\u0007\u0005\u0002\u0002\u0131\u0133\u0005p9\u0002",
    "\u0132\u0130\u0003\u0002\u0002\u0002\u0133\u0136\u0003\u0002\u0002\u0002",
    "\u0134\u0132\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002",
    "\u0135\u013a\u0003\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002",
    "\u0137\u0138\u0007\u0010\u0002\u0002\u0138\u013a\u0007p\u0002\u0002",
    "\u0139\u012f\u0003\u0002\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0003\u0002\u0002\u0002\u013b\u013d\u0007V\u0002\u0002",
    "\u013c\u013e\u0007f\u0002\u0002\u013d\u013c\u0003\u0002\u0002\u0002",
    "\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u0140\u0005r:\u0002\u0140\u0141\u0007\u008a\u0002\u0002\u0141",
    "\u0145\u0005t;\u0002\u0142\u0143\u0007a\u0002\u0002\u0143\u0144\u0007",
    "n\u0002\u0002\u0144\u0146\u0007r\u0002\u0002\u0145\u0142\u0003\u0002",
    "\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146\u01f2\u0003\u0002",
    "\u0002\u0002\u0147\u014b\u0007o\u0002\u0002\u0148\u0149\u0007n\u0002",
    "\u0002\u0149\u014a\u0007r\u0002\u0002\u014a\u014c\u00073\u0002\u0002",
    "\u014b\u0148\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002",
    "\u014c\u0157\u0003\u0002\u0002\u0002\u014d\u0152\u0005p9\u0002\u014e",
    "\u014f\u0007\u0005\u0002\u0002\u014f\u0151\u0005p9\u0002\u0150\u014e",
    "\u0003\u0002\u0002\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152\u0150",
    "\u0003\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0158",
    "\u0003\u0002\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0156",
    "\u0007\u0010\u0002\u0002\u0156\u0158\u0007p\u0002\u0002\u0157\u014d",
    "\u0003\u0002\u0002\u0002\u0157\u0155\u0003\u0002\u0002\u0002\u0158\u0159",
    "\u0003\u0002\u0002\u0002\u0159\u015b\u0007V\u0002\u0002\u015a\u015c",
    "\u0007f\u0002\u0002\u015b\u015a\u0003\u0002\u0002\u0002\u015b\u015c",
    "\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u015e",
    "\u0005r:\u0002\u015e\u015f\u0007\r\u0002\u0002\u015f\u0160\u0005t;\u0002",
    "\u0160\u01f2\u0003\u0002\u0002\u0002\u0161\u0163\u0007s\u0002\u0002",
    "\u0162\u0164\u0007t\u0002\u0002\u0163\u0162\u0003\u0002\u0002\u0002",
    "\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0170\u0003\u0002\u0002\u0002",
    "\u0165\u0166\u0007\u0004\u0002\u0002\u0166\u016b\u0005h5\u0002\u0167",
    "\u0168\u0007\u0005\u0002\u0002\u0168\u016a\u0005h5\u0002\u0169\u0167",
    "\u0003\u0002\u0002\u0002\u016a\u016d\u0003\u0002\u0002\u0002\u016b\u0169",
    "\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u016e",
    "\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016e\u016f",
    "\u0007\u0006\u0002\u0002\u016f\u0171\u0003\u0002\u0002\u0002\u0170\u0165",
    "\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0172",
    "\u0003\u0002\u0002\u0002\u0172\u01f2\u0005\b\u0005\u0002\u0173\u0174",
    "\u0007}\u0002\u0002\u0174\u0175\u0007d\u0002\u0002\u0175\u0176\u0007",
    "f\u0002\u0002\u0176\u01f2\u0005r:\u0002\u0177\u0178\u0007}\u0002\u0002",
    "\u0178\u0179\u0007d\u0002\u0002\u0179\u017a\u0007g\u0002\u0002\u017a",
    "\u01f2\u0005r:\u0002\u017b\u017c\u0007}\u0002\u0002\u017c\u017f\u0007",
    "~\u0002\u0002\u017d\u017e\t\u0003\u0002\u0002\u017e\u0180\u0005r:\u0002",
    "\u017f\u017d\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002",
    "\u0180\u0183\u0003\u0002\u0002\u0002\u0181\u0182\u0007&\u0002\u0002",
    "\u0182\u0184\u0007\u00c6\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002",
    "\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u01f2\u0003\u0002\u0002\u0002",
    "\u0185\u0186\u0007}\u0002\u0002\u0186\u0189\u0007\u007f\u0002\u0002",
    "\u0187\u0188\t\u0003\u0002\u0002\u0188\u018a\u0005t;\u0002\u0189\u0187",
    "\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002\u018a\u018d",
    "\u0003\u0002\u0002\u0002\u018b\u018c\u0007&\u0002\u0002\u018c\u018e",
    "\u0007\u00c6\u0002\u0002\u018d\u018b\u0003\u0002\u0002\u0002\u018d\u018e",
    "\u0003\u0002\u0002\u0002\u018e\u01f2\u0003\u0002\u0002\u0002\u018f\u0190",
    "\u0007}\u0002\u0002\u0190\u0193\u0007\u0080\u0002\u0002\u0191\u0192",
    "\u0007&\u0002\u0002\u0192\u0194\u0007\u00c6\u0002\u0002\u0193\u0191",
    "\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u01f2",
    "\u0003\u0002\u0002\u0002\u0195\u0196\u0007}\u0002\u0002\u0196\u0197",
    "\u0007\u0081\u0002\u0002\u0197\u0198\t\u0003\u0002\u0002\u0198\u01f2",
    "\u0005r:\u0002\u0199\u019a\u0007m\u0002\u0002\u019a\u01f2\u0005r:\u0002",
    "\u019b\u019c\u00070\u0002\u0002\u019c\u01f2\u0005r:\u0002\u019d\u019e",
    "\u0007}\u0002\u0002\u019e\u01f2\u0007\u0085\u0002\u0002\u019f\u01a0",
    "\u0007}\u0002\u0002\u01a0\u01f2\u0007\u0097\u0002\u0002\u01a1\u01a2",
    "\u0007\u0095\u0002\u0002\u01a2\u01a3\u0007\u0097\u0002\u0002\u01a3\u01a4",
    "\u0005r:\u0002\u01a4\u01a5\u0007\u00ba\u0002\u0002\u01a5\u01a6\u0005",
    "@!\u0002\u01a6\u01f2\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007\u0096",
    "\u0002\u0002\u01a8\u01a9\u0007\u0097\u0002\u0002\u01a9\u01f2\u0005r",
    ":\u0002\u01aa\u01ab\u0007\u0099\u0002\u0002\u01ab\u01b4\u0007\u009a",
    "\u0002\u0002\u01ac\u01b1\u0005j6\u0002\u01ad\u01ae\u0007\u0005\u0002",
    "\u0002\u01ae\u01b0\u0005j6\u0002\u01af\u01ad\u0003\u0002\u0002\u0002",
    "\u01b0\u01b3\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002",
    "\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002",
    "\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b4\u01ac\u0003\u0002\u0002\u0002",
    "\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01f2\u0003\u0002\u0002\u0002",
    "\u01b6\u01b8\u0007\u009b\u0002\u0002\u01b7\u01b9\u0007\u009d\u0002\u0002",
    "\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002",
    "\u01b9\u01f2\u0003\u0002\u0002\u0002\u01ba\u01bc\u0007\u009c\u0002\u0002",
    "\u01bb\u01bd\u0007\u009d\u0002\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002",
    "\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01f2\u0003\u0002\u0002\u0002",
    "\u01be\u01bf\u0007}\u0002\u0002\u01bf\u01c0\u0007\u0084\u0002\u0002",
    "\u01c0\u01c1\t\u0003\u0002\u0002\u01c1\u01c4\u0005r:\u0002\u01c2\u01c3",
    "\u0007\u0014\u0002\u0002\u01c3\u01c5\u0005B\"\u0002\u01c4\u01c2\u0003",
    "\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01d0\u0003",
    "\u0002\u0002\u0002\u01c6\u01c7\u0007\u001b\u0002\u0002\u01c7\u01c8\u0007",
    "\u0016\u0002\u0002\u01c8\u01cd\u0005\u001e\u0010\u0002\u01c9\u01ca\u0007",
    "\u0005\u0002\u0002\u01ca\u01cc\u0005\u001e\u0010\u0002\u01cb\u01c9\u0003",
    "\u0002\u0002\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003",
    "\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003",
    "\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0\u01c6\u0003",
    "\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d4\u0003",
    "\u0002\u0002\u0002\u01d2\u01d3\u0007\u001d\u0002\u0002\u01d3\u01d5\t",
    "\u0004\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003",
    "\u0002\u0002\u0002\u01d5\u01f2\u0003\u0002\u0002\u0002\u01d6\u01d7\u0007",
    "\u00a8\u0002\u0002\u01d7\u01d8\u0005t;\u0002\u01d8\u01d9\u0007\r\u0002",
    "\u0002\u01d9\u01da\u0005\b\u0005\u0002\u01da\u01f2\u0003\u0002\u0002",
    "\u0002\u01db\u01dc\u0007\u00a9\u0002\u0002\u01dc\u01dd\u0007\u00a8\u0002",
    "\u0002\u01dd\u01f2\u0005t;\u0002\u01de\u01df\u0007\u00aa\u0002\u0002",
    "\u01df\u01e9\u0005t;\u0002\u01e0\u01e1\u0007U\u0002\u0002\u01e1\u01e6",
    "\u0005@!\u0002\u01e2\u01e3\u0007\u0005\u0002\u0002\u01e3\u01e5\u0005",
    "@!\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002",
    "\u0002\u0002\u01e6\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002",
    "\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002",
    "\u0002\u0002\u01e9\u01e0\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002",
    "\u0002\u0002\u01ea\u01f2\u0003\u0002\u0002\u0002\u01eb\u01ec\u0007m",
    "\u0002\u0002\u01ec\u01ed\u0007\u00ab\u0002\u0002\u01ed\u01f2\u0005t",
    ";\u0002\u01ee\u01ef\u0007m\u0002\u0002\u01ef\u01f0\u0007\u00ac\u0002",
    "\u0002\u01f0\u01f2\u0005t;\u0002\u01f1\u0091\u0003\u0002\u0002\u0002",
    "\u01f1\u0092\u0003\u0002\u0002\u0002\u01f1\u0094\u0003\u0002\u0002\u0002",
    "\u01f1\u0099\u0003\u0002\u0002\u0002\u01f1\u00a5\u0003\u0002\u0002\u0002",
    "\u01f1\u00af\u0003\u0002\u0002\u0002\u01f1\u00b6\u0003\u0002\u0002\u0002",
    "\u01f1\u00cb\u0003\u0002\u0002\u0002\u01f1\u00e1\u0003\u0002\u0002\u0002",
    "\u01f1\u00e8\u0003\u0002\u0002\u0002\u01f1\u00f0\u0003\u0002\u0002\u0002",
    "\u01f1\u00f7\u0003\u0002\u0002\u0002\u01f1\u00fe\u0003\u0002\u0002\u0002",
    "\u01f1\u0107\u0003\u0002\u0002\u0002\u01f1\u010e\u0003\u0002\u0002\u0002",
    "\u01f1\u0118\u0003\u0002\u0002\u0002\u01f1\u011f\u0003\u0002\u0002\u0002",
    "\u01f1\u012e\u0003\u0002\u0002\u0002\u01f1\u0147\u0003\u0002\u0002\u0002",
    "\u01f1\u0161\u0003\u0002\u0002\u0002\u01f1\u0173\u0003\u0002\u0002\u0002",
    "\u01f1\u0177\u0003\u0002\u0002\u0002\u01f1\u017b\u0003\u0002\u0002\u0002",
    "\u01f1\u0185\u0003\u0002\u0002\u0002\u01f1\u018f\u0003\u0002\u0002\u0002",
    "\u01f1\u0195\u0003\u0002\u0002\u0002\u01f1\u0199\u0003\u0002\u0002\u0002",
    "\u01f1\u019b\u0003\u0002\u0002\u0002\u01f1\u019d\u0003\u0002\u0002\u0002",
    "\u01f1\u019f\u0003\u0002\u0002\u0002\u01f1\u01a1\u0003\u0002\u0002\u0002",
    "\u01f1\u01a7\u0003\u0002\u0002\u0002\u01f1\u01aa\u0003\u0002\u0002\u0002",
    "\u01f1\u01b6\u0003\u0002\u0002\u0002\u01f1\u01ba\u0003\u0002\u0002\u0002",
    "\u01f1\u01be\u0003\u0002\u0002\u0002\u01f1\u01d6\u0003\u0002\u0002\u0002",
    "\u01f1\u01db\u0003\u0002\u0002\u0002\u01f1\u01de\u0003\u0002\u0002\u0002",
    "\u01f1\u01eb\u0003\u0002\u0002\u0002\u01f1\u01ee\u0003\u0002\u0002\u0002",
    "\u01f2\t\u0003\u0002\u0002\u0002\u01f3\u01f5\u0005\f\u0007\u0002\u01f4",
    "\u01f3\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5",
    "\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f7\u0005\u0018\r\u0002\u01f7",
    "\u000b\u0003\u0002\u0002\u0002\u01f8\u01fa\u0007a\u0002\u0002\u01f9",
    "\u01fb\u0007b\u0002\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fa",
    "\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc",
    "\u0201\u0005*\u0016\u0002\u01fd\u01fe\u0007\u0005\u0002\u0002\u01fe",
    "\u0200\u0005*\u0016\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200",
    "\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201",
    "\u0202\u0003\u0002\u0002\u0002\u0202\r\u0003\u0002\u0002\u0002\u0203",
    "\u0201\u0003\u0002\u0002\u0002\u0204\u0207\u0005\u0010\t\u0002\u0205",
    "\u0207\u0005\u0012\n\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0206",
    "\u0205\u0003\u0002\u0002\u0002\u0207\u000f\u0003\u0002\u0002\u0002\u0208",
    "\u0209\u0005t;\u0002\u0209\u020a\u0005X-\u0002\u020a\u0011\u0003\u0002",
    "\u0002\u0002\u020b\u020c\u0007&\u0002\u0002\u020c\u020f\u0005r:\u0002",
    "\u020d\u020e\t\u0005\u0002\u0002\u020e\u0210\u0007\u00b1\u0002\u0002",
    "\u020f\u020d\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002",
    "\u0210\u0013\u0003\u0002\u0002\u0002\u0211\u0212\u0007\u0004\u0002\u0002",
    "\u0212\u0217\u0005\u0016\f\u0002\u0213\u0214\u0007\u0005\u0002\u0002",
    "\u0214\u0216\u0005\u0016\f\u0002\u0215\u0213\u0003\u0002\u0002\u0002",
    "\u0216\u0219\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002",
    "\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021a\u0003\u0002\u0002\u0002",
    "\u0219\u0217\u0003\u0002\u0002\u0002\u021a\u021b\u0007\u0006\u0002\u0002",
    "\u021b\u0015\u0003\u0002\u0002\u0002\u021c\u021d\u0005t;\u0002\u021d",
    "\u021e\u0007\u00ba\u0002\u0002\u021e\u021f\u0005@!\u0002\u021f\u0017",
    "\u0003\u0002\u0002\u0002\u0220\u022b\u0005\u001a\u000e\u0002\u0221\u0222",
    "\u0007\u001b\u0002\u0002\u0222\u0223\u0007\u0016\u0002\u0002\u0223\u0228",
    "\u0005\u001e\u0010\u0002\u0224\u0225\u0007\u0005\u0002\u0002\u0225\u0227",
    "\u0005\u001e\u0010\u0002\u0226\u0224\u0003\u0002\u0002\u0002\u0227\u022a",
    "\u0003\u0002\u0002\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0228\u0229",
    "\u0003\u0002\u0002\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228",
    "\u0003\u0002\u0002\u0002\u022b\u0221\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0003\u0002\u0002\u0002\u022c\u022f\u0003\u0002\u0002\u0002\u022d\u022e",
    "\u0007\u001d\u0002\u0002\u022e\u0230\t\u0004\u0002\u0002\u022f\u022d",
    "\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0019",
    "\u0003\u0002\u0002\u0002\u0231\u0232\b\u000e\u0001\u0002\u0232\u0233",
    "\u0005\u001c\u000f\u0002\u0233\u0242\u0003\u0002\u0002\u0002\u0234\u0235",
    "\f\u0004\u0002\u0002\u0235\u0237\u0007\u0089\u0002\u0002\u0236\u0238",
    "\u0005,\u0017\u0002\u0237\u0236\u0003\u0002\u0002\u0002\u0237\u0238",
    "\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u0241",
    "\u0005\u001a\u000e\u0005\u023a\u023b\f\u0003\u0002\u0002\u023b\u023d",
    "\t\u0006\u0002\u0002\u023c\u023e\u0005,\u0017\u0002\u023d\u023c\u0003",
    "\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u023f\u0003",
    "\u0002\u0002\u0002\u023f\u0241\u0005\u001a\u000e\u0004\u0240\u0234\u0003",
    "\u0002\u0002\u0002\u0240\u023a\u0003\u0002\u0002\u0002\u0241\u0244\u0003",
    "\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0243\u0003",
    "\u0002\u0002\u0002\u0243\u001b\u0003\u0002\u0002\u0002\u0244\u0242\u0003",
    "\u0002\u0002\u0002\u0245\u0256\u0005 \u0011\u0002\u0246\u0247\u0007",
    "f\u0002\u0002\u0247\u0256\u0005r:\u0002\u0248\u0249\u0007c\u0002\u0002",
    "\u0249\u024e\u0005@!\u0002\u024a\u024b\u0007\u0005\u0002\u0002\u024b",
    "\u024d\u0005@!\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024d\u0250",
    "\u0003\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024e\u024f",
    "\u0003\u0002\u0002\u0002\u024f\u0256\u0003\u0002\u0002\u0002\u0250\u024e",
    "\u0003\u0002\u0002\u0002\u0251\u0252\u0007\u0004\u0002\u0002\u0252\u0253",
    "\u0005\u0018\r\u0002\u0253\u0254\u0007\u0006\u0002\u0002\u0254\u0256",
    "\u0003\u0002\u0002\u0002\u0255\u0245\u0003\u0002\u0002\u0002\u0255\u0246",
    "\u0003\u0002\u0002\u0002\u0255\u0248\u0003\u0002\u0002\u0002\u0255\u0251",
    "\u0003\u0002\u0002\u0002\u0256\u001d\u0003\u0002\u0002\u0002\u0257\u0259",
    "\u0005@!\u0002\u0258\u025a\t\u0007\u0002\u0002\u0259\u0258\u0003\u0002",
    "\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025d\u0003\u0002",
    "\u0002\u0002\u025b\u025c\u0007+\u0002\u0002\u025c\u025e\t\b\u0002\u0002",
    "\u025d\u025b\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002",
    "\u025e\u001f\u0003\u0002\u0002\u0002\u025f\u0261\u0007\f\u0002\u0002",
    "\u0260\u0262\u0005,\u0017\u0002\u0261\u0260\u0003\u0002\u0002\u0002",
    "\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002",
    "\u0263\u0268\u0005.\u0018\u0002\u0264\u0265\u0007\u0005\u0002\u0002",
    "\u0265\u0267\u0005.\u0018\u0002\u0266\u0264\u0003\u0002\u0002\u0002",
    "\u0267\u026a\u0003\u0002\u0002\u0002\u0268\u0266\u0003\u0002\u0002\u0002",
    "\u0268\u0269\u0003\u0002\u0002\u0002\u0269\u0274\u0003\u0002\u0002\u0002",
    "\u026a\u0268\u0003\u0002\u0002\u0002\u026b\u026c\u0007\r\u0002\u0002",
    "\u026c\u0271\u00050\u0019\u0002\u026d\u026e\u0007\u0005\u0002\u0002",
    "\u026e\u0270\u00050\u0019\u0002\u026f\u026d\u0003\u0002\u0002\u0002",
    "\u0270\u0273\u0003\u0002\u0002\u0002\u0271\u026f\u0003\u0002\u0002\u0002",
    "\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u0275\u0003\u0002\u0002\u0002",
    "\u0273\u0271\u0003\u0002\u0002\u0002\u0274\u026b\u0003\u0002\u0002\u0002",
    "\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0278\u0003\u0002\u0002\u0002",
    "\u0276\u0277\u0007\u0014\u0002\u0002\u0277\u0279\u0005B\"\u0002\u0278",
    "\u0276\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279",
    "\u027d\u0003\u0002\u0002\u0002\u027a\u027b\u0007\u0015\u0002\u0002\u027b",
    "\u027c\u0007\u0016\u0002\u0002\u027c\u027e\u0005\"\u0012\u0002\u027d",
    "\u027a\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e",
    "\u0281\u0003\u0002\u0002\u0002\u027f\u0280\u0007\u001c\u0002\u0002\u0280",
    "\u0282\u0005B\"\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0003\u0002\u0002\u0002\u0282!\u0003\u0002\u0002\u0002\u0283\u0285",
    "\u0005,\u0017\u0002\u0284\u0283\u0003\u0002\u0002\u0002\u0284\u0285",
    "\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u028b",
    "\u0005$\u0013\u0002\u0287\u0288\u0007\u0005\u0002\u0002\u0288\u028a",
    "\u0005$\u0013\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u028a\u028d",
    "\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002\u0002\u028b\u028c",
    "\u0003\u0002\u0002\u0002\u028c#\u0003\u0002\u0002\u0002\u028d\u028b",
    "\u0003\u0002\u0002\u0002\u028e\u02b7\u0005&\u0014\u0002\u028f\u0290",
    "\u0007\u001a\u0002\u0002\u0290\u0299\u0007\u0004\u0002\u0002\u0291\u0296",
    "\u0005r:\u0002\u0292\u0293\u0007\u0005\u0002\u0002\u0293\u0295\u0005",
    "r:\u0002\u0294\u0292\u0003\u0002\u0002\u0002\u0295\u0298\u0003\u0002",
    "\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002",
    "\u0002\u0002\u0297\u029a\u0003\u0002\u0002\u0002\u0298\u0296\u0003\u0002",
    "\u0002\u0002\u0299\u0291\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002",
    "\u0002\u0002\u029a\u029b\u0003\u0002\u0002\u0002\u029b\u02b7\u0007\u0006",
    "\u0002\u0002\u029c\u029d\u0007\u0019\u0002\u0002\u029d\u02a6\u0007\u0004",
    "\u0002\u0002\u029e\u02a3\u0005r:\u0002\u029f\u02a0\u0007\u0005\u0002",
    "\u0002\u02a0\u02a2\u0005r:\u0002\u02a1\u029f\u0003\u0002\u0002\u0002",
    "\u02a2\u02a5\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002\u0002",
    "\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a7\u0003\u0002\u0002\u0002",
    "\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a6\u029e\u0003\u0002\u0002\u0002",
    "\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002",
    "\u02a8\u02b7\u0007\u0006\u0002\u0002\u02a9\u02aa\u0007\u0017\u0002\u0002",
    "\u02aa\u02ab\u0007\u0018\u0002\u0002\u02ab\u02ac\u0007\u0004\u0002\u0002",
    "\u02ac\u02b1\u0005(\u0015\u0002\u02ad\u02ae\u0007\u0005\u0002\u0002",
    "\u02ae\u02b0\u0005(\u0015\u0002\u02af\u02ad\u0003\u0002\u0002\u0002",
    "\u02b0\u02b3\u0003\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002",
    "\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b4\u0003\u0002\u0002\u0002",
    "\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b4\u02b5\u0007\u0006\u0002\u0002",
    "\u02b5\u02b7\u0003\u0002\u0002\u0002\u02b6\u028e\u0003\u0002\u0002\u0002",
    "\u02b6\u028f\u0003\u0002\u0002\u0002\u02b6\u029c\u0003\u0002\u0002\u0002",
    "\u02b6\u02a9\u0003\u0002\u0002\u0002\u02b7%\u0003\u0002\u0002\u0002",
    "\u02b8\u02c1\u0007\u0004\u0002\u0002\u02b9\u02be\u0005@!\u0002\u02ba",
    "\u02bb\u0007\u0005\u0002\u0002\u02bb\u02bd\u0005@!\u0002\u02bc\u02ba",
    "\u0003\u0002\u0002\u0002\u02bd\u02c0\u0003\u0002\u0002\u0002\u02be\u02bc",
    "\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c2",
    "\u0003\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c1\u02b9",
    "\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3",
    "\u0003\u0002\u0002\u0002\u02c3\u02c6\u0007\u0006\u0002\u0002\u02c4\u02c6",
    "\u0005@!\u0002\u02c5\u02b8\u0003\u0002\u0002\u0002\u02c5\u02c4\u0003",
    "\u0002\u0002\u0002\u02c6\'\u0003\u0002\u0002\u0002\u02c7\u02d0\u0007",
    "\u0004\u0002\u0002\u02c8\u02cd\u0005r:\u0002\u02c9\u02ca\u0007\u0005",
    "\u0002\u0002\u02ca\u02cc\u0005r:\u0002\u02cb\u02c9\u0003\u0002\u0002",
    "\u0002\u02cc\u02cf\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003\u0002\u0002",
    "\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002",
    "\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02c8\u0003\u0002\u0002",
    "\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002",
    "\u0002\u02d2\u02d5\u0007\u0006\u0002\u0002\u02d3\u02d5\u0005r:\u0002",
    "\u02d4\u02c7\u0003\u0002\u0002\u0002\u02d4\u02d3\u0003\u0002\u0002\u0002",
    "\u02d5)\u0003\u0002\u0002\u0002\u02d6\u02d8\u0005t;\u0002\u02d7\u02d9",
    "\u0005<\u001f\u0002\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d8\u02d9",
    "\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02db",
    "\u0007\u000f\u0002\u0002\u02db\u02dc\u0007\u0004\u0002\u0002\u02dc\u02dd",
    "\u0005\n\u0006\u0002\u02dd\u02de\u0007\u0006\u0002\u0002\u02de+\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\t\t\u0002\u0002\u02e0-\u0003\u0002\u0002",
    "\u0002\u02e1\u02e6\u0005@!\u0002\u02e2\u02e4\u0007\u000f\u0002\u0002",
    "\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002",
    "\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e7\u0005t;\u0002\u02e6",
    "\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7",
    "\u02ee\u0003\u0002\u0002\u0002\u02e8\u02e9\u0005r:\u0002\u02e9\u02ea",
    "\u0007\u0003\u0002\u0002\u02ea\u02eb\u0007\u00c2\u0002\u0002\u02eb\u02ee",
    "\u0003\u0002\u0002\u0002\u02ec\u02ee\u0007\u00c2\u0002\u0002\u02ed\u02e1",
    "\u0003\u0002\u0002\u0002\u02ed\u02e8\u0003\u0002\u0002\u0002\u02ed\u02ec",
    "\u0003\u0002\u0002\u0002\u02ee/\u0003\u0002\u0002\u0002\u02ef\u02f0",
    "\b\u0019\u0001\u0002\u02f0\u02f1\u00056\u001c\u0002\u02f1\u0304\u0003",
    "\u0002\u0002\u0002\u02f2\u0300\f\u0004\u0002\u0002\u02f3\u02f4\u0007",
    "N\u0002\u0002\u02f4\u02f5\u0007M\u0002\u0002\u02f5\u0301\u00056\u001c",
    "\u0002\u02f6\u02f7\u00052\u001a\u0002\u02f7\u02f8\u0007M\u0002\u0002",
    "\u02f8\u02f9\u00050\u0019\u0002\u02f9\u02fa\u00054\u001b\u0002\u02fa",
    "\u0301\u0003\u0002\u0002\u0002\u02fb\u02fc\u0007T\u0002\u0002\u02fc",
    "\u02fd\u00052\u001a\u0002\u02fd\u02fe\u0007M\u0002\u0002\u02fe\u02ff",
    "\u00056\u001c\u0002\u02ff\u0301\u0003\u0002\u0002\u0002\u0300\u02f3",
    "\u0003\u0002\u0002\u0002\u0300\u02f6\u0003\u0002\u0002\u0002\u0300\u02fb",
    "\u0003\u0002\u0002\u0002\u0301\u0303\u0003\u0002\u0002\u0002\u0302\u02f2",
    "\u0003\u0002\u0002\u0002\u0303\u0306\u0003\u0002\u0002\u0002\u0304\u0302",
    "\u0003\u0002\u0002\u0002\u0304\u0305\u0003\u0002\u0002\u0002\u03051",
    "\u0003\u0002\u0002\u0002\u0306\u0304\u0003\u0002\u0002\u0002\u0307\u0309",
    "\u0007P\u0002\u0002\u0308\u0307\u0003\u0002\u0002\u0002\u0308\u0309",
    "\u0003\u0002\u0002\u0002\u0309\u0317\u0003\u0002\u0002\u0002\u030a\u030c",
    "\u0007Q\u0002\u0002\u030b\u030d\u0007O\u0002\u0002\u030c\u030b\u0003",
    "\u0002\u0002\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u0317\u0003",
    "\u0002\u0002\u0002\u030e\u0310\u0007R\u0002\u0002\u030f\u0311\u0007",
    "O\u0002\u0002\u0310\u030f\u0003\u0002\u0002\u0002\u0310\u0311\u0003",
    "\u0002\u0002\u0002\u0311\u0317\u0003\u0002\u0002\u0002\u0312\u0314\u0007",
    "S\u0002\u0002\u0313\u0315\u0007O\u0002\u0002\u0314\u0313\u0003\u0002",
    "\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0317\u0003\u0002",
    "\u0002\u0002\u0316\u0308\u0003\u0002\u0002\u0002\u0316\u030a\u0003\u0002",
    "\u0002\u0002\u0316\u030e\u0003\u0002\u0002\u0002\u0316\u0312\u0003\u0002",
    "\u0002\u0002\u03173\u0003\u0002\u0002\u0002\u0318\u0319\u0007V\u0002",
    "\u0002\u0319\u0327\u0005B\"\u0002\u031a\u031b\u0007U\u0002\u0002\u031b",
    "\u031c\u0007\u0004\u0002\u0002\u031c\u0321\u0005t;\u0002\u031d\u031e",
    "\u0007\u0005\u0002\u0002\u031e\u0320\u0005t;\u0002\u031f\u031d\u0003",
    "\u0002\u0002\u0002\u0320\u0323\u0003\u0002\u0002\u0002\u0321\u031f\u0003",
    "\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002\u0322\u0324\u0003",
    "\u0002\u0002\u0002\u0323\u0321\u0003\u0002\u0002\u0002\u0324\u0325\u0007",
    "\u0006\u0002\u0002\u0325\u0327\u0003\u0002\u0002\u0002\u0326\u0318\u0003",
    "\u0002\u0002\u0002\u0326\u031a\u0003\u0002\u0002\u0002\u03275\u0003",
    "\u0002\u0002\u0002\u0328\u032f\u0005:\u001e\u0002\u0329\u032a\u0007",
    "\u008e\u0002\u0002\u032a\u032b\u00058\u001d\u0002\u032b\u032c\u0007",
    "\u0004\u0002\u0002\u032c\u032d\u0005@!\u0002\u032d\u032e\u0007\u0006",
    "\u0002\u0002\u032e\u0330\u0003\u0002\u0002\u0002\u032f\u0329\u0003\u0002",
    "\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u03307\u0003\u0002",
    "\u0002\u0002\u0331\u0332\t\n\u0002\u0002\u03329\u0003\u0002\u0002\u0002",
    "\u0333\u033b\u0005> \u0002\u0334\u0336\u0007\u000f\u0002\u0002\u0335",
    "\u0334\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0003\u0002\u0002\u0002\u0337\u0339\u0005t;\u0002\u0338\u033a",
    "\u0005<\u001f\u0002\u0339\u0338\u0003\u0002\u0002\u0002\u0339\u033a",
    "\u0003\u0002\u0002\u0002\u033a\u033c\u0003\u0002\u0002\u0002\u033b\u0335",
    "\u0003\u0002\u0002\u0002\u033b\u033c\u0003\u0002\u0002\u0002\u033c;",
    "\u0003\u0002\u0002\u0002\u033d\u033e\u0007\u0004\u0002\u0002\u033e\u0343",
    "\u0005t;\u0002\u033f\u0340\u0007\u0005\u0002\u0002\u0340\u0342\u0005",
    "t;\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u0345\u0003\u0002",
    "\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0343\u0344\u0003\u0002",
    "\u0002\u0002\u0344\u0346\u0003\u0002\u0002\u0002\u0345\u0343\u0003\u0002",
    "\u0002\u0002\u0346\u0347\u0007\u0006\u0002\u0002\u0347=\u0003\u0002",
    "\u0002\u0002\u0348\u0361\u0005r:\u0002\u0349\u034a\u0007\u0004\u0002",
    "\u0002\u034a\u034b\u0005\n\u0006\u0002\u034b\u034c\u0007\u0006\u0002",
    "\u0002\u034c\u0361\u0003\u0002\u0002\u0002\u034d\u034e\u0007\u0091\u0002",
    "\u0002\u034e\u034f\u0007\u0004\u0002\u0002\u034f\u0354\u0005@!\u0002",
    "\u0350\u0351\u0007\u0005\u0002\u0002\u0351\u0353\u0005@!\u0002\u0352",
    "\u0350\u0003\u0002\u0002\u0002\u0353\u0356\u0003\u0002\u0002\u0002\u0354",
    "\u0352\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355",
    "\u0357\u0003\u0002\u0002\u0002\u0356\u0354\u0003\u0002\u0002\u0002\u0357",
    "\u035a\u0007\u0006\u0002\u0002\u0358\u0359\u0007a\u0002\u0002\u0359",
    "\u035b\u0007\u0092\u0002\u0002\u035a\u0358\u0003\u0002\u0002\u0002\u035a",
    "\u035b\u0003\u0002\u0002\u0002\u035b\u0361\u0003\u0002\u0002\u0002\u035c",
    "\u035d\u0007\u0004\u0002\u0002\u035d\u035e\u00050\u0019\u0002\u035e",
    "\u035f\u0007\u0006\u0002\u0002\u035f\u0361\u0003\u0002\u0002\u0002\u0360",
    "\u0348\u0003\u0002\u0002\u0002\u0360\u0349\u0003\u0002\u0002\u0002\u0360",
    "\u034d\u0003\u0002\u0002\u0002\u0360\u035c\u0003\u0002\u0002\u0002\u0361",
    "?\u0003\u0002\u0002\u0002\u0362\u0363\u0005B\"\u0002\u0363A\u0003\u0002",
    "\u0002\u0002\u0364\u0365\b\"\u0001\u0002\u0365\u0369\u0005D#\u0002\u0366",
    "\u0367\u0007\"\u0002\u0002\u0367\u0369\u0005B\"\u0005\u0368\u0364\u0003",
    "\u0002\u0002\u0002\u0368\u0366\u0003\u0002\u0002\u0002\u0369\u0372\u0003",
    "\u0002\u0002\u0002\u036a\u036b\f\u0004\u0002\u0002\u036b\u036c\u0007",
    " \u0002\u0002\u036c\u0371\u0005B\"\u0005\u036d\u036e\f\u0003\u0002\u0002",
    "\u036e\u036f\u0007\u001f\u0002\u0002\u036f\u0371\u0005B\"\u0004\u0370",
    "\u036a\u0003\u0002\u0002\u0002\u0370\u036d\u0003\u0002\u0002\u0002\u0371",
    "\u0374\u0003\u0002\u0002\u0002\u0372\u0370\u0003\u0002\u0002\u0002\u0372",
    "\u0373\u0003\u0002\u0002\u0002\u0373C\u0003\u0002\u0002\u0002\u0374",
    "\u0372\u0003\u0002\u0002\u0002\u0375\u0377\u0005H%\u0002\u0376\u0378",
    "\u0005F$\u0002\u0377\u0376\u0003\u0002\u0002\u0002\u0377\u0378\u0003",
    "\u0002\u0002\u0002\u0378E\u0003\u0002\u0002\u0002\u0379\u037a\u0005",
    "N(\u0002\u037a\u037b\u0005H%\u0002\u037b\u03b7\u0003\u0002\u0002\u0002",
    "\u037c\u037d\u0005N(\u0002\u037d\u037e\u0005P)\u0002\u037e\u037f\u0007",
    "\u0004\u0002\u0002\u037f\u0380\u0005\n\u0006\u0002\u0380\u0381\u0007",
    "\u0006\u0002\u0002\u0381\u03b7\u0003\u0002\u0002\u0002\u0382\u0384\u0007",
    "\"\u0002\u0002\u0383\u0382\u0003\u0002\u0002\u0002\u0383\u0384\u0003",
    "\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002\u0385\u0386\u0007",
    "%\u0002\u0002\u0386\u0387\u0005H%\u0002\u0387\u0388\u0007 \u0002\u0002",
    "\u0388\u0389\u0005H%\u0002\u0389\u03b7\u0003\u0002\u0002\u0002\u038a",
    "\u038c\u0007\"\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038b",
    "\u038c\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d",
    "\u038e\u0007!\u0002\u0002\u038e\u038f\u0007\u0004\u0002\u0002\u038f",
    "\u0394\u0005@!\u0002\u0390\u0391\u0007\u0005\u0002\u0002\u0391\u0393",
    "\u0005@!\u0002\u0392\u0390\u0003\u0002\u0002\u0002\u0393\u0396\u0003",
    "\u0002\u0002\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0395\u0003",
    "\u0002\u0002\u0002\u0395\u0397\u0003\u0002\u0002\u0002\u0396\u0394\u0003",
    "\u0002\u0002\u0002\u0397\u0398\u0007\u0006\u0002\u0002\u0398\u03b7\u0003",
    "\u0002\u0002\u0002\u0399\u039b\u0007\"\u0002\u0002\u039a\u0399\u0003",
    "\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002\u0002\u039b\u039c\u0003",
    "\u0002\u0002\u0002\u039c\u039d\u0007!\u0002\u0002\u039d\u039e\u0007",
    "\u0004\u0002\u0002\u039e\u039f\u0005\n\u0006\u0002\u039f\u03a0\u0007",
    "\u0006\u0002\u0002\u03a0\u03b7\u0003\u0002\u0002\u0002\u03a1\u03a3\u0007",
    "\"\u0002\u0002\u03a2\u03a1\u0003\u0002\u0002\u0002\u03a2\u03a3\u0003",
    "\u0002\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a5\u0007",
    "&\u0002\u0002\u03a5\u03a8\u0005H%\u0002\u03a6\u03a7\u0007.\u0002\u0002",
    "\u03a7\u03a9\u0005H%\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8",
    "\u03a9\u0003\u0002\u0002\u0002\u03a9\u03b7\u0003\u0002\u0002\u0002\u03aa",
    "\u03ac\u0007\'\u0002\u0002\u03ab\u03ad\u0007\"\u0002\u0002\u03ac\u03ab",
    "\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad\u03ae",
    "\u0003\u0002\u0002\u0002\u03ae\u03b7\u0007(\u0002\u0002\u03af\u03b1",
    "\u0007\'\u0002\u0002\u03b0\u03b2\u0007\"\u0002\u0002\u03b1\u03b0\u0003",
    "\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003",
    "\u0002\u0002\u0002\u03b3\u03b4\u0007\u0013\u0002\u0002\u03b4\u03b5\u0007",
    "\r\u0002\u0002\u03b5\u03b7\u0005H%\u0002\u03b6\u0379\u0003\u0002\u0002",
    "\u0002\u03b6\u037c\u0003\u0002\u0002\u0002\u03b6\u0383\u0003\u0002\u0002",
    "\u0002\u03b6\u038b\u0003\u0002\u0002\u0002\u03b6\u039a\u0003\u0002\u0002",
    "\u0002\u03b6\u03a2\u0003\u0002\u0002\u0002\u03b6\u03aa\u0003\u0002\u0002",
    "\u0002\u03b6\u03af\u0003\u0002\u0002\u0002\u03b7G\u0003\u0002\u0002",
    "\u0002\u03b8\u03b9\b%\u0001\u0002\u03b9\u03bd\u0005J&\u0002\u03ba\u03bb",
    "\t\u000b\u0002\u0002\u03bb\u03bd\u0005H%\u0006\u03bc\u03b8\u0003\u0002",
    "\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bd\u03cc\u0003\u0002",
    "\u0002\u0002\u03be\u03bf\f\u0005\u0002\u0002\u03bf\u03c0\t\f\u0002\u0002",
    "\u03c0\u03cb\u0005H%\u0006\u03c1\u03c2\f\u0004\u0002\u0002\u03c2\u03c3",
    "\t\u000b\u0002\u0002\u03c3\u03cb\u0005H%\u0005\u03c4\u03c5\f\u0003\u0002",
    "\u0002\u03c5\u03c6\u0007\u00c5\u0002\u0002\u03c6\u03cb\u0005H%\u0004",
    "\u03c7\u03c8\f\u0007\u0002\u0002\u03c8\u03c9\u0007\u001e\u0002\u0002",
    "\u03c9\u03cb\u0005L\'\u0002\u03ca\u03be\u0003\u0002\u0002\u0002\u03ca",
    "\u03c1\u0003\u0002\u0002\u0002\u03ca\u03c4\u0003\u0002\u0002\u0002\u03ca",
    "\u03c7\u0003\u0002\u0002\u0002\u03cb\u03ce\u0003\u0002\u0002\u0002\u03cc",
    "\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd",
    "I\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03cf",
    "\u03d0\b&\u0001\u0002\u03d0\u049e\u0007(\u0002\u0002\u03d1\u049e\u0005",
    "T+\u0002\u03d2\u03d3\u0005t;\u0002\u03d3\u03d4\u0007\u00c6\u0002\u0002",
    "\u03d4\u049e\u0003\u0002\u0002\u0002\u03d5\u03d6\u0007\u00d0\u0002\u0002",
    "\u03d6\u049e\u0007\u00c6\u0002\u0002\u03d7\u049e\u0005x=\u0002\u03d8",
    "\u049e\u0005R*\u0002\u03d9\u049e\u0007\u00c6\u0002\u0002\u03da\u049e",
    "\u0007\u00c7\u0002\u0002\u03db\u049e\u0007\u0007\u0002\u0002\u03dc\u03dd",
    "\u00072\u0002\u0002\u03dd\u03de\u0007\u0004\u0002\u0002\u03de\u03df",
    "\u0005H%\u0002\u03df\u03e0\u0007!\u0002\u0002\u03e0\u03e1\u0005H%\u0002",
    "\u03e1\u03e2\u0007\u0006\u0002\u0002\u03e2\u049e\u0003\u0002\u0002\u0002",
    "\u03e3\u03e4\u0007\u0004\u0002\u0002\u03e4\u03e9\u0005@!\u0002\u03e5",
    "\u03e6\u0007\u0005\u0002\u0002\u03e6\u03e8\u0005@!\u0002\u03e7\u03e5",
    "\u0003\u0002\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002\u0002\u03e9\u03e7",
    "\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03ec",
    "\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec\u03ed",
    "\u0007\u0006\u0002\u0002\u03ed\u049e\u0003\u0002\u0002\u0002\u03ee\u03ef",
    "\u0007`\u0002\u0002\u03ef\u03f0\u0007\u0004\u0002\u0002\u03f0\u03f5",
    "\u0005@!\u0002\u03f1\u03f2\u0007\u0005\u0002\u0002\u03f2\u03f4\u0005",
    "@!\u0002\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f4\u03f7\u0003\u0002",
    "\u0002\u0002\u03f5\u03f3\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002",
    "\u0002\u0002\u03f6\u03f8\u0003\u0002\u0002\u0002\u03f7\u03f5\u0003\u0002",
    "\u0002\u0002\u03f8\u03f9\u0007\u0006\u0002\u0002\u03f9\u049e\u0003\u0002",
    "\u0002\u0002\u03fa\u03fb\u0005r:\u0002\u03fb\u03fc\u0007\u0004\u0002",
    "\u0002\u03fc\u03fd\u0007\u00c2\u0002\u0002\u03fd\u03ff\u0007\u0006\u0002",
    "\u0002\u03fe\u0400\u0005`1\u0002\u03ff\u03fe\u0003\u0002\u0002\u0002",
    "\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0402\u0003\u0002\u0002\u0002",
    "\u0401\u0403\u0005b2\u0002\u0402\u0401\u0003\u0002\u0002\u0002\u0402",
    "\u0403\u0003\u0002\u0002\u0002\u0403\u049e\u0003\u0002\u0002\u0002\u0404",
    "\u0405\u0005r:\u0002\u0405\u0411\u0007\u0004\u0002\u0002\u0406\u0408",
    "\u0005,\u0017\u0002\u0407\u0406\u0003\u0002\u0002\u0002\u0407\u0408",
    "\u0003\u0002\u0002\u0002\u0408\u0409\u0003\u0002\u0002\u0002\u0409\u040e",
    "\u0005@!\u0002\u040a\u040b\u0007\u0005\u0002\u0002\u040b\u040d\u0005",
    "@!\u0002\u040c\u040a\u0003\u0002\u0002\u0002\u040d\u0410\u0003\u0002",
    "\u0002\u0002\u040e\u040c\u0003\u0002\u0002\u0002\u040e\u040f\u0003\u0002",
    "\u0002\u0002\u040f\u0412\u0003\u0002\u0002\u0002\u0410\u040e\u0003\u0002",
    "\u0002\u0002\u0411\u0407\u0003\u0002\u0002\u0002\u0411\u0412\u0003\u0002",
    "\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413\u0415\u0007\u0006",
    "\u0002\u0002\u0414\u0416\u0005`1\u0002\u0415\u0414\u0003\u0002\u0002",
    "\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0418\u0003\u0002\u0002",
    "\u0002\u0417\u0419\u0005b2\u0002\u0418\u0417\u0003\u0002\u0002\u0002",
    "\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u049e\u0003\u0002\u0002\u0002",
    "\u041a\u041b\u0005t;\u0002\u041b\u041c\u0007\b\u0002\u0002\u041c\u041d",
    "\u0005@!\u0002\u041d\u049e\u0003\u0002\u0002\u0002\u041e\u041f\u0007",
    "\u0004\u0002\u0002\u041f\u0424\u0005t;\u0002\u0420\u0421\u0007\u0005",
    "\u0002\u0002\u0421\u0423\u0005t;\u0002\u0422\u0420\u0003\u0002\u0002",
    "\u0002\u0423\u0426\u0003\u0002\u0002\u0002\u0424\u0422\u0003\u0002\u0002",
    "\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0427\u0003\u0002\u0002",
    "\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0427\u0428\u0007\u0006\u0002",
    "\u0002\u0428\u0429\u0007\b\u0002\u0002\u0429\u042a\u0005@!\u0002\u042a",
    "\u049e\u0003\u0002\u0002\u0002\u042b\u042c\u0007\u0004\u0002\u0002\u042c",
    "\u042d\u0005\n\u0006\u0002\u042d\u042e\u0007\u0006\u0002\u0002\u042e",
    "\u049e\u0003\u0002\u0002\u0002\u042f\u0430\u0007$\u0002\u0002\u0430",
    "\u0431\u0007\u0004\u0002\u0002\u0431\u0432\u0005\n\u0006\u0002\u0432",
    "\u0433\u0007\u0006\u0002\u0002\u0433\u049e\u0003\u0002\u0002\u0002\u0434",
    "\u0435\u0007H\u0002\u0002\u0435\u0437\u0005H%\u0002\u0436\u0438\u0005",
    "^0\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0438\u0439\u0003\u0002",
    "\u0002\u0002\u0439\u0437\u0003\u0002\u0002\u0002\u0439\u043a\u0003\u0002",
    "\u0002\u0002\u043a\u043d\u0003\u0002\u0002\u0002\u043b\u043c\u0007K",
    "\u0002\u0002\u043c\u043e\u0005@!\u0002\u043d\u043b\u0003\u0002\u0002",
    "\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002",
    "\u0002\u043f\u0440\u0007L\u0002\u0002\u0440\u049e\u0003\u0002\u0002",
    "\u0002\u0441\u0443\u0007H\u0002\u0002\u0442\u0444\u0005^0\u0002\u0443",
    "\u0442\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445",
    "\u0443\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002\u0002\u0446",
    "\u0449\u0003\u0002\u0002\u0002\u0447\u0448\u0007K\u0002\u0002\u0448",
    "\u044a\u0005@!\u0002\u0449\u0447\u0003\u0002\u0002\u0002\u0449\u044a",
    "\u0003\u0002\u0002\u0002\u044a\u044b\u0003\u0002\u0002\u0002\u044b\u044c",
    "\u0007L\u0002\u0002\u044c\u049e\u0003\u0002\u0002\u0002\u044d\u044e",
    "\u0007{\u0002\u0002\u044e\u044f\u0007\u0004\u0002\u0002\u044f\u0450",
    "\u0005@!\u0002\u0450\u0451\u0007\u000f\u0002\u0002\u0451\u0452\u0005",
    "X-\u0002\u0452\u0453\u0007\u0006\u0002\u0002\u0453\u049e\u0003\u0002",
    "\u0002\u0002\u0454\u0455\u0007|\u0002\u0002\u0455\u0456\u0007\u0004",
    "\u0002\u0002\u0456\u0457\u0005@!\u0002\u0457\u0458\u0007\u000f\u0002",
    "\u0002\u0458\u0459\u0005X-\u0002\u0459\u045a\u0007\u0006\u0002\u0002",
    "\u045a\u049e\u0003\u0002\u0002\u0002\u045b\u045c\u0007\u0093\u0002\u0002",
    "\u045c\u0465\u0007\t\u0002\u0002\u045d\u0462\u0005@!\u0002\u045e\u045f",
    "\u0007\u0005\u0002\u0002\u045f\u0461\u0005@!\u0002\u0460\u045e\u0003",
    "\u0002\u0002\u0002\u0461\u0464\u0003\u0002\u0002\u0002\u0462\u0460\u0003",
    "\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0466\u0003",
    "\u0002\u0002\u0002\u0464\u0462\u0003\u0002\u0002\u0002\u0465\u045d\u0003",
    "\u0002\u0002\u0002\u0465\u0466\u0003\u0002\u0002\u0002\u0466\u0467\u0003",
    "\u0002\u0002\u0002\u0467\u049e\u0007\n\u0002\u0002\u0468\u049e\u0005",
    "t;\u0002\u0469\u049e\u0007B\u0002\u0002\u046a\u046e\u0007C\u0002\u0002",
    "\u046b\u046c\u0007\u0004\u0002\u0002\u046c\u046d\u0007\u00c8\u0002\u0002",
    "\u046d\u046f\u0007\u0006\u0002\u0002\u046e\u046b\u0003\u0002\u0002\u0002",
    "\u046e\u046f\u0003\u0002\u0002\u0002\u046f\u049e\u0003\u0002\u0002\u0002",
    "\u0470\u0474\u0007D\u0002\u0002\u0471\u0472\u0007\u0004\u0002\u0002",
    "\u0472\u0473\u0007\u00c8\u0002\u0002\u0473\u0475\u0007\u0006\u0002\u0002",
    "\u0474\u0471\u0003\u0002\u0002\u0002\u0474\u0475\u0003\u0002\u0002\u0002",
    "\u0475\u049e\u0003\u0002\u0002\u0002\u0476\u047a\u0007E\u0002\u0002",
    "\u0477\u0478\u0007\u0004\u0002\u0002\u0478\u0479\u0007\u00c8\u0002\u0002",
    "\u0479\u047b\u0007\u0006\u0002\u0002\u047a\u0477\u0003\u0002\u0002\u0002",
    "\u047a\u047b\u0003\u0002\u0002\u0002\u047b\u049e\u0003\u0002\u0002\u0002",
    "\u047c\u0480\u0007F\u0002\u0002\u047d\u047e\u0007\u0004\u0002\u0002",
    "\u047e\u047f\u0007\u00c8\u0002\u0002\u047f\u0481\u0007\u0006\u0002\u0002",
    "\u0480\u047d\u0003\u0002\u0002\u0002\u0480\u0481\u0003\u0002\u0002\u0002",
    "\u0481\u049e\u0003\u0002\u0002\u0002\u0482\u0483\u00071\u0002\u0002",
    "\u0483\u0484\u0007\u0004\u0002\u0002\u0484\u0485\u0005H%\u0002\u0485",
    "\u0486\u0007\r\u0002\u0002\u0486\u0489\u0005H%\u0002\u0487\u0488\u0007",
    "3\u0002\u0002\u0488\u048a\u0005H%\u0002\u0489\u0487\u0003\u0002\u0002",
    "\u0002\u0489\u048a\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002",
    "\u0002\u048b\u048c\u0007\u0006\u0002\u0002\u048c\u049e\u0003\u0002\u0002",
    "\u0002\u048d\u048e\u0007\u00b2\u0002\u0002\u048e\u048f\u0007\u0004\u0002",
    "\u0002\u048f\u0492\u0005H%\u0002\u0490\u0491\u0007\u0005\u0002\u0002",
    "\u0491\u0493\u0005|?\u0002\u0492\u0490\u0003\u0002\u0002\u0002\u0492",
    "\u0493\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494",
    "\u0495\u0007\u0006\u0002\u0002\u0495\u049e\u0003\u0002\u0002\u0002\u0496",
    "\u0497\u0007G\u0002\u0002\u0497\u0498\u0007\u0004\u0002\u0002\u0498",
    "\u0499\u0005t;\u0002\u0499\u049a\u0007\r\u0002\u0002\u049a\u049b\u0005",
    "H%\u0002\u049b\u049c\u0007\u0006\u0002\u0002\u049c\u049e\u0003\u0002",
    "\u0002\u0002\u049d\u03cf\u0003\u0002\u0002\u0002\u049d\u03d1\u0003\u0002",
    "\u0002\u0002\u049d\u03d2\u0003\u0002\u0002\u0002\u049d\u03d5\u0003\u0002",
    "\u0002\u0002\u049d\u03d7\u0003\u0002\u0002\u0002\u049d\u03d8\u0003\u0002",
    "\u0002\u0002\u049d\u03d9\u0003\u0002\u0002\u0002\u049d\u03da\u0003\u0002",
    "\u0002\u0002\u049d\u03db\u0003\u0002\u0002\u0002\u049d\u03dc\u0003\u0002",
    "\u0002\u0002\u049d\u03e3\u0003\u0002\u0002\u0002\u049d\u03ee\u0003\u0002",
    "\u0002\u0002\u049d\u03fa\u0003\u0002\u0002\u0002\u049d\u0404\u0003\u0002",
    "\u0002\u0002\u049d\u041a\u0003\u0002\u0002\u0002\u049d\u041e\u0003\u0002",
    "\u0002\u0002\u049d\u042b\u0003\u0002\u0002\u0002\u049d\u042f\u0003\u0002",
    "\u0002\u0002\u049d\u0434\u0003\u0002\u0002\u0002\u049d\u0441\u0003\u0002",
    "\u0002\u0002\u049d\u044d\u0003\u0002\u0002\u0002\u049d\u0454\u0003\u0002",
    "\u0002\u0002\u049d\u045b\u0003\u0002\u0002\u0002\u049d\u0468\u0003\u0002",
    "\u0002\u0002\u049d\u0469\u0003\u0002\u0002\u0002\u049d\u046a\u0003\u0002",
    "\u0002\u0002\u049d\u0470\u0003\u0002\u0002\u0002\u049d\u0476\u0003\u0002",
    "\u0002\u0002\u049d\u047c\u0003\u0002\u0002\u0002\u049d\u0482\u0003\u0002",
    "\u0002\u0002\u049d\u048d\u0003\u0002\u0002\u0002\u049d\u0496\u0003\u0002",
    "\u0002\u0002\u049e\u04a9\u0003\u0002\u0002\u0002\u049f\u04a0\f\r\u0002",
    "\u0002\u04a0\u04a1\u0007\t\u0002\u0002\u04a1\u04a2\u0005H%\u0002\u04a2",
    "\u04a3\u0007\n\u0002\u0002\u04a3\u04a8\u0003\u0002\u0002\u0002\u04a4",
    "\u04a5\f\u000b\u0002\u0002\u04a5\u04a6\u0007\u0003\u0002\u0002\u04a6",
    "\u04a8\u0005t;\u0002\u04a7\u049f\u0003\u0002\u0002\u0002\u04a7\u04a4",
    "\u0003\u0002\u0002\u0002\u04a8\u04ab\u0003\u0002\u0002\u0002\u04a9\u04a7",
    "\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002\u0002\u04aaK",
    "\u0003\u0002\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ac\u04ad",
    "\u00078\u0002\u0002\u04ad\u04ae\u0007A\u0002\u0002\u04ae\u04b3\u0005",
    "T+\u0002\u04af\u04b0\u00078\u0002\u0002\u04b0\u04b1\u0007A\u0002\u0002",
    "\u04b1\u04b3\u0007\u00c6\u0002\u0002\u04b2\u04ac\u0003\u0002\u0002\u0002",
    "\u04b2\u04af\u0003\u0002\u0002\u0002\u04b3M\u0003\u0002\u0002\u0002",
    "\u04b4\u04b5\t\r\u0002\u0002\u04b5O\u0003\u0002\u0002\u0002\u04b6\u04b7",
    "\t\u000e\u0002\u0002\u04b7Q\u0003\u0002\u0002\u0002\u04b8\u04b9\t\u000f",
    "\u0002\u0002\u04b9S\u0003\u0002\u0002\u0002\u04ba\u04bc\u0007:\u0002",
    "\u0002\u04bb\u04bd\t\u000b\u0002\u0002\u04bc\u04bb\u0003\u0002\u0002",
    "\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002",
    "\u0002\u04be\u04bf\u0007\u00c6\u0002\u0002\u04bf\u04c2\u0005V,\u0002",
    "\u04c0\u04c1\u0007\u008a\u0002\u0002\u04c1\u04c3\u0005V,\u0002\u04c2",
    "\u04c0\u0003\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3",
    "U\u0003\u0002\u0002\u0002\u04c4\u04c5\t\u0010\u0002\u0002\u04c5W\u0003",
    "\u0002\u0002\u0002\u04c6\u04c7\b-\u0001\u0002\u04c7\u04c8\u0007\u0093",
    "\u0002\u0002\u04c8\u04c9\u0007\u00bc\u0002\u0002\u04c9\u04ca\u0005X",
    "-\u0002\u04ca\u04cb\u0007\u00be\u0002\u0002\u04cb\u04f1\u0003\u0002",
    "\u0002\u0002\u04cc\u04cd\u0007\u0094\u0002\u0002\u04cd\u04ce\u0007\u00bc",
    "\u0002\u0002\u04ce\u04cf\u0005X-\u0002\u04cf\u04d0\u0007\u0005\u0002",
    "\u0002\u04d0\u04d1\u0005X-\u0002\u04d1\u04d2\u0007\u00be\u0002\u0002",
    "\u04d2\u04f1\u0003\u0002\u0002\u0002\u04d3\u04d4\u0007`\u0002\u0002",
    "\u04d4\u04d5\u0007\u0004\u0002\u0002\u04d5\u04d6\u0005t;\u0002\u04d6",
    "\u04dd\u0005X-\u0002\u04d7\u04d8\u0007\u0005\u0002\u0002\u04d8\u04d9",
    "\u0005t;\u0002\u04d9\u04da\u0005X-\u0002\u04da\u04dc\u0003\u0002\u0002",
    "\u0002\u04db\u04d7\u0003\u0002\u0002\u0002\u04dc\u04df\u0003\u0002\u0002",
    "\u0002\u04dd\u04db\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002\u0002",
    "\u0002\u04de\u04e0\u0003\u0002\u0002\u0002\u04df\u04dd\u0003\u0002\u0002",
    "\u0002\u04e0\u04e1\u0007\u0006\u0002\u0002\u04e1\u04f1\u0003\u0002\u0002",
    "\u0002\u04e2\u04ee\u0005\\/\u0002\u04e3\u04e4\u0007\u0004\u0002\u0002",
    "\u04e4\u04e9\u0005Z.\u0002\u04e5\u04e6\u0007\u0005\u0002\u0002\u04e6",
    "\u04e8\u0005Z.\u0002\u04e7\u04e5\u0003\u0002\u0002\u0002\u04e8\u04eb",
    "\u0003\u0002\u0002\u0002\u04e9\u04e7\u0003\u0002\u0002\u0002\u04e9\u04ea",
    "\u0003\u0002\u0002\u0002\u04ea\u04ec\u0003\u0002\u0002\u0002\u04eb\u04e9",
    "\u0003\u0002\u0002\u0002\u04ec\u04ed\u0007\u0006\u0002\u0002\u04ed\u04ef",
    "\u0003\u0002\u0002\u0002\u04ee\u04e3\u0003\u0002\u0002\u0002\u04ee\u04ef",
    "\u0003\u0002\u0002\u0002\u04ef\u04f1\u0003\u0002\u0002\u0002\u04f0\u04c6",
    "\u0003\u0002\u0002\u0002\u04f0\u04cc\u0003\u0002\u0002\u0002\u04f0\u04d3",
    "\u0003\u0002\u0002\u0002\u04f0\u04e2\u0003\u0002\u0002\u0002\u04f1\u04f6",
    "\u0003\u0002\u0002\u0002\u04f2\u04f3\f\u0007\u0002\u0002\u04f3\u04f5",
    "\u0007\u0093\u0002\u0002\u04f4\u04f2\u0003\u0002\u0002\u0002\u04f5\u04f8",
    "\u0003\u0002\u0002\u0002\u04f6\u04f4\u0003\u0002\u0002\u0002\u04f6\u04f7",
    "\u0003\u0002\u0002\u0002\u04f7Y\u0003\u0002\u0002\u0002\u04f8\u04f6",
    "\u0003\u0002\u0002\u0002\u04f9\u04fc\u0007\u00c8\u0002\u0002\u04fa\u04fc",
    "\u0005X-\u0002\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fb\u04fa\u0003",
    "\u0002\u0002\u0002\u04fc[\u0003\u0002\u0002\u0002\u04fd\u0502\u0007",
    "\u00ce\u0002\u0002\u04fe\u0502\u0007\u00cf\u0002\u0002\u04ff\u0502\u0007",
    "\u00d0\u0002\u0002\u0500\u0502\u0005t;\u0002\u0501\u04fd\u0003\u0002",
    "\u0002\u0002\u0501\u04fe\u0003\u0002\u0002\u0002\u0501\u04ff\u0003\u0002",
    "\u0002\u0002\u0501\u0500\u0003\u0002\u0002\u0002\u0502]\u0003\u0002",
    "\u0002\u0002\u0503\u0504\u0007I\u0002\u0002\u0504\u0505\u0005@!\u0002",
    "\u0505\u0506\u0007J\u0002\u0002\u0506\u0507\u0005@!\u0002\u0507_\u0003",
    "\u0002\u0002\u0002\u0508\u0509\u0007W\u0002\u0002\u0509\u050a\u0007",
    "\u0004\u0002\u0002\u050a\u050b\u0007\u0014\u0002\u0002\u050b\u050c\u0005",
    "B\"\u0002\u050c\u050d\u0007\u0006\u0002\u0002\u050da\u0003\u0002\u0002",
    "\u0002\u050e\u050f\u0007X\u0002\u0002\u050f\u051a\u0007\u0004\u0002",
    "\u0002\u0510\u0511\u0007Y\u0002\u0002\u0511\u0512\u0007\u0016\u0002",
    "\u0002\u0512\u0517\u0005@!\u0002\u0513\u0514\u0007\u0005\u0002\u0002",
    "\u0514\u0516\u0005@!\u0002\u0515\u0513\u0003\u0002\u0002\u0002\u0516",
    "\u0519\u0003\u0002\u0002\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0517",
    "\u0518\u0003\u0002\u0002\u0002\u0518\u051b\u0003\u0002\u0002\u0002\u0519",
    "\u0517\u0003\u0002\u0002\u0002\u051a\u0510\u0003\u0002\u0002\u0002\u051a",
    "\u051b\u0003\u0002\u0002\u0002\u051b\u0526\u0003\u0002\u0002\u0002\u051c",
    "\u051d\u0007\u001b\u0002\u0002\u051d\u051e\u0007\u0016\u0002\u0002\u051e",
    "\u0523\u0005\u001e\u0010\u0002\u051f\u0520\u0007\u0005\u0002\u0002\u0520",
    "\u0522\u0005\u001e\u0010\u0002\u0521\u051f\u0003\u0002\u0002\u0002\u0522",
    "\u0525\u0003\u0002\u0002\u0002\u0523\u0521\u0003\u0002\u0002\u0002\u0523",
    "\u0524\u0003\u0002\u0002\u0002\u0524\u0527\u0003\u0002\u0002\u0002\u0525",
    "\u0523\u0003\u0002\u0002\u0002\u0526\u051c\u0003\u0002\u0002\u0002\u0526",
    "\u0527\u0003\u0002\u0002\u0002\u0527\u0529\u0003\u0002\u0002\u0002\u0528",
    "\u052a\u0005d3\u0002\u0529\u0528\u0003\u0002\u0002\u0002\u0529\u052a",
    "\u0003\u0002\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002\u052b\u052c",
    "\u0007\u0006\u0002\u0002\u052cc\u0003\u0002\u0002\u0002\u052d\u052e",
    "\u0007Z\u0002\u0002\u052e\u053e\u0005f4\u0002\u052f\u0530\u0007[\u0002",
    "\u0002\u0530\u053e\u0005f4\u0002\u0531\u0532\u0007Z\u0002\u0002\u0532",
    "\u0533\u0007%\u0002\u0002\u0533\u0534\u0005f4\u0002\u0534\u0535\u0007",
    " \u0002\u0002\u0535\u0536\u0005f4\u0002\u0536\u053e\u0003\u0002\u0002",
    "\u0002\u0537\u0538\u0007[\u0002\u0002\u0538\u0539\u0007%\u0002\u0002",
    "\u0539\u053a\u0005f4\u0002\u053a\u053b\u0007 \u0002\u0002\u053b\u053c",
    "\u0005f4\u0002\u053c\u053e\u0003\u0002\u0002\u0002\u053d\u052d\u0003",
    "\u0002\u0002\u0002\u053d\u052f\u0003\u0002\u0002\u0002\u053d\u0531\u0003",
    "\u0002\u0002\u0002\u053d\u0537\u0003\u0002\u0002\u0002\u053ee\u0003",
    "\u0002\u0002\u0002\u053f\u0540\u0007\\\u0002\u0002\u0540\u0549\u0007",
    "]\u0002\u0002\u0541\u0542\u0007\\\u0002\u0002\u0542\u0549\u0007^\u0002",
    "\u0002\u0543\u0544\u0007_\u0002\u0002\u0544\u0549\u0007`\u0002\u0002",
    "\u0545\u0546\u0005@!\u0002\u0546\u0547\t\u0011\u0002\u0002\u0547\u0549",
    "\u0003\u0002\u0002\u0002\u0548\u053f\u0003\u0002\u0002\u0002\u0548\u0541",
    "\u0003\u0002\u0002\u0002\u0548\u0543\u0003\u0002\u0002\u0002\u0548\u0545",
    "\u0003\u0002\u0002\u0002\u0549g\u0003\u0002\u0002\u0002\u054a\u054b",
    "\u0007u\u0002\u0002\u054b\u054f\t\u0012\u0002\u0002\u054c\u054d\u0007",
    "v\u0002\u0002\u054d\u054f\t\u0013\u0002\u0002\u054e\u054a\u0003\u0002",
    "\u0002\u0002\u054e\u054c\u0003\u0002\u0002\u0002\u054fi\u0003\u0002",
    "\u0002\u0002\u0550\u0551\u0007\u009e\u0002\u0002\u0551\u0552\u0007\u009f",
    "\u0002\u0002\u0552\u0556\u0005l7\u0002\u0553\u0554\u0007\u00a4\u0002",
    "\u0002\u0554\u0556\t\u0014\u0002\u0002\u0555\u0550\u0003\u0002\u0002",
    "\u0002\u0555\u0553\u0003\u0002\u0002\u0002\u0556k\u0003\u0002\u0002",
    "\u0002\u0557\u0558\u0007\u00a4\u0002\u0002\u0558\u055f\u0007\u00a3\u0002",
    "\u0002\u0559\u055a\u0007\u00a4\u0002\u0002\u055a\u055f\u0007\u00a2\u0002",
    "\u0002\u055b\u055c\u0007\u00a1\u0002\u0002\u055c\u055f\u0007\u00a4\u0002",
    "\u0002\u055d\u055f\u0007\u00a0\u0002\u0002\u055e\u0557\u0003\u0002\u0002",
    "\u0002\u055e\u0559\u0003\u0002\u0002\u0002\u055e\u055b\u0003\u0002\u0002",
    "\u0002\u055e\u055d\u0003\u0002\u0002\u0002\u055fm\u0003\u0002\u0002",
    "\u0002\u0560\u0566\u0005@!\u0002\u0561\u0562\u0005t;\u0002\u0562\u0563",
    "\u0007\u000b\u0002\u0002\u0563\u0564\u0005@!\u0002\u0564\u0566\u0003",
    "\u0002\u0002\u0002\u0565\u0560\u0003\u0002\u0002\u0002\u0565\u0561\u0003",
    "\u0002\u0002\u0002\u0566o\u0003\u0002\u0002\u0002\u0567\u056c\u0007",
    "\f\u0002\u0002\u0568\u056c\u0007j\u0002\u0002\u0569\u056c\u0007i\u0002",
    "\u0002\u056a\u056c\u0005t;\u0002\u056b\u0567\u0003\u0002\u0002\u0002",
    "\u056b\u0568\u0003\u0002\u0002\u0002\u056b\u0569\u0003\u0002\u0002\u0002",
    "\u056b\u056a\u0003\u0002\u0002\u0002\u056cq\u0003\u0002\u0002\u0002",
    "\u056d\u0572\u0005t;\u0002\u056e\u056f\u0007\u0003\u0002\u0002\u056f",
    "\u0571\u0005t;\u0002\u0570\u056e\u0003\u0002\u0002\u0002\u0571\u0574",
    "\u0003\u0002\u0002\u0002\u0572\u0570\u0003\u0002\u0002\u0002\u0572\u0573",
    "\u0003\u0002\u0002\u0002\u0573s\u0003\u0002\u0002\u0002\u0574\u0572",
    "\u0003\u0002\u0002\u0002\u0575\u057b\u0007\u00ca\u0002\u0002\u0576\u057b",
    "\u0005v<\u0002\u0577\u057b\u0005z>\u0002\u0578\u057b\u0007\u00cd\u0002",
    "\u0002\u0579\u057b\u0007\u00cb\u0002\u0002\u057a\u0575\u0003\u0002\u0002",
    "\u0002\u057a\u0576\u0003\u0002\u0002\u0002\u057a\u0577\u0003\u0002\u0002",
    "\u0002\u057a\u0578\u0003\u0002\u0002\u0002\u057a\u0579\u0003\u0002\u0002",
    "\u0002\u057bu\u0003\u0002\u0002\u0002\u057c\u057d\u0007\u00cc\u0002",
    "\u0002\u057dw\u0003\u0002\u0002\u0002\u057e\u0581\u0007\u00c9\u0002",
    "\u0002\u057f\u0581\u0007\u00c8\u0002\u0002\u0580\u057e\u0003\u0002\u0002",
    "\u0002\u0580\u057f\u0003\u0002\u0002\u0002\u0581y\u0003\u0002\u0002",
    "\u0002\u0582\u05dc\u0007}\u0002\u0002\u0583\u05dc\u0007~\u0002\u0002",
    "\u0584\u05dc\u0007\u0081\u0002\u0002\u0585\u05dc\u0007\u0082\u0002\u0002",
    "\u0586\u05dc\u0007\u0084\u0002\u0002\u0587\u05dc\u0007\u0085\u0002\u0002",
    "\u0588\u05dc\u0007\u007f\u0002\u0002\u0589\u05dc\u0007\u0080\u0002\u0002",
    "\u058a\u05dc\u0007\u0097\u0002\u0002\u058b\u05dc\u0007\u000e\u0002\u0002",
    "\u058c\u05dc\u0007W\u0002\u0002\u058d\u05dc\u0007X\u0002\u0002\u058e",
    "\u05dc\u0007Y\u0002\u0002\u058f\u05dc\u0007Z\u0002\u0002\u0590\u05dc",
    "\u0007[\u0002\u0002\u0591\u05dc\u0007]\u0002\u0002\u0592\u05dc\u0007",
    "^\u0002\u0002\u0593\u05dc\u0007_\u0002\u0002\u0594\u05dc\u0007`\u0002",
    "\u0002\u0595\u05dc\u0007\u0094\u0002\u0002\u0596\u05dc\u0007\u0093\u0002",
    "\u0002\u0597\u05dc\u00074\u0002\u0002\u0598\u05dc\u00075\u0002\u0002",
    "\u0599\u05dc\u00076\u0002\u0002\u059a\u05dc\u00077\u0002\u0002\u059b",
    "\u05dc\u00078\u0002\u0002\u059c\u05dc\u00079\u0002\u0002\u059d\u05dc",
    "\u0007:\u0002\u0002\u059e\u05dc\u0007A\u0002\u0002\u059f\u05dc\u0007",
    ";\u0002\u0002\u05a0\u05dc\u0007<\u0002\u0002\u05a1\u05dc\u0007=\u0002",
    "\u0002\u05a2\u05dc\u0007>\u0002\u0002\u05a3\u05dc\u0007?\u0002\u0002",
    "\u05a4\u05dc\u0007@\u0002\u0002\u05a5\u05dc\u0007s\u0002\u0002\u05a6",
    "\u05dc\u0007t\u0002\u0002\u05a7\u05dc\u0007u\u0002\u0002\u05a8\u05dc",
    "\u0007v\u0002\u0002\u05a9\u05dc\u0007w\u0002\u0002\u05aa\u05dc\u0007",
    "x\u0002\u0002\u05ab\u05dc\u0007y\u0002\u0002\u05ac\u05dc\u0007z\u0002",
    "\u0002\u05ad\u05dc\u0007\u008e\u0002\u0002\u05ae\u05dc\u0007\u008b\u0002",
    "\u0002\u05af\u05dc\u0007\u008c\u0002\u0002\u05b0\u05dc\u0007\u008d\u0002",
    "\u0002\u05b1\u05dc\u0007\u0083\u0002\u0002\u05b2\u05dc\u0007\u008a\u0002",
    "\u0002\u05b3\u05dc\u0007\u0095\u0002\u0002\u05b4\u05dc\u0007\u0096\u0002",
    "\u0002\u05b5\u05dc\u0007g\u0002\u0002\u05b6\u05dc\u0007h\u0002\u0002",
    "\u05b7\u05dc\u0007\u00b7\u0002\u0002\u05b8\u05dc\u0007\u00b8\u0002\u0002",
    "\u05b9\u05dc\u0007\u00b9\u0002\u0002\u05ba\u05dc\u0005|?\u0002\u05bb",
    "\u05dc\u00072\u0002\u0002\u05bc\u05dc\u0007#\u0002\u0002\u05bd\u05dc",
    "\u0007\u0098\u0002\u0002\u05be\u05dc\u0007\u0099\u0002\u0002\u05bf\u05dc",
    "\u0007\u009a\u0002\u0002\u05c0\u05dc\u0007\u009b\u0002\u0002\u05c1\u05dc",
    "\u0007\u009c\u0002\u0002\u05c2\u05dc\u0007\u009d\u0002\u0002\u05c3\u05dc",
    "\u0007\u009e\u0002\u0002\u05c4\u05dc\u0007\u009f\u0002\u0002\u05c5\u05dc",
    "\u0007\u00a0\u0002\u0002\u05c6\u05dc\u0007\u00a1\u0002\u0002\u05c7\u05dc",
    "\u0007\u00a2\u0002\u0002\u05c8\u05dc\u0007\u00a3\u0002\u0002\u05c9\u05dc",
    "\u0007\u00a4\u0002\u0002\u05ca\u05dc\u0007\u00a5\u0002\u0002\u05cb\u05dc",
    "\u0007\u00a6\u0002\u0002\u05cc\u05dc\u0007\u00a7\u0002\u0002\u05cd\u05dc",
    "\u0007n\u0002\u0002\u05ce\u05dc\u0007o\u0002\u0002\u05cf\u05dc\u0007",
    "p\u0002\u0002\u05d0\u05dc\u0007q\u0002\u0002\u05d1\u05dc\u0007r\u0002",
    "\u0002\u05d2\u05dc\u00071\u0002\u0002\u05d3\u05dc\u0007e\u0002\u0002",
    "\u05d4\u05dc\u0007\u00ad\u0002\u0002\u05d5\u05dc\u0007\u00ae\u0002\u0002",
    "\u05d6\u05dc\u0007\u00ab\u0002\u0002\u05d7\u05dc\u0007\u00ac\u0002\u0002",
    "\u05d8\u05dc\u0007\u00af\u0002\u0002\u05d9\u05dc\u0007\u00b0\u0002\u0002",
    "\u05da\u05dc\u0007\u00b1\u0002\u0002\u05db\u0582\u0003\u0002\u0002\u0002",
    "\u05db\u0583\u0003\u0002\u0002\u0002\u05db\u0584\u0003\u0002\u0002\u0002",
    "\u05db\u0585\u0003\u0002\u0002\u0002\u05db\u0586\u0003\u0002\u0002\u0002",
    "\u05db\u0587\u0003\u0002\u0002\u0002\u05db\u0588\u0003\u0002\u0002\u0002",
    "\u05db\u0589\u0003\u0002\u0002\u0002\u05db\u058a\u0003\u0002\u0002\u0002",
    "\u05db\u058b\u0003\u0002\u0002\u0002\u05db\u058c\u0003\u0002\u0002\u0002",
    "\u05db\u058d\u0003\u0002\u0002\u0002\u05db\u058e\u0003\u0002\u0002\u0002",
    "\u05db\u058f\u0003\u0002\u0002\u0002\u05db\u0590\u0003\u0002\u0002\u0002",
    "\u05db\u0591\u0003\u0002\u0002\u0002\u05db\u0592\u0003\u0002\u0002\u0002",
    "\u05db\u0593\u0003\u0002\u0002\u0002\u05db\u0594\u0003\u0002\u0002\u0002",
    "\u05db\u0595\u0003\u0002\u0002\u0002\u05db\u0596\u0003\u0002\u0002\u0002",
    "\u05db\u0597\u0003\u0002\u0002\u0002\u05db\u0598\u0003\u0002\u0002\u0002",
    "\u05db\u0599\u0003\u0002\u0002\u0002\u05db\u059a\u0003\u0002\u0002\u0002",
    "\u05db\u059b\u0003\u0002\u0002\u0002\u05db\u059c\u0003\u0002\u0002\u0002",
    "\u05db\u059d\u0003\u0002\u0002\u0002\u05db\u059e\u0003\u0002\u0002\u0002",
    "\u05db\u059f\u0003\u0002\u0002\u0002\u05db\u05a0\u0003\u0002\u0002\u0002",
    "\u05db\u05a1\u0003\u0002\u0002\u0002\u05db\u05a2\u0003\u0002\u0002\u0002",
    "\u05db\u05a3\u0003\u0002\u0002\u0002\u05db\u05a4\u0003\u0002\u0002\u0002",
    "\u05db\u05a5\u0003\u0002\u0002\u0002\u05db\u05a6\u0003\u0002\u0002\u0002",
    "\u05db\u05a7\u0003\u0002\u0002\u0002\u05db\u05a8\u0003\u0002\u0002\u0002",
    "\u05db\u05a9\u0003\u0002\u0002\u0002\u05db\u05aa\u0003\u0002\u0002\u0002",
    "\u05db\u05ab\u0003\u0002\u0002\u0002\u05db\u05ac\u0003\u0002\u0002\u0002",
    "\u05db\u05ad\u0003\u0002\u0002\u0002\u05db\u05ae\u0003\u0002\u0002\u0002",
    "\u05db\u05af\u0003\u0002\u0002\u0002\u05db\u05b0\u0003\u0002\u0002\u0002",
    "\u05db\u05b1\u0003\u0002\u0002\u0002\u05db\u05b2\u0003\u0002\u0002\u0002",
    "\u05db\u05b3\u0003\u0002\u0002\u0002\u05db\u05b4\u0003\u0002\u0002\u0002",
    "\u05db\u05b5\u0003\u0002\u0002\u0002\u05db\u05b6\u0003\u0002\u0002\u0002",
    "\u05db\u05b7\u0003\u0002\u0002\u0002\u05db\u05b8\u0003\u0002\u0002\u0002",
    "\u05db\u05b9\u0003\u0002\u0002\u0002\u05db\u05ba\u0003\u0002\u0002\u0002",
    "\u05db\u05bb\u0003\u0002\u0002\u0002\u05db\u05bc\u0003\u0002\u0002\u0002",
    "\u05db\u05bd\u0003\u0002\u0002\u0002\u05db\u05be\u0003\u0002\u0002\u0002",
    "\u05db\u05bf\u0003\u0002\u0002\u0002\u05db\u05c0\u0003\u0002\u0002\u0002",
    "\u05db\u05c1\u0003\u0002\u0002\u0002\u05db\u05c2\u0003\u0002\u0002\u0002",
    "\u05db\u05c3\u0003\u0002\u0002\u0002\u05db\u05c4\u0003\u0002\u0002\u0002",
    "\u05db\u05c5\u0003\u0002\u0002\u0002\u05db\u05c6\u0003\u0002\u0002\u0002",
    "\u05db\u05c7\u0003\u0002\u0002\u0002\u05db\u05c8\u0003\u0002\u0002\u0002",
    "\u05db\u05c9\u0003\u0002\u0002\u0002\u05db\u05ca\u0003\u0002\u0002\u0002",
    "\u05db\u05cb\u0003\u0002\u0002\u0002\u05db\u05cc\u0003\u0002\u0002\u0002",
    "\u05db\u05cd\u0003\u0002\u0002\u0002\u05db\u05ce\u0003\u0002\u0002\u0002",
    "\u05db\u05cf\u0003\u0002\u0002\u0002\u05db\u05d0\u0003\u0002\u0002\u0002",
    "\u05db\u05d1\u0003\u0002\u0002\u0002\u05db\u05d2\u0003\u0002\u0002\u0002",
    "\u05db\u05d3\u0003\u0002\u0002\u0002\u05db\u05d4\u0003\u0002\u0002\u0002",
    "\u05db\u05d5\u0003\u0002\u0002\u0002\u05db\u05d6\u0003\u0002\u0002\u0002",
    "\u05db\u05d7\u0003\u0002\u0002\u0002\u05db\u05d8\u0003\u0002\u0002\u0002",
    "\u05db\u05d9\u0003\u0002\u0002\u0002\u05db\u05da\u0003\u0002\u0002\u0002",
    "\u05dc{\u0003\u0002\u0002\u0002\u05dd\u05de\t\u0015\u0002\u0002\u05de",
    "}\u0003\u0002\u0002\u0002\u00af\u0083\u0087\u009e\u00a3\u00a9\u00ad",
    "\u00bb\u00c0\u00c6\u00c9\u00d0\u00d9\u00df\u00e5\u00ec\u00f5\u0111\u011c",
    "\u0127\u012a\u0134\u0139\u013d\u0145\u014b\u0152\u0157\u015b\u0163\u016b",
    "\u0170\u017f\u0183\u0189\u018d\u0193\u01b1\u01b4\u01b8\u01bc\u01c4\u01cd",
    "\u01d0\u01d4\u01e6\u01e9\u01f1\u01f4\u01fa\u0201\u0206\u020f\u0217\u0228",
    "\u022b\u022f\u0237\u023d\u0240\u0242\u024e\u0255\u0259\u025d\u0261\u0268",
    "\u0271\u0274\u0278\u027d\u0281\u0284\u028b\u0296\u0299\u02a3\u02a6\u02b1",
    "\u02b6\u02be\u02c1\u02c5\u02cd\u02d0\u02d4\u02d8\u02e3\u02e6\u02ed\u0300",
    "\u0304\u0308\u030c\u0310\u0314\u0316\u0321\u0326\u032f\u0335\u0339\u033b",
    "\u0343\u0354\u035a\u0360\u0368\u0370\u0372\u0377\u0383\u038b\u0394\u039a",
    "\u03a2\u03a8\u03ac\u03b1\u03b6\u03bc\u03ca\u03cc\u03e9\u03f5\u03ff\u0402",
    "\u0407\u040e\u0411\u0415\u0418\u0424\u0439\u043d\u0445\u0449\u0462\u0465",
    "\u046e\u0474\u047a\u0480\u0489\u0492\u049d\u04a7\u04a9\u04b2\u04bc\u04c2",
    "\u04dd\u04e9\u04ee\u04f0\u04f6\u04fb\u0501\u0517\u051a\u0523\u0526\u0529",
    "\u053d\u0548\u054e\u0555\u055e\u0565\u056b\u0572\u057a\u0580\u05db"].join("");


var atn = new _atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new dfa.DFA(ds, index); });

var sharedContextCache = new PredictionContextCache();

var literalNames = [ null, "'.'", "'('", "','", "')'", "'?'", "'->'", "'['", 
                     "']'", "'=>'", null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, "'='", null, "'<'", 
                     "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'||'", null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, "';'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, "SELECT", "FROM", "ADD", "AS", "ALL", "SOME", 
                      "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
                      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", 
                      "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", 
                      "LIKE", "IS", "NULL", "TRUE", "FALSE", "NULLS", "FIRST", 
                      "LAST", "ESCAPE", "ASC", "DESC", "SUBSTRING", "POSITION", 
                      "FOR", "TINYINT", "SMALLINT", "INTEGER", "DATE", "TIME", 
                      "TIMESTAMP", "INTERVAL", "YEAR", "MONTH", "DAY", "HOUR", 
                      "MINUTE", "SECOND", "ZONE", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "LOCALTIME", "LOCALTIMESTAMP", 
                      "EXTRACT", "CASE", "WHEN", "THEN", "ELSE", "END", 
                      "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "RIGHT", 
                      "FULL", "NATURAL", "USING", "ON", "FILTER", "OVER", 
                      "PARTITION", "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", 
                      "FOLLOWING", "CURRENT", "ROW", "WITH", "RECURSIVE", 
                      "VALUES", "CREATE", "SCHEMA", "TABLE", "VIEW", "REPLACE", 
                      "INSERT", "DELETE", "INTO", "CONSTRAINT", "DESCRIBE", 
                      "GRANT", "REVOKE", "PRIVILEGES", "PUBLIC", "OPTION", 
                      "EXPLAIN", "ANALYZE", "FORMAT", "TYPE", "TEXT", "GRAPHVIZ", 
                      "LOGICAL", "DISTRIBUTED", "CAST", "TRY_CAST", "SHOW", 
                      "TABLES", "SCHEMAS", "CATALOGS", "COLUMNS", "COLUMN", 
                      "USE", "PARTITIONS", "FUNCTIONS", "DROP", "UNION", 
                      "EXCEPT", "INTERSECT", "TO", "SYSTEM", "BERNOULLI", 
                      "POISSONIZED", "TABLESAMPLE", "ALTER", "RENAME", "UNNEST", 
                      "ORDINALITY", "ARRAY", "MAP", "SET", "RESET", "SESSION", 
                      "DATA", "START", "TRANSACTION", "COMMIT", "ROLLBACK", 
                      "WORK", "ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", 
                      "COMMITTED", "UNCOMMITTED", "READ", "WRITE", "ONLY", 
                      "CALL", "PREPARE", "DEALLOCATE", "EXECUTE", "INPUT", 
                      "OUTPUT", "CASCADE", "RESTRICT", "INCLUDING", "EXCLUDING", 
                      "PROPERTIES", "NORMALIZE", "NFD", "NFC", "NFKD", "NFKC", 
                      "IF", "NULLIF", "COALESCE", "EQ", "NEQ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "CONCAT", "STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", 
                      "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "SEMICOLON", "UNRECOGNIZED", 
                      "DELIMITER" ];

var ruleNames =  [ "multiStatement", "singleStatement", "singleExpression", 
                   "statement", "query", "presto_with", "tableElement", 
                   "columnDefinition", "likeClause", "tableProperties", 
                   "tableProperty", "queryNoWith", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "groupBy", "groupingElement", 
                   "groupingExpressions", "groupingSet", "namedQuery", "setQuantifier", 
                   "selectItem", "relation", "joinType", "joinCriteria", 
                   "sampledRelation", "sampleType", "aliasedRelation", "columnAliases", 
                   "relationPrimary", "expression", "booleanExpression", 
                   "predicated", "predicate", "valueExpression", "primaryExpression", 
                   "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
                   "booleanValue", "interval", "intervalField", "type", 
                   "typeParameter", "baseType", "whenClause", "filter", 
                   "over", "windowFrame", "frameBound", "explainOption", 
                   "transactionMode", "levelOfIsolation", "callArgument", 
                   "privilege", "qualifiedName", "identifier", "quotedIdentifier", 
                   "number", "nonReserved", "normalForm" ];

export const SqlBaseParser = function(input){
	Parser.call(this, input);
    this._interp = new _atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    // return this;
} as any;

SqlBaseParser.prototype = Object.create(Parser.prototype);
SqlBaseParser.prototype.constructor = SqlBaseParser;

Object.defineProperty(SqlBaseParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SqlBaseParser.EOF = Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.SELECT = 10;
SqlBaseParser.FROM = 11;
SqlBaseParser.ADD = 12;
SqlBaseParser.AS = 13;
SqlBaseParser.ALL = 14;
SqlBaseParser.SOME = 15;
SqlBaseParser.ANY = 16;
SqlBaseParser.DISTINCT = 17;
SqlBaseParser.WHERE = 18;
SqlBaseParser.GROUP = 19;
SqlBaseParser.BY = 20;
SqlBaseParser.GROUPING = 21;
SqlBaseParser.SETS = 22;
SqlBaseParser.CUBE = 23;
SqlBaseParser.ROLLUP = 24;
SqlBaseParser.ORDER = 25;
SqlBaseParser.HAVING = 26;
SqlBaseParser.LIMIT = 27;
SqlBaseParser.AT = 28;
SqlBaseParser.OR = 29;
SqlBaseParser.AND = 30;
SqlBaseParser.IN = 31;
SqlBaseParser.NOT = 32;
SqlBaseParser.NO = 33;
SqlBaseParser.EXISTS = 34;
SqlBaseParser.BETWEEN = 35;
SqlBaseParser.LIKE = 36;
SqlBaseParser.IS = 37;
SqlBaseParser.NULL = 38;
SqlBaseParser.TRUE = 39;
SqlBaseParser.FALSE = 40;
SqlBaseParser.NULLS = 41;
SqlBaseParser.FIRST = 42;
SqlBaseParser.LAST = 43;
SqlBaseParser.ESCAPE = 44;
SqlBaseParser.ASC = 45;
SqlBaseParser.DESC = 46;
SqlBaseParser.SUBSTRING = 47;
SqlBaseParser.POSITION = 48;
SqlBaseParser.FOR = 49;
SqlBaseParser.TINYINT = 50;
SqlBaseParser.SMALLINT = 51;
SqlBaseParser.INTEGER = 52;
SqlBaseParser.DATE = 53;
SqlBaseParser.TIME = 54;
SqlBaseParser.TIMESTAMP = 55;
SqlBaseParser.INTERVAL = 56;
SqlBaseParser.YEAR = 57;
SqlBaseParser.MONTH = 58;
SqlBaseParser.DAY = 59;
SqlBaseParser.HOUR = 60;
SqlBaseParser.MINUTE = 61;
SqlBaseParser.SECOND = 62;
SqlBaseParser.ZONE = 63;
SqlBaseParser.CURRENT_DATE = 64;
SqlBaseParser.CURRENT_TIME = 65;
SqlBaseParser.CURRENT_TIMESTAMP = 66;
SqlBaseParser.LOCALTIME = 67;
SqlBaseParser.LOCALTIMESTAMP = 68;
SqlBaseParser.EXTRACT = 69;
SqlBaseParser.CASE = 70;
SqlBaseParser.WHEN = 71;
SqlBaseParser.THEN = 72;
SqlBaseParser.ELSE = 73;
SqlBaseParser.END = 74;
SqlBaseParser.JOIN = 75;
SqlBaseParser.CROSS = 76;
SqlBaseParser.OUTER = 77;
SqlBaseParser.INNER = 78;
SqlBaseParser.LEFT = 79;
SqlBaseParser.RIGHT = 80;
SqlBaseParser.FULL = 81;
SqlBaseParser.NATURAL = 82;
SqlBaseParser.USING = 83;
SqlBaseParser.ON = 84;
SqlBaseParser.FILTER = 85;
SqlBaseParser.OVER = 86;
SqlBaseParser.PARTITION = 87;
SqlBaseParser.RANGE = 88;
SqlBaseParser.ROWS = 89;
SqlBaseParser.UNBOUNDED = 90;
SqlBaseParser.PRECEDING = 91;
SqlBaseParser.FOLLOWING = 92;
SqlBaseParser.CURRENT = 93;
SqlBaseParser.ROW = 94;
SqlBaseParser.WITH = 95;
SqlBaseParser.RECURSIVE = 96;
SqlBaseParser.VALUES = 97;
SqlBaseParser.CREATE = 98;
SqlBaseParser.SCHEMA = 99;
SqlBaseParser.TABLE = 100;
SqlBaseParser.VIEW = 101;
SqlBaseParser.REPLACE = 102;
SqlBaseParser.INSERT = 103;
SqlBaseParser.DELETE = 104;
SqlBaseParser.INTO = 105;
SqlBaseParser.CONSTRAINT = 106;
SqlBaseParser.DESCRIBE = 107;
SqlBaseParser.GRANT = 108;
SqlBaseParser.REVOKE = 109;
SqlBaseParser.PRIVILEGES = 110;
SqlBaseParser.PUBLIC = 111;
SqlBaseParser.OPTION = 112;
SqlBaseParser.EXPLAIN = 113;
SqlBaseParser.ANALYZE = 114;
SqlBaseParser.FORMAT = 115;
SqlBaseParser.TYPE = 116;
SqlBaseParser.TEXT = 117;
SqlBaseParser.GRAPHVIZ = 118;
SqlBaseParser.LOGICAL = 119;
SqlBaseParser.DISTRIBUTED = 120;
SqlBaseParser.CAST = 121;
SqlBaseParser.TRY_CAST = 122;
SqlBaseParser.SHOW = 123;
SqlBaseParser.TABLES = 124;
SqlBaseParser.SCHEMAS = 125;
SqlBaseParser.CATALOGS = 126;
SqlBaseParser.COLUMNS = 127;
SqlBaseParser.COLUMN = 128;
SqlBaseParser.USE = 129;
SqlBaseParser.PARTITIONS = 130;
SqlBaseParser.FUNCTIONS = 131;
SqlBaseParser.DROP = 132;
SqlBaseParser.UNION = 133;
SqlBaseParser.EXCEPT = 134;
SqlBaseParser.INTERSECT = 135;
SqlBaseParser.TO = 136;
SqlBaseParser.SYSTEM = 137;
SqlBaseParser.BERNOULLI = 138;
SqlBaseParser.POISSONIZED = 139;
SqlBaseParser.TABLESAMPLE = 140;
SqlBaseParser.ALTER = 141;
SqlBaseParser.RENAME = 142;
SqlBaseParser.UNNEST = 143;
SqlBaseParser.ORDINALITY = 144;
SqlBaseParser.ARRAY = 145;
SqlBaseParser.MAP = 146;
SqlBaseParser.SET = 147;
SqlBaseParser.RESET = 148;
SqlBaseParser.SESSION = 149;
SqlBaseParser.DATA = 150;
SqlBaseParser.START = 151;
SqlBaseParser.TRANSACTION = 152;
SqlBaseParser.COMMIT = 153;
SqlBaseParser.ROLLBACK = 154;
SqlBaseParser.WORK = 155;
SqlBaseParser.ISOLATION = 156;
SqlBaseParser.LEVEL = 157;
SqlBaseParser.SERIALIZABLE = 158;
SqlBaseParser.REPEATABLE = 159;
SqlBaseParser.COMMITTED = 160;
SqlBaseParser.UNCOMMITTED = 161;
SqlBaseParser.READ = 162;
SqlBaseParser.WRITE = 163;
SqlBaseParser.ONLY = 164;
SqlBaseParser.CALL = 165;
SqlBaseParser.PREPARE = 166;
SqlBaseParser.DEALLOCATE = 167;
SqlBaseParser.EXECUTE = 168;
SqlBaseParser.INPUT = 169;
SqlBaseParser.OUTPUT = 170;
SqlBaseParser.CASCADE = 171;
SqlBaseParser.RESTRICT = 172;
SqlBaseParser.INCLUDING = 173;
SqlBaseParser.EXCLUDING = 174;
SqlBaseParser.PROPERTIES = 175;
SqlBaseParser.NORMALIZE = 176;
SqlBaseParser.NFD = 177;
SqlBaseParser.NFC = 178;
SqlBaseParser.NFKD = 179;
SqlBaseParser.NFKC = 180;
SqlBaseParser.IF = 181;
SqlBaseParser.NULLIF = 182;
SqlBaseParser.COALESCE = 183;
SqlBaseParser.EQ = 184;
SqlBaseParser.NEQ = 185;
SqlBaseParser.LT = 186;
SqlBaseParser.LTE = 187;
SqlBaseParser.GT = 188;
SqlBaseParser.GTE = 189;
SqlBaseParser.PLUS = 190;
SqlBaseParser.MINUS = 191;
SqlBaseParser.ASTERISK = 192;
SqlBaseParser.SLASH = 193;
SqlBaseParser.PERCENT = 194;
SqlBaseParser.CONCAT = 195;
SqlBaseParser.STRING = 196;
SqlBaseParser.BINARY_LITERAL = 197;
SqlBaseParser.INTEGER_VALUE = 198;
SqlBaseParser.DECIMAL_VALUE = 199;
SqlBaseParser.IDENTIFIER = 200;
SqlBaseParser.DIGIT_IDENTIFIER = 201;
SqlBaseParser.QUOTED_IDENTIFIER = 202;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 203;
SqlBaseParser.TIME_WITH_TIME_ZONE = 204;
SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE = 205;
SqlBaseParser.DOUBLE_PRECISION = 206;
SqlBaseParser.SIMPLE_COMMENT = 207;
SqlBaseParser.BRACKETED_COMMENT = 208;
SqlBaseParser.WS = 209;
SqlBaseParser.SEMICOLON = 210;
SqlBaseParser.UNRECOGNIZED = 211;
SqlBaseParser.DELIMITER = 212;

SqlBaseParser.RULE_multiStatement = 0;
SqlBaseParser.RULE_singleStatement = 1;
SqlBaseParser.RULE_singleExpression = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_query = 4;
SqlBaseParser.RULE_presto_with = 5;
SqlBaseParser.RULE_tableElement = 6;
SqlBaseParser.RULE_columnDefinition = 7;
SqlBaseParser.RULE_likeClause = 8;
SqlBaseParser.RULE_tableProperties = 9;
SqlBaseParser.RULE_tableProperty = 10;
SqlBaseParser.RULE_queryNoWith = 11;
SqlBaseParser.RULE_queryTerm = 12;
SqlBaseParser.RULE_queryPrimary = 13;
SqlBaseParser.RULE_sortItem = 14;
SqlBaseParser.RULE_querySpecification = 15;
SqlBaseParser.RULE_groupBy = 16;
SqlBaseParser.RULE_groupingElement = 17;
SqlBaseParser.RULE_groupingExpressions = 18;
SqlBaseParser.RULE_groupingSet = 19;
SqlBaseParser.RULE_namedQuery = 20;
SqlBaseParser.RULE_setQuantifier = 21;
SqlBaseParser.RULE_selectItem = 22;
SqlBaseParser.RULE_relation = 23;
SqlBaseParser.RULE_joinType = 24;
SqlBaseParser.RULE_joinCriteria = 25;
SqlBaseParser.RULE_sampledRelation = 26;
SqlBaseParser.RULE_sampleType = 27;
SqlBaseParser.RULE_aliasedRelation = 28;
SqlBaseParser.RULE_columnAliases = 29;
SqlBaseParser.RULE_relationPrimary = 30;
SqlBaseParser.RULE_expression = 31;
SqlBaseParser.RULE_booleanExpression = 32;
SqlBaseParser.RULE_predicated = 33;
SqlBaseParser.RULE_predicate = 34;
SqlBaseParser.RULE_valueExpression = 35;
SqlBaseParser.RULE_primaryExpression = 36;
SqlBaseParser.RULE_timeZoneSpecifier = 37;
SqlBaseParser.RULE_comparisonOperator = 38;
SqlBaseParser.RULE_comparisonQuantifier = 39;
SqlBaseParser.RULE_booleanValue = 40;
SqlBaseParser.RULE_interval = 41;
SqlBaseParser.RULE_intervalField = 42;
SqlBaseParser.RULE_type = 43;
SqlBaseParser.RULE_typeParameter = 44;
SqlBaseParser.RULE_baseType = 45;
SqlBaseParser.RULE_whenClause = 46;
SqlBaseParser.RULE_filter = 47;
SqlBaseParser.RULE_over = 48;
SqlBaseParser.RULE_windowFrame = 49;
SqlBaseParser.RULE_frameBound = 50;
SqlBaseParser.RULE_explainOption = 51;
SqlBaseParser.RULE_transactionMode = 52;
SqlBaseParser.RULE_levelOfIsolation = 53;
SqlBaseParser.RULE_callArgument = 54;
SqlBaseParser.RULE_privilege = 55;
SqlBaseParser.RULE_qualifiedName = 56;
SqlBaseParser.RULE_identifier = 57;
SqlBaseParser.RULE_quotedIdentifier = 58;
SqlBaseParser.RULE_number = 59;
SqlBaseParser.RULE_nonReserved = 60;
SqlBaseParser.RULE_normalForm = 61;

function MultiStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_multiStatement;
    // return this;
}

MultiStatementContext.prototype = Object.create(ParserRuleContext.prototype);
MultiStatementContext.prototype.constructor = MultiStatementContext;

MultiStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

MultiStatementContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

MultiStatementContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.SEMICOLON);
    } else {
        return this.getToken(SqlBaseParser.SEMICOLON, i);
    }
};


MultiStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterMultiStatement(this);
	}
};

MultiStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitMultiStatement(this);
	}
};

MultiStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitMultiStatement(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.MultiStatementContext = MultiStatementContext;

SqlBaseParser.prototype.multiStatement = function() {

    var localctx = new MultiStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlBaseParser.RULE_multiStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 124;
        this.statement();
        this.state = 129;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 125;
                this.match(SqlBaseParser.SEMICOLON);
                this.state = 126;
                this.statement(); 
            }
            this.state = 131;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.SEMICOLON) {
            this.state = 132;
            this.match(SqlBaseParser.SEMICOLON);
        }

        this.state = 135;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    // return this;
}

SingleStatementContext.prototype = Object.create(ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSingleStatement(this);
	}
};

SingleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSingleStatement(this);
	}
};

SingleStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSingleStatement(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.SingleStatementContext = SingleStatementContext;

SqlBaseParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 137;
        this.statement();
        this.state = 138;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    // return this;
}

SingleExpressionContext.prototype = Object.create(ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingleExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSingleExpression(this);
	}
};

SingleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSingleExpression(this);
	}
};

SingleExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSingleExpression(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.SingleExpressionContext = SingleExpressionContext;

SqlBaseParser.prototype.singleExpression = function() {

    var localctx = new (SingleExpressionContext as any)(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 140;
        this.expression();
        this.state = 141;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statement;
    // return this;
}

StatementContext.prototype = Object.create(ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlBaseParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

ExplainContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ExplainContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

ExplainContext.prototype.explainOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExplainOptionContext);
    } else {
        return this.getTypedRuleContext(ExplainOptionContext,i);
    }
};
ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExplain(this);
	}
};

ExplainContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExplain(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function PrepareContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

PrepareContext.prototype = Object.create(StatementContext.prototype);
PrepareContext.prototype.constructor = PrepareContext;

SqlBaseParser.PrepareContext = PrepareContext;

PrepareContext.prototype.PREPARE = function() {
    return this.getToken(SqlBaseParser.PREPARE, 0);
};

PrepareContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrepareContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

PrepareContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
PrepareContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterPrepare(this);
	}
};

PrepareContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitPrepare(this);
	}
};

PrepareContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitPrepare(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

SqlBaseParser.CreateTableContext = CreateTableContext;

CreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateTableContext.prototype.tableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementContext);
    } else {
        return this.getTypedRuleContext(TableElementContext,i);
    }
};

CreateTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateTableContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCreateTable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function StartTransactionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

StartTransactionContext.prototype = Object.create(StatementContext.prototype);
StartTransactionContext.prototype.constructor = StartTransactionContext;

SqlBaseParser.StartTransactionContext = StartTransactionContext;

StartTransactionContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

StartTransactionContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

StartTransactionContext.prototype.transactionMode = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransactionModeContext);
    } else {
        return this.getTypedRuleContext(TransactionModeContext,i);
    }
};
StartTransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterStartTransaction(this);
	}
};

StartTransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitStartTransaction(this);
	}
};

StartTransactionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitStartTransaction(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CreateTableAsSelectContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CreateTableAsSelectContext.prototype = Object.create(StatementContext.prototype);
CreateTableAsSelectContext.prototype.constructor = CreateTableAsSelectContext;

SqlBaseParser.CreateTableAsSelectContext = CreateTableAsSelectContext;

CreateTableAsSelectContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableAsSelectContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableAsSelectContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateTableAsSelectContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateTableAsSelectContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateTableAsSelectContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableAsSelectContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableAsSelectContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableAsSelectContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.WITH);
    } else {
        return this.getToken(SqlBaseParser.WITH, i);
    }
};


CreateTableAsSelectContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};

CreateTableAsSelectContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

CreateTableAsSelectContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};
CreateTableAsSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCreateTableAsSelect(this);
	}
};

CreateTableAsSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCreateTableAsSelect(this);
	}
};

CreateTableAsSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCreateTableAsSelect(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function UseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.schema = null; // IdentifierContext;
    this.catalog = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

UseContext.prototype = Object.create(StatementContext.prototype);
UseContext.prototype.constructor = UseContext;

SqlBaseParser.UseContext = UseContext;

UseContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

UseContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
UseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterUse(this);
	}
};

UseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitUse(this);
	}
};

UseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitUse(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DeallocateContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DeallocateContext.prototype = Object.create(StatementContext.prototype);
DeallocateContext.prototype.constructor = DeallocateContext;

SqlBaseParser.DeallocateContext = DeallocateContext;

DeallocateContext.prototype.DEALLOCATE = function() {
    return this.getToken(SqlBaseParser.DEALLOCATE, 0);
};

DeallocateContext.prototype.PREPARE = function() {
    return this.getToken(SqlBaseParser.PREPARE, 0);
};

DeallocateContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DeallocateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDeallocate(this);
	}
};

DeallocateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDeallocate(this);
	}
};

DeallocateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDeallocate(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RenameTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // QualifiedNameContext;
    this.to = null; // QualifiedNameContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RenameTableContext.prototype = Object.create(StatementContext.prototype);
RenameTableContext.prototype.constructor = RenameTableContext;

SqlBaseParser.RenameTableContext = RenameTableContext;

RenameTableContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTableContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTableContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTableContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};
RenameTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRenameTable(this);
	}
};

RenameTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRenameTable(this);
	}
};

RenameTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRenameTable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CommitContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CommitContext.prototype = Object.create(StatementContext.prototype);
CommitContext.prototype.constructor = CommitContext;

SqlBaseParser.CommitContext = CommitContext;

CommitContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

CommitContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};
CommitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCommit(this);
	}
};

CommitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCommit(this);
	}
};

CommitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCommit(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RevokeContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.grantee = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RevokeContext.prototype = Object.create(StatementContext.prototype);
RevokeContext.prototype.constructor = RevokeContext;

SqlBaseParser.RevokeContext = RevokeContext;

RevokeContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

RevokeContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

RevokeContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RevokeContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

RevokeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

RevokeContext.prototype.privilege = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrivilegeContext);
    } else {
        return this.getTypedRuleContext(PrivilegeContext,i);
    }
};

RevokeContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

RevokeContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

RevokeContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

RevokeContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

RevokeContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

RevokeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};
RevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRevoke(this);
	}
};

RevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRevoke(this);
	}
};

RevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRevoke(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowPartitionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.limit = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowPartitionsContext.prototype = Object.create(StatementContext.prototype);
ShowPartitionsContext.prototype.constructor = ShowPartitionsContext;

SqlBaseParser.ShowPartitionsContext = ShowPartitionsContext;

ShowPartitionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowPartitionsContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

ShowPartitionsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowPartitionsContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowPartitionsContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowPartitionsContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

ShowPartitionsContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ShowPartitionsContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

ShowPartitionsContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

ShowPartitionsContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

ShowPartitionsContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

ShowPartitionsContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

ShowPartitionsContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};
ShowPartitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowPartitions(this);
	}
};

ShowPartitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowPartitions(this);
	}
};

ShowPartitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowPartitions(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DropViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DropViewContext.prototype = Object.create(StatementContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

SqlBaseParser.DropViewContext = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

DropViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropViewContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropViewContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDropView(this);
	}
};

DropViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDropView(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DeleteContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DeleteContext.prototype = Object.create(StatementContext.prototype);
DeleteContext.prototype.constructor = DeleteContext;

SqlBaseParser.DeleteContext = DeleteContext;

DeleteContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

DeleteContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DeleteContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DeleteContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

DeleteContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
DeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDelete(this);
	}
};

DeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDelete(this);
	}
};

DeleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDelete(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowTablesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowTablesContext.prototype = Object.create(StatementContext.prototype);
ShowTablesContext.prototype.constructor = ShowTablesContext;

SqlBaseParser.ShowTablesContext = ShowTablesContext;

ShowTablesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTablesContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

ShowTablesContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowTablesContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowTablesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowTablesContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowTablesContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
ShowTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowTables(this);
	}
};

ShowTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowTables(this);
	}
};

ShowTablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowTables(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DescribeInputContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DescribeInputContext.prototype = Object.create(StatementContext.prototype);
DescribeInputContext.prototype.constructor = DescribeInputContext;

SqlBaseParser.DescribeInputContext = DescribeInputContext;

DescribeInputContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeInputContext.prototype.INPUT = function() {
    return this.getToken(SqlBaseParser.INPUT, 0);
};

DescribeInputContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DescribeInputContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDescribeInput(this);
	}
};

DescribeInputContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDescribeInput(this);
	}
};

DescribeInputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDescribeInput(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowCatalogsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowCatalogsContext.prototype = Object.create(StatementContext.prototype);
ShowCatalogsContext.prototype.constructor = ShowCatalogsContext;

SqlBaseParser.ShowCatalogsContext = ShowCatalogsContext;

ShowCatalogsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCatalogsContext.prototype.CATALOGS = function() {
    return this.getToken(SqlBaseParser.CATALOGS, 0);
};

ShowCatalogsContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowCatalogsContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
ShowCatalogsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowCatalogs(this);
	}
};

ShowCatalogsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowCatalogs(this);
	}
};

ShowCatalogsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowCatalogs(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function StatementDefaultContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

StatementDefaultContext.prototype = Object.create(StatementContext.prototype);
StatementDefaultContext.prototype.constructor = StatementDefaultContext;

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

StatementDefaultContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
StatementDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterStatementDefault(this);
	}
};

StatementDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitStatementDefault(this);
	}
};

StatementDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitStatementDefault(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RenameColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.tableName = null; // QualifiedNameContext;
    this.from = null; // IdentifierContext;
    this.to = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RenameColumnContext.prototype = Object.create(StatementContext.prototype);
RenameColumnContext.prototype.constructor = RenameColumnContext;

SqlBaseParser.RenameColumnContext = RenameColumnContext;

RenameColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameColumnContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

RenameColumnContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameColumnContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RenameColumnContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
RenameColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRenameColumn(this);
	}
};

RenameColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRenameColumn(this);
	}
};

RenameColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRenameColumn(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SetSessionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SetSessionContext.prototype = Object.create(StatementContext.prototype);
SetSessionContext.prototype.constructor = SetSessionContext;

SqlBaseParser.SetSessionContext = SetSessionContext;

SetSessionContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetSessionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

SetSessionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

SetSessionContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

SetSessionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SetSessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSetSession(this);
	}
};

SetSessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSetSession(this);
	}
};

SetSessionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSetSession(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CreateViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CreateViewContext.prototype = Object.create(StatementContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

SqlBaseParser.CreateViewContext = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

CreateViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateViewContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateViewContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateViewContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};
CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCreateView(this);
	}
};

CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCreateView(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowCreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowCreateTableContext.prototype = Object.create(StatementContext.prototype);
ShowCreateTableContext.prototype.constructor = ShowCreateTableContext;

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

ShowCreateTableContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ShowCreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ShowCreateTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ShowCreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowCreateTable(this);
	}
};

ShowCreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowCreateTable(this);
	}
};

ShowCreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowCreateTable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowSchemasContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowSchemasContext.prototype = Object.create(StatementContext.prototype);
ShowSchemasContext.prototype.constructor = ShowSchemasContext;

SqlBaseParser.ShowSchemasContext = ShowSchemasContext;

ShowSchemasContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowSchemasContext.prototype.SCHEMAS = function() {
    return this.getToken(SqlBaseParser.SCHEMAS, 0);
};

ShowSchemasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowSchemasContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowSchemasContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowSchemasContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowSchemasContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
ShowSchemasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowSchemas(this);
	}
};

ShowSchemasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowSchemas(this);
	}
};

ShowSchemasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowSchemas(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DropTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

SqlBaseParser.DropTableContext = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDropTable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

ShowColumnsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowColumnsContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowColumnsContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowColumnsContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

ShowColumnsContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};
ShowColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowColumns(this);
	}
};

ShowColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowColumns(this);
	}
};

ShowColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowColumns(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RollbackContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RollbackContext.prototype = Object.create(StatementContext.prototype);
RollbackContext.prototype.constructor = RollbackContext;

SqlBaseParser.RollbackContext = RollbackContext;

RollbackContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

RollbackContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};
RollbackContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRollback(this);
	}
};

RollbackContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRollback(this);
	}
};

RollbackContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRollback(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function AddColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.tableName = null; // QualifiedNameContext;
    this.column = null; // ColumnDefinitionContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

AddColumnContext.prototype = Object.create(StatementContext.prototype);
AddColumnContext.prototype.constructor = AddColumnContext;

SqlBaseParser.AddColumnContext = AddColumnContext;

AddColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AddColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AddColumnContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AddColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

AddColumnContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AddColumnContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};
AddColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterAddColumn(this);
	}
};

AddColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitAddColumn(this);
	}
};

AddColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitAddColumn(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ResetSessionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ResetSessionContext.prototype = Object.create(StatementContext.prototype);
ResetSessionContext.prototype.constructor = ResetSessionContext;

SqlBaseParser.ResetSessionContext = ResetSessionContext;

ResetSessionContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

ResetSessionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

ResetSessionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ResetSessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterResetSession(this);
	}
};

ResetSessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitResetSession(this);
	}
};

ResetSessionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitResetSession(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function InsertIntoContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

InsertIntoContext.prototype = Object.create(StatementContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;

SqlBaseParser.InsertIntoContext = InsertIntoContext;

InsertIntoContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertIntoContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

InsertIntoContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

InsertIntoContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InsertIntoContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};
InsertIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterInsertInto(this);
	}
};

InsertIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitInsertInto(this);
	}
};

InsertIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitInsertInto(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowSessionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowSessionContext.prototype = Object.create(StatementContext.prototype);
ShowSessionContext.prototype.constructor = ShowSessionContext;

SqlBaseParser.ShowSessionContext = ShowSessionContext;

ShowSessionContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowSessionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};
ShowSessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowSession(this);
	}
};

ShowSessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowSession(this);
	}
};

ShowSessionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowSession(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CreateSchemaContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CreateSchemaContext.prototype = Object.create(StatementContext.prototype);
CreateSchemaContext.prototype.constructor = CreateSchemaContext;

SqlBaseParser.CreateSchemaContext = CreateSchemaContext;

CreateSchemaContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateSchemaContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

CreateSchemaContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateSchemaContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateSchemaContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateSchemaContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateSchemaContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateSchemaContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCreateSchema(this);
	}
};

CreateSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCreateSchema(this);
	}
};

CreateSchemaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCreateSchema(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ExecuteContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ExecuteContext.prototype = Object.create(StatementContext.prototype);
ExecuteContext.prototype.constructor = ExecuteContext;

SqlBaseParser.ExecuteContext = ExecuteContext;

ExecuteContext.prototype.EXECUTE = function() {
    return this.getToken(SqlBaseParser.EXECUTE, 0);
};

ExecuteContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExecuteContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

ExecuteContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ExecuteContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExecute(this);
	}
};

ExecuteContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExecute(this);
	}
};

ExecuteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExecute(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CallContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CallContext.prototype = Object.create(StatementContext.prototype);
CallContext.prototype.constructor = CallContext;

SqlBaseParser.CallContext = CallContext;

CallContext.prototype.CALL = function() {
    return this.getToken(SqlBaseParser.CALL, 0);
};

CallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CallContext.prototype.callArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CallArgumentContext);
    } else {
        return this.getTypedRuleContext(CallArgumentContext,i);
    }
};
CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCall(this);
	}
};

CallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCall(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RenameSchemaContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RenameSchemaContext.prototype = Object.create(StatementContext.prototype);
RenameSchemaContext.prototype.constructor = RenameSchemaContext;

SqlBaseParser.RenameSchemaContext = RenameSchemaContext;

RenameSchemaContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameSchemaContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

RenameSchemaContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RenameSchemaContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameSchemaContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameSchemaContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
RenameSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRenameSchema(this);
	}
};

RenameSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRenameSchema(this);
	}
};

RenameSchemaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRenameSchema(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowFunctionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowFunctionsContext.prototype = Object.create(StatementContext.prototype);
ShowFunctionsContext.prototype.constructor = ShowFunctionsContext;

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

ShowFunctionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowFunctionsContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};
ShowFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowFunctions(this);
	}
};

ShowFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowFunctions(this);
	}
};

ShowFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowFunctions(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DescribeOutputContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DescribeOutputContext.prototype = Object.create(StatementContext.prototype);
DescribeOutputContext.prototype.constructor = DescribeOutputContext;

SqlBaseParser.DescribeOutputContext = DescribeOutputContext;

DescribeOutputContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeOutputContext.prototype.OUTPUT = function() {
    return this.getToken(SqlBaseParser.OUTPUT, 0);
};

DescribeOutputContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DescribeOutputContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDescribeOutput(this);
	}
};

DescribeOutputContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDescribeOutput(this);
	}
};

DescribeOutputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDescribeOutput(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DropSchemaContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DropSchemaContext.prototype = Object.create(StatementContext.prototype);
DropSchemaContext.prototype.constructor = DropSchemaContext;

SqlBaseParser.DropSchemaContext = DropSchemaContext;

DropSchemaContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropSchemaContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

DropSchemaContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropSchemaContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropSchemaContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropSchemaContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

DropSchemaContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};
DropSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDropSchema(this);
	}
};

DropSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDropSchema(this);
	}
};

DropSchemaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDropSchema(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function GrantContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.grantee = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

GrantContext.prototype = Object.create(StatementContext.prototype);
GrantContext.prototype.constructor = GrantContext;

SqlBaseParser.GrantContext = GrantContext;

GrantContext.prototype.GRANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.GRANT);
    } else {
        return this.getToken(SqlBaseParser.GRANT, i);
    }
};


GrantContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

GrantContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

GrantContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

GrantContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GrantContext.prototype.privilege = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrivilegeContext);
    } else {
        return this.getTypedRuleContext(PrivilegeContext,i);
    }
};

GrantContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

GrantContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

GrantContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

GrantContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

GrantContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};
GrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterGrant(this);
	}
};

GrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitGrant(this);
	}
};

GrantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitGrant(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ShowCreateViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ShowCreateViewContext.prototype = Object.create(StatementContext.prototype);
ShowCreateViewContext.prototype.constructor = ShowCreateViewContext;

SqlBaseParser.ShowCreateViewContext = ShowCreateViewContext;

ShowCreateViewContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCreateViewContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ShowCreateViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

ShowCreateViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ShowCreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterShowCreateView(this);
	}
};

ShowCreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitShowCreateView(this);
	}
};

ShowCreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitShowCreateView(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.StatementContext = StatementContext;

SqlBaseParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 495;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StatementDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 143;
            this.query();
            break;

        case 2:
            localctx = new UseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 144;
            this.match(SqlBaseParser.USE);
            this.state = 145;
            localctx.schema = this.identifier();
            break;

        case 3:
            localctx = new UseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 146;
            this.match(SqlBaseParser.USE);
            this.state = 147;
            localctx.catalog = this.identifier();
            this.state = 148;
            this.match(SqlBaseParser.T__0);
            this.state = 149;
            localctx.schema = this.identifier();
            break;

        case 4:
            localctx = new CreateSchemaContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 151;
            this.match(SqlBaseParser.CREATE);
            this.state = 152;
            this.match(SqlBaseParser.SCHEMA);
            this.state = 156;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 153;
                this.match(SqlBaseParser.IF);
                this.state = 154;
                this.match(SqlBaseParser.NOT);
                this.state = 155;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 158;
            this.qualifiedName();
            this.state = 161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 159;
                this.match(SqlBaseParser.WITH);
                this.state = 160;
                this.tableProperties();
            }

            break;

        case 5:
            localctx = new DropSchemaContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 163;
            this.match(SqlBaseParser.DROP);
            this.state = 164;
            this.match(SqlBaseParser.SCHEMA);
            this.state = 167;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
            if(la_===1) {
                this.state = 165;
                this.match(SqlBaseParser.IF);
                this.state = 166;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 169;
            this.qualifiedName();
            this.state = 171;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT) {
                this.state = 170;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        case 6:
            localctx = new RenameSchemaContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 173;
            this.match(SqlBaseParser.ALTER);
            this.state = 174;
            this.match(SqlBaseParser.SCHEMA);
            this.state = 175;
            this.qualifiedName();
            this.state = 176;
            this.match(SqlBaseParser.RENAME);
            this.state = 177;
            this.match(SqlBaseParser.TO);
            this.state = 178;
            this.identifier();
            break;

        case 7:
            localctx = new CreateTableAsSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 180;
            this.match(SqlBaseParser.CREATE);
            this.state = 181;
            this.match(SqlBaseParser.TABLE);
            this.state = 185;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 182;
                this.match(SqlBaseParser.IF);
                this.state = 183;
                this.match(SqlBaseParser.NOT);
                this.state = 184;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 187;
            this.qualifiedName();
            this.state = 190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 188;
                this.match(SqlBaseParser.WITH);
                this.state = 189;
                this.tableProperties();
            }

            this.state = 192;
            this.match(SqlBaseParser.AS);
            this.state = 193;
            this.query();
            this.state = 199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 194;
                this.match(SqlBaseParser.WITH);
                this.state = 196;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.NO) {
                    this.state = 195;
                    this.match(SqlBaseParser.NO);
                }

                this.state = 198;
                this.match(SqlBaseParser.DATA);
            }

            break;

        case 8:
            localctx = new CreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 201;
            this.match(SqlBaseParser.CREATE);
            this.state = 202;
            this.match(SqlBaseParser.TABLE);
            this.state = 206;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 203;
                this.match(SqlBaseParser.IF);
                this.state = 204;
                this.match(SqlBaseParser.NOT);
                this.state = 205;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 208;
            this.qualifiedName();
            this.state = 209;
            this.match(SqlBaseParser.T__1);
            this.state = 210;
            this.tableElement();
            this.state = 215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 211;
                this.match(SqlBaseParser.T__2);
                this.state = 212;
                this.tableElement();
                this.state = 217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 218;
            this.match(SqlBaseParser.T__3);
            this.state = 221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 219;
                this.match(SqlBaseParser.WITH);
                this.state = 220;
                this.tableProperties();
            }

            break;

        case 9:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 223;
            this.match(SqlBaseParser.DROP);
            this.state = 224;
            this.match(SqlBaseParser.TABLE);
            this.state = 227;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            if(la_===1) {
                this.state = 225;
                this.match(SqlBaseParser.IF);
                this.state = 226;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 229;
            this.qualifiedName();
            break;

        case 10:
            localctx = new InsertIntoContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 230;
            this.match(SqlBaseParser.INSERT);
            this.state = 231;
            this.match(SqlBaseParser.INTO);
            this.state = 232;
            this.qualifiedName();
            this.state = 234;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 233;
                this.columnAliases();

            }
            this.state = 236;
            this.query();
            break;

        case 11:
            localctx = new DeleteContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 238;
            this.match(SqlBaseParser.DELETE);
            this.state = 239;
            this.match(SqlBaseParser.FROM);
            this.state = 240;
            this.qualifiedName();
            this.state = 243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WHERE) {
                this.state = 241;
                this.match(SqlBaseParser.WHERE);
                this.state = 242;
                this.booleanExpression(0);
            }

            break;

        case 12:
            localctx = new RenameTableContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 245;
            this.match(SqlBaseParser.ALTER);
            this.state = 246;
            this.match(SqlBaseParser.TABLE);
            this.state = 247;
            localctx.from = this.qualifiedName();
            this.state = 248;
            this.match(SqlBaseParser.RENAME);
            this.state = 249;
            this.match(SqlBaseParser.TO);
            this.state = 250;
            localctx.to = this.qualifiedName();
            break;

        case 13:
            localctx = new RenameColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 252;
            this.match(SqlBaseParser.ALTER);
            this.state = 253;
            this.match(SqlBaseParser.TABLE);
            this.state = 254;
            localctx.tableName = this.qualifiedName();
            this.state = 255;
            this.match(SqlBaseParser.RENAME);
            this.state = 256;
            this.match(SqlBaseParser.COLUMN);
            this.state = 257;
            localctx.from = this.identifier();
            this.state = 258;
            this.match(SqlBaseParser.TO);
            this.state = 259;
            localctx.to = this.identifier();
            break;

        case 14:
            localctx = new AddColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 261;
            this.match(SqlBaseParser.ALTER);
            this.state = 262;
            this.match(SqlBaseParser.TABLE);
            this.state = 263;
            localctx.tableName = this.qualifiedName();
            this.state = 264;
            this.match(SqlBaseParser.ADD);
            this.state = 265;
            this.match(SqlBaseParser.COLUMN);
            this.state = 266;
            localctx.column = this.columnDefinition();
            break;

        case 15:
            localctx = new CreateViewContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 268;
            this.match(SqlBaseParser.CREATE);
            this.state = 271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 269;
                this.match(SqlBaseParser.OR);
                this.state = 270;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 273;
            this.match(SqlBaseParser.VIEW);
            this.state = 274;
            this.qualifiedName();
            this.state = 275;
            this.match(SqlBaseParser.AS);
            this.state = 276;
            this.query();
            break;

        case 16:
            localctx = new DropViewContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 278;
            this.match(SqlBaseParser.DROP);
            this.state = 279;
            this.match(SqlBaseParser.VIEW);
            this.state = 282;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 280;
                this.match(SqlBaseParser.IF);
                this.state = 281;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 284;
            this.qualifiedName();
            break;

        case 17:
            localctx = new CallContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 285;
            this.match(SqlBaseParser.CALL);
            this.state = 286;
            this.qualifiedName();
            this.state = 287;
            this.match(SqlBaseParser.T__1);
            this.state = 296;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.SUBSTRING - 32)) | (1 << (SqlBaseParser.POSITION - 32)) | (1 << (SqlBaseParser.TINYINT - 32)) | (1 << (SqlBaseParser.SMALLINT - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (SqlBaseParser.SCHEMA - 99)) | (1 << (SqlBaseParser.VIEW - 99)) | (1 << (SqlBaseParser.REPLACE - 99)) | (1 << (SqlBaseParser.GRANT - 99)) | (1 << (SqlBaseParser.REVOKE - 99)) | (1 << (SqlBaseParser.PRIVILEGES - 99)) | (1 << (SqlBaseParser.PUBLIC - 99)) | (1 << (SqlBaseParser.OPTION - 99)) | (1 << (SqlBaseParser.EXPLAIN - 99)) | (1 << (SqlBaseParser.ANALYZE - 99)) | (1 << (SqlBaseParser.FORMAT - 99)) | (1 << (SqlBaseParser.TYPE - 99)) | (1 << (SqlBaseParser.TEXT - 99)) | (1 << (SqlBaseParser.GRAPHVIZ - 99)) | (1 << (SqlBaseParser.LOGICAL - 99)) | (1 << (SqlBaseParser.DISTRIBUTED - 99)) | (1 << (SqlBaseParser.CAST - 99)) | (1 << (SqlBaseParser.TRY_CAST - 99)) | (1 << (SqlBaseParser.SHOW - 99)) | (1 << (SqlBaseParser.TABLES - 99)) | (1 << (SqlBaseParser.SCHEMAS - 99)) | (1 << (SqlBaseParser.CATALOGS - 99)) | (1 << (SqlBaseParser.COLUMNS - 99)) | (1 << (SqlBaseParser.COLUMN - 99)) | (1 << (SqlBaseParser.USE - 99)) | (1 << (SqlBaseParser.PARTITIONS - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (SqlBaseParser.FUNCTIONS - 131)) | (1 << (SqlBaseParser.TO - 131)) | (1 << (SqlBaseParser.SYSTEM - 131)) | (1 << (SqlBaseParser.BERNOULLI - 131)) | (1 << (SqlBaseParser.POISSONIZED - 131)) | (1 << (SqlBaseParser.TABLESAMPLE - 131)) | (1 << (SqlBaseParser.ARRAY - 131)) | (1 << (SqlBaseParser.MAP - 131)) | (1 << (SqlBaseParser.SET - 131)) | (1 << (SqlBaseParser.RESET - 131)) | (1 << (SqlBaseParser.SESSION - 131)) | (1 << (SqlBaseParser.DATA - 131)) | (1 << (SqlBaseParser.START - 131)) | (1 << (SqlBaseParser.TRANSACTION - 131)) | (1 << (SqlBaseParser.COMMIT - 131)) | (1 << (SqlBaseParser.ROLLBACK - 131)) | (1 << (SqlBaseParser.WORK - 131)) | (1 << (SqlBaseParser.ISOLATION - 131)) | (1 << (SqlBaseParser.LEVEL - 131)) | (1 << (SqlBaseParser.SERIALIZABLE - 131)) | (1 << (SqlBaseParser.REPEATABLE - 131)) | (1 << (SqlBaseParser.COMMITTED - 131)) | (1 << (SqlBaseParser.UNCOMMITTED - 131)) | (1 << (SqlBaseParser.READ - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (SqlBaseParser.WRITE - 163)) | (1 << (SqlBaseParser.ONLY - 163)) | (1 << (SqlBaseParser.CALL - 163)) | (1 << (SqlBaseParser.INPUT - 163)) | (1 << (SqlBaseParser.OUTPUT - 163)) | (1 << (SqlBaseParser.CASCADE - 163)) | (1 << (SqlBaseParser.RESTRICT - 163)) | (1 << (SqlBaseParser.INCLUDING - 163)) | (1 << (SqlBaseParser.EXCLUDING - 163)) | (1 << (SqlBaseParser.PROPERTIES - 163)) | (1 << (SqlBaseParser.NORMALIZE - 163)) | (1 << (SqlBaseParser.NFD - 163)) | (1 << (SqlBaseParser.NFC - 163)) | (1 << (SqlBaseParser.NFKD - 163)) | (1 << (SqlBaseParser.NFKC - 163)) | (1 << (SqlBaseParser.IF - 163)) | (1 << (SqlBaseParser.NULLIF - 163)) | (1 << (SqlBaseParser.COALESCE - 163)) | (1 << (SqlBaseParser.PLUS - 163)) | (1 << (SqlBaseParser.MINUS - 163)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) !== 0)) {
                this.state = 288;
                this.callArgument();
                this.state = 293;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 289;
                    this.match(SqlBaseParser.T__2);
                    this.state = 290;
                    this.callArgument();
                    this.state = 295;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 298;
            this.match(SqlBaseParser.T__3);
            break;

        case 18:
            localctx = new GrantContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 300;
            this.match(SqlBaseParser.GRANT);
            this.state = 311;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.SELECT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.NO:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.TINYINT:
            case SqlBaseParser.SMALLINT:
            case SqlBaseParser.INTEGER:
            case SqlBaseParser.DATE:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.DAY:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.OVER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.ROW:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.INSERT:
            case SqlBaseParser.DELETE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PUBLIC:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.USE:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.TO:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.POISSONIZED:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.MAP:
            case SqlBaseParser.SET:
            case SqlBaseParser.RESET:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.DATA:
            case SqlBaseParser.START:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.WORK:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.READ:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.CALL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.IF:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.COALESCE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.state = 301;
                this.privilege();
                this.state = 306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 302;
                    this.match(SqlBaseParser.T__2);
                    this.state = 303;
                    this.privilege();
                    this.state = 308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            case SqlBaseParser.ALL:
                this.state = 309;
                this.match(SqlBaseParser.ALL);
                this.state = 310;
                this.match(SqlBaseParser.PRIVILEGES);
                break;
            default:
                throw new _error.NoViableAltException(this);
            }
            this.state = 313;
            this.match(SqlBaseParser.ON);
            this.state = 315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TABLE) {
                this.state = 314;
                this.match(SqlBaseParser.TABLE);
            }

            this.state = 317;
            this.qualifiedName();
            this.state = 318;
            this.match(SqlBaseParser.TO);
            this.state = 319;
            localctx.grantee = this.identifier();
            this.state = 323;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 320;
                this.match(SqlBaseParser.WITH);
                this.state = 321;
                this.match(SqlBaseParser.GRANT);
                this.state = 322;
                this.match(SqlBaseParser.OPTION);
            }

            break;

        case 19:
            localctx = new RevokeContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 325;
            this.match(SqlBaseParser.REVOKE);
            this.state = 329;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 326;
                this.match(SqlBaseParser.GRANT);
                this.state = 327;
                this.match(SqlBaseParser.OPTION);
                this.state = 328;
                this.match(SqlBaseParser.FOR);

            }
            this.state = 341;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.SELECT:
            case SqlBaseParser.ADD:
            case SqlBaseParser.NO:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.TINYINT:
            case SqlBaseParser.SMALLINT:
            case SqlBaseParser.INTEGER:
            case SqlBaseParser.DATE:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.DAY:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.FILTER:
            case SqlBaseParser.OVER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.ROW:
            case SqlBaseParser.SCHEMA:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.INSERT:
            case SqlBaseParser.DELETE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PUBLIC:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.USE:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.TO:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.POISSONIZED:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.MAP:
            case SqlBaseParser.SET:
            case SqlBaseParser.RESET:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.DATA:
            case SqlBaseParser.START:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.WORK:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.READ:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.CALL:
            case SqlBaseParser.INPUT:
            case SqlBaseParser.OUTPUT:
            case SqlBaseParser.CASCADE:
            case SqlBaseParser.RESTRICT:
            case SqlBaseParser.INCLUDING:
            case SqlBaseParser.EXCLUDING:
            case SqlBaseParser.PROPERTIES:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.IF:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.COALESCE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.state = 331;
                this.privilege();
                this.state = 336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 332;
                    this.match(SqlBaseParser.T__2);
                    this.state = 333;
                    this.privilege();
                    this.state = 338;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            case SqlBaseParser.ALL:
                this.state = 339;
                this.match(SqlBaseParser.ALL);
                this.state = 340;
                this.match(SqlBaseParser.PRIVILEGES);
                break;
            default:
                throw new _error.NoViableAltException(this);
            }
            this.state = 343;
            this.match(SqlBaseParser.ON);
            this.state = 345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TABLE) {
                this.state = 344;
                this.match(SqlBaseParser.TABLE);
            }

            this.state = 347;
            this.qualifiedName();
            this.state = 348;
            this.match(SqlBaseParser.FROM);
            this.state = 349;
            localctx.grantee = this.identifier();
            break;

        case 20:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 351;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ANALYZE) {
                this.state = 352;
                this.match(SqlBaseParser.ANALYZE);
            }

            this.state = 366;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
            if(la_===1) {
                this.state = 355;
                this.match(SqlBaseParser.T__1);
                this.state = 356;
                this.explainOption();
                this.state = 361;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 357;
                    this.match(SqlBaseParser.T__2);
                    this.state = 358;
                    this.explainOption();
                    this.state = 363;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 364;
                this.match(SqlBaseParser.T__3);

            }
            this.state = 368;
            this.statement();
            break;

        case 21:
            localctx = new ShowCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 369;
            this.match(SqlBaseParser.SHOW);
            this.state = 370;
            this.match(SqlBaseParser.CREATE);
            this.state = 371;
            this.match(SqlBaseParser.TABLE);
            this.state = 372;
            this.qualifiedName();
            break;

        case 22:
            localctx = new ShowCreateViewContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 373;
            this.match(SqlBaseParser.SHOW);
            this.state = 374;
            this.match(SqlBaseParser.CREATE);
            this.state = 375;
            this.match(SqlBaseParser.VIEW);
            this.state = 376;
            this.qualifiedName();
            break;

        case 23:
            localctx = new ShowTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 377;
            this.match(SqlBaseParser.SHOW);
            this.state = 378;
            this.match(SqlBaseParser.TABLES);
            this.state = 381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 379;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 380;
                this.qualifiedName();
            }

            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE) {
                this.state = 383;
                this.match(SqlBaseParser.LIKE);
                this.state = 384;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 24:
            localctx = new ShowSchemasContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 387;
            this.match(SqlBaseParser.SHOW);
            this.state = 388;
            this.match(SqlBaseParser.SCHEMAS);
            this.state = 391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 389;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 390;
                this.identifier();
            }

            this.state = 395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE) {
                this.state = 393;
                this.match(SqlBaseParser.LIKE);
                this.state = 394;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 25:
            localctx = new ShowCatalogsContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 397;
            this.match(SqlBaseParser.SHOW);
            this.state = 398;
            this.match(SqlBaseParser.CATALOGS);
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE) {
                this.state = 399;
                this.match(SqlBaseParser.LIKE);
                this.state = 400;
                localctx.pattern = this.match(SqlBaseParser.STRING);
            }

            break;

        case 26:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 403;
            this.match(SqlBaseParser.SHOW);
            this.state = 404;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 405;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 406;
            this.qualifiedName();
            break;

        case 27:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 407;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 408;
            this.qualifiedName();
            break;

        case 28:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 409;
            this.match(SqlBaseParser.DESC);
            this.state = 410;
            this.qualifiedName();
            break;

        case 29:
            localctx = new ShowFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 411;
            this.match(SqlBaseParser.SHOW);
            this.state = 412;
            this.match(SqlBaseParser.FUNCTIONS);
            break;

        case 30:
            localctx = new ShowSessionContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 413;
            this.match(SqlBaseParser.SHOW);
            this.state = 414;
            this.match(SqlBaseParser.SESSION);
            break;

        case 31:
            localctx = new SetSessionContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 415;
            this.match(SqlBaseParser.SET);
            this.state = 416;
            this.match(SqlBaseParser.SESSION);
            this.state = 417;
            this.qualifiedName();
            this.state = 418;
            this.match(SqlBaseParser.EQ);
            this.state = 419;
            this.expression();
            break;

        case 32:
            localctx = new ResetSessionContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 421;
            this.match(SqlBaseParser.RESET);
            this.state = 422;
            this.match(SqlBaseParser.SESSION);
            this.state = 423;
            this.qualifiedName();
            break;

        case 33:
            localctx = new StartTransactionContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 424;
            this.match(SqlBaseParser.START);
            this.state = 425;
            this.match(SqlBaseParser.TRANSACTION);
            this.state = 434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ISOLATION || _la===SqlBaseParser.READ) {
                this.state = 426;
                this.transactionMode();
                this.state = 431;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 427;
                    this.match(SqlBaseParser.T__2);
                    this.state = 428;
                    this.transactionMode();
                    this.state = 433;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;

        case 34:
            localctx = new CommitContext(this, localctx);
            this.enterOuterAlt(localctx, 34);
            this.state = 436;
            this.match(SqlBaseParser.COMMIT);
            this.state = 438;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WORK) {
                this.state = 437;
                this.match(SqlBaseParser.WORK);
            }

            break;

        case 35:
            localctx = new RollbackContext(this, localctx);
            this.enterOuterAlt(localctx, 35);
            this.state = 440;
            this.match(SqlBaseParser.ROLLBACK);
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WORK) {
                this.state = 441;
                this.match(SqlBaseParser.WORK);
            }

            break;

        case 36:
            localctx = new ShowPartitionsContext(this, localctx);
            this.enterOuterAlt(localctx, 36);
            this.state = 444;
            this.match(SqlBaseParser.SHOW);
            this.state = 445;
            this.match(SqlBaseParser.PARTITIONS);
            this.state = 446;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 447;
            this.qualifiedName();
            this.state = 450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WHERE) {
                this.state = 448;
                this.match(SqlBaseParser.WHERE);
                this.state = 449;
                this.booleanExpression(0);
            }

            this.state = 462;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ORDER) {
                this.state = 452;
                this.match(SqlBaseParser.ORDER);
                this.state = 453;
                this.match(SqlBaseParser.BY);
                this.state = 454;
                this.sortItem();
                this.state = 459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 455;
                    this.match(SqlBaseParser.T__2);
                    this.state = 456;
                    this.sortItem();
                    this.state = 461;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIMIT) {
                this.state = 464;
                this.match(SqlBaseParser.LIMIT);
                this.state = 465;
                localctx.limit = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.INTEGER_VALUE)) {
                    localctx.limit = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        case 37:
            localctx = new PrepareContext(this, localctx);
            this.enterOuterAlt(localctx, 37);
            this.state = 468;
            this.match(SqlBaseParser.PREPARE);
            this.state = 469;
            this.identifier();
            this.state = 470;
            this.match(SqlBaseParser.FROM);
            this.state = 471;
            this.statement();
            break;

        case 38:
            localctx = new DeallocateContext(this, localctx);
            this.enterOuterAlt(localctx, 38);
            this.state = 473;
            this.match(SqlBaseParser.DEALLOCATE);
            this.state = 474;
            this.match(SqlBaseParser.PREPARE);
            this.state = 475;
            this.identifier();
            break;

        case 39:
            localctx = new ExecuteContext(this, localctx);
            this.enterOuterAlt(localctx, 39);
            this.state = 476;
            this.match(SqlBaseParser.EXECUTE);
            this.state = 477;
            this.identifier();
            this.state = 487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.USING) {
                this.state = 478;
                this.match(SqlBaseParser.USING);
                this.state = 479;
                this.expression();
                this.state = 484;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 480;
                    this.match(SqlBaseParser.T__2);
                    this.state = 481;
                    this.expression();
                    this.state = 486;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;

        case 40:
            localctx = new DescribeInputContext(this, localctx);
            this.enterOuterAlt(localctx, 40);
            this.state = 489;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 490;
            this.match(SqlBaseParser.INPUT);
            this.state = 491;
            this.identifier();
            break;

        case 41:
            localctx = new DescribeOutputContext(this, localctx);
            this.enterOuterAlt(localctx, 41);
            this.state = 492;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 493;
            this.match(SqlBaseParser.OUTPUT);
            this.state = 494;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_query;
    // return this;
}

QueryContext.prototype = Object.create(ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};

QueryContext.prototype.presto_with = function() {
    return this.getTypedRuleContext(Presto_withContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQuery(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.QueryContext = QueryContext;

SqlBaseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlBaseParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WITH) {
            this.state = 497;
            this.presto_with();
        }

        this.state = 500;
        this.queryNoWith();
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Presto_withContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_presto_with;
    // return this;
}

Presto_withContext.prototype = Object.create(ParserRuleContext.prototype);
Presto_withContext.prototype.constructor = Presto_withContext;

Presto_withContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

Presto_withContext.prototype.namedQuery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedQueryContext);
    } else {
        return this.getTypedRuleContext(NamedQueryContext,i);
    }
};

Presto_withContext.prototype.RECURSIVE = function() {
    return this.getToken(SqlBaseParser.RECURSIVE, 0);
};

Presto_withContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterPresto_with(this);
	}
};

Presto_withContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitPresto_with(this);
	}
};

Presto_withContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitPresto_with(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.Presto_withContext = Presto_withContext;

SqlBaseParser.prototype.presto_with = function() {

    var localctx = new Presto_withContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlBaseParser.RULE_presto_with);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 502;
        this.match(SqlBaseParser.WITH);
        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.RECURSIVE) {
            this.state = 503;
            this.match(SqlBaseParser.RECURSIVE);
        }

        this.state = 506;
        this.namedQuery();
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 507;
            this.match(SqlBaseParser.T__2);
            this.state = 508;
            this.namedQuery();
            this.state = 513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableElement;
    // return this;
}

TableElementContext.prototype = Object.create(ParserRuleContext.prototype);
TableElementContext.prototype.constructor = TableElementContext;

TableElementContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};

TableElementContext.prototype.likeClause = function() {
    return this.getTypedRuleContext(LikeClauseContext,0);
};

TableElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTableElement(this);
	}
};

TableElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTableElement(this);
	}
};

TableElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTableElement(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.TableElementContext = TableElementContext;

SqlBaseParser.prototype.tableElement = function() {

    var localctx = new TableElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlBaseParser.RULE_tableElement);
    try {
        this.state = 516;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 514;
            this.columnDefinition();
            break;
        case SqlBaseParser.LIKE:
            this.enterOuterAlt(localctx, 2);
            this.state = 515;
            this.likeClause();
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_columnDefinition;
    // return this;
}

ColumnDefinitionContext.prototype = Object.create(ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnDefinitionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitColumnDefinition(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.ColumnDefinitionContext = ColumnDefinitionContext;

SqlBaseParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlBaseParser.RULE_columnDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this.identifier();
        this.state = 519;
        this.type(0);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LikeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_likeClause;
    this.optionType = null; // Token
    // return this;
}

LikeClauseContext.prototype = Object.create(ParserRuleContext.prototype);
LikeClauseContext.prototype.constructor = LikeClauseContext;

LikeClauseContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

LikeClauseContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

LikeClauseContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlBaseParser.PROPERTIES, 0);
};

LikeClauseContext.prototype.INCLUDING = function() {
    return this.getToken(SqlBaseParser.INCLUDING, 0);
};

LikeClauseContext.prototype.EXCLUDING = function() {
    return this.getToken(SqlBaseParser.EXCLUDING, 0);
};

LikeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterLikeClause(this);
	}
};

LikeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitLikeClause(this);
	}
};

LikeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitLikeClause(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.LikeClauseContext = LikeClauseContext;

SqlBaseParser.prototype.likeClause = function() {

    var localctx = new LikeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlBaseParser.RULE_likeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.match(SqlBaseParser.LIKE);
        this.state = 522;
        this.qualifiedName();
        this.state = 525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.INCLUDING || _la===SqlBaseParser.EXCLUDING) {
            this.state = 523;
            localctx.optionType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.INCLUDING || _la===SqlBaseParser.EXCLUDING)) {
                localctx.optionType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 524;
            this.match(SqlBaseParser.PROPERTIES);
        }

    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperties;
    // return this;
}

TablePropertiesContext.prototype = Object.create(ParserRuleContext.prototype);
TablePropertiesContext.prototype.constructor = TablePropertiesContext;

TablePropertiesContext.prototype.tableProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    } else {
        return this.getTypedRuleContext(TablePropertyContext,i);
    }
};

TablePropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTableProperties(this);
	}
};

TablePropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTableProperties(this);
	}
};

TablePropertiesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTableProperties(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.TablePropertiesContext = TablePropertiesContext;

SqlBaseParser.prototype.tableProperties = function() {

    var localctx = new TablePropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlBaseParser.RULE_tableProperties);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 527;
        this.match(SqlBaseParser.T__1);
        this.state = 528;
        this.tableProperty();
        this.state = 533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 529;
            this.match(SqlBaseParser.T__2);
            this.state = 530;
            this.tableProperty();
            this.state = 535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 536;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperty;
    // return this;
}

TablePropertyContext.prototype = Object.create(ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablePropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

TablePropertyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TablePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTableProperty(this);
	}
};

TablePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTableProperty(this);
	}
};

TablePropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTableProperty(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.TablePropertyContext = TablePropertyContext;

SqlBaseParser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SqlBaseParser.RULE_tableProperty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 538;
        this.identifier();
        this.state = 539;
        this.match(SqlBaseParser.EQ);
        this.state = 540;
        this.expression();
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryNoWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
    this.limit = null; // Token
    // return this;
}

QueryNoWithContext.prototype = Object.create(ParserRuleContext.prototype);
QueryNoWithContext.prototype.constructor = QueryNoWithContext;

QueryNoWithContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};

QueryNoWithContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

QueryNoWithContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

QueryNoWithContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

QueryNoWithContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

QueryNoWithContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

QueryNoWithContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

QueryNoWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQueryNoWith(this);
	}
};

QueryNoWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQueryNoWith(this);
	}
};

QueryNoWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQueryNoWith(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.QueryNoWithContext = QueryNoWithContext;

SqlBaseParser.prototype.queryNoWith = function() {

    var localctx = new QueryNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlBaseParser.RULE_queryNoWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this.queryTerm(0);
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ORDER) {
            this.state = 543;
            this.match(SqlBaseParser.ORDER);
            this.state = 544;
            this.match(SqlBaseParser.BY);
            this.state = 545;
            this.sortItem();
            this.state = 550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 546;
                this.match(SqlBaseParser.T__2);
                this.state = 547;
                this.sortItem();
                this.state = 552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LIMIT) {
            this.state = 555;
            this.match(SqlBaseParser.LIMIT);
            this.state = 556;
            localctx.limit = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.INTEGER_VALUE)) {
                localctx.limit = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    //return this;
}

QueryTermContext.prototype = Object.create(ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;


 
QueryTermContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function QueryTermDefaultContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    //return this;
}

QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

QueryTermDefaultContext.prototype.queryPrimary = function() {
    return this.getTypedRuleContext(QueryPrimaryContext,0);
};
QueryTermDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQueryTermDefault(this);
	}
};

QueryTermDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQueryTermDefault(this);
	}
};

QueryTermDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQueryTermDefault(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SetOperationContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    this.left = null; // QueryTermContext;
    this.operator = null; // Token;
    this.right = null; // QueryTermContext;
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    //return this;
}

SetOperationContext.prototype = Object.create(QueryTermContext.prototype);
SetOperationContext.prototype.constructor = SetOperationContext;

SqlBaseParser.SetOperationContext = SetOperationContext;

SetOperationContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

SetOperationContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

SetOperationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

SetOperationContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

SetOperationContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};
SetOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSetOperation(this);
	}
};

SetOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSetOperation(this);
	}
};

SetOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSetOperation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.prototype.queryTerm = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryTermContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 24;
    this.enterRecursionRule(localctx, 24, SqlBaseParser.RULE_queryTerm, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new QueryTermDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 560;
        this.queryPrimary();
        this._ctx.stop = this._input.LT(-1);
        this.state = 576;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 574;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 562;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 563;
                    localctx.operator = this.match(SqlBaseParser.INTERSECT);
                    this.state = 565;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 564;
                        this.setQuantifier();
                    }

                    this.state = 567;
                    localctx.right = this.queryTerm(3);
                    break;

                case 2:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 568;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 569;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.UNION || _la===SqlBaseParser.EXCEPT)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 571;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 570;
                        this.setQuantifier();
                    }

                    this.state = 573;
                    localctx.right = this.queryTerm(2);
                    break;

                } 
            }
            this.state = 578;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch( error) {
        if(error instanceof _error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    // return this;
}

QueryPrimaryContext.prototype = Object.create(ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;


 
QueryPrimaryContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SubqueryContext.prototype = Object.create(QueryPrimaryContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SqlBaseParser.SubqueryContext = SubqueryContext;

SubqueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};
SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSubquery(this);
	}
};

SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSubquery(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function QueryPrimaryDefaultContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

QueryPrimaryDefaultContext.prototype = Object.create(QueryPrimaryContext.prototype);
QueryPrimaryDefaultContext.prototype.constructor = QueryPrimaryDefaultContext;

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

QueryPrimaryDefaultContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};
QueryPrimaryDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQueryPrimaryDefault(this);
	}
};

QueryPrimaryDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQueryPrimaryDefault(this);
	}
};

QueryPrimaryDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQueryPrimaryDefault(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function TableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

TableContext.prototype = Object.create(QueryPrimaryContext.prototype);
TableContext.prototype.constructor = TableContext;

SqlBaseParser.TableContext = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTable(this);
	}
};

TableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function InlineTableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

InlineTableContext.prototype = Object.create(QueryPrimaryContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;

SqlBaseParser.InlineTableContext = InlineTableContext;

InlineTableContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

InlineTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InlineTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterInlineTable(this);
	}
};

InlineTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitInlineTable(this);
	}
};

InlineTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitInlineTable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext;

SqlBaseParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlBaseParser.RULE_queryPrimary);
    try {
        this.state = 595;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            localctx = new QueryPrimaryDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 579;
            this.querySpecification();
            break;
        case SqlBaseParser.TABLE:
            localctx = new TableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 580;
            this.match(SqlBaseParser.TABLE);
            this.state = 581;
            this.qualifiedName();
            break;
        case SqlBaseParser.VALUES:
            localctx = new InlineTableContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 582;
            this.match(SqlBaseParser.VALUES);
            this.state = 583;
            this.expression();
            this.state = 588;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 584;
                    this.match(SqlBaseParser.T__2);
                    this.state = 585;
                    this.expression(); 
                }
                this.state = 590;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            break;
        case SqlBaseParser.T__1:
            localctx = new SubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 591;
            this.match(SqlBaseParser.T__1);
            this.state = 592;
            this.queryNoWith();
            this.state = 593;
            this.match(SqlBaseParser.T__3);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrdering = null; // Token
    // return this;
}

SortItemContext.prototype = Object.create(ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

SortItemContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

SortItemContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSortItem(this);
	}
};

SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSortItem(this);
	}
};

SortItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSortItem(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.SortItemContext = SortItemContext;

SqlBaseParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlBaseParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        this.expression();
        this.state = 599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
            this.state = 598;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.NULLS) {
            this.state = 601;
            this.match(SqlBaseParser.NULLS);
            this.state = 602;
            localctx.nullOrdering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.LAST)) {
                localctx.nullOrdering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_querySpecification;
    this.where = null; // BooleanExpressionContext
    this.having = null; // BooleanExpressionContext
    // return this;
}

QuerySpecificationContext.prototype = Object.create(ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

QuerySpecificationContext.prototype.selectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemContext);
    } else {
        return this.getTypedRuleContext(SelectItemContext,i);
    }
};

QuerySpecificationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

QuerySpecificationContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

QuerySpecificationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

QuerySpecificationContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

QuerySpecificationContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

QuerySpecificationContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

QuerySpecificationContext.prototype.groupBy = function() {
    return this.getTypedRuleContext(GroupByContext,0);
};

QuerySpecificationContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

QuerySpecificationContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

QuerySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQuerySpecification(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext;

SqlBaseParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlBaseParser.RULE_querySpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 605;
        this.match(SqlBaseParser.SELECT);
        this.state = 607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
            this.state = 606;
            this.setQuantifier();
        }

        this.state = 609;
        this.selectItem();
        this.state = 614;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 610;
                this.match(SqlBaseParser.T__2);
                this.state = 611;
                this.selectItem(); 
            }
            this.state = 616;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 626;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 617;
            this.match(SqlBaseParser.FROM);
            this.state = 618;
            this.relation(0);
            this.state = 623;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
            while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 619;
                    this.match(SqlBaseParser.T__2);
                    this.state = 620;
                    this.relation(0); 
                }
                this.state = 625;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
            }


        }
        this.state = 630;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 628;
            this.match(SqlBaseParser.WHERE);
            this.state = 629;
            localctx.where = this.booleanExpression(0);

        }
        this.state = 635;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 632;
            this.match(SqlBaseParser.GROUP);
            this.state = 633;
            this.match(SqlBaseParser.BY);
            this.state = 634;
            this.groupBy();

        }
        this.state = 639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 637;
            this.match(SqlBaseParser.HAVING);
            this.state = 638;
            localctx.having = this.booleanExpression(0);

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupBy;
    // return this;
}

GroupByContext.prototype = Object.create(ParserRuleContext.prototype);
GroupByContext.prototype.constructor = GroupByContext;

GroupByContext.prototype.groupingElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingElementContext);
    } else {
        return this.getTypedRuleContext(GroupingElementContext,i);
    }
};

GroupByContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

GroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterGroupBy(this);
	}
};

GroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitGroupBy(this);
	}
};

GroupByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitGroupBy(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.GroupByContext = GroupByContext;

SqlBaseParser.prototype.groupBy = function() {

    var localctx = new GroupByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlBaseParser.RULE_groupBy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
            this.state = 641;
            this.setQuantifier();
        }

        this.state = 644;
        this.groupingElement();
        this.state = 649;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 645;
                this.match(SqlBaseParser.T__2);
                this.state = 646;
                this.groupingElement(); 
            }
            this.state = 651;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingElement;
    // return this;
}

GroupingElementContext.prototype = Object.create(ParserRuleContext.prototype);
GroupingElementContext.prototype.constructor = GroupingElementContext;


 
GroupingElementContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MultipleGroupingSetsContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

MultipleGroupingSetsContext.prototype = Object.create(GroupingElementContext.prototype);
MultipleGroupingSetsContext.prototype.constructor = MultipleGroupingSetsContext;

SqlBaseParser.MultipleGroupingSetsContext = MultipleGroupingSetsContext;

MultipleGroupingSetsContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

MultipleGroupingSetsContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

MultipleGroupingSetsContext.prototype.groupingSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingSetContext);
    } else {
        return this.getTypedRuleContext(GroupingSetContext,i);
    }
};
MultipleGroupingSetsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterMultipleGroupingSets(this);
	}
};

MultipleGroupingSetsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitMultipleGroupingSets(this);
	}
};

MultipleGroupingSetsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitMultipleGroupingSets(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SingleGroupingSetContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SingleGroupingSetContext.prototype = Object.create(GroupingElementContext.prototype);
SingleGroupingSetContext.prototype.constructor = SingleGroupingSetContext;

SqlBaseParser.SingleGroupingSetContext = SingleGroupingSetContext;

SingleGroupingSetContext.prototype.groupingExpressions = function() {
    return this.getTypedRuleContext(GroupingExpressionsContext,0);
};
SingleGroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSingleGroupingSet(this);
	}
};

SingleGroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSingleGroupingSet(this);
	}
};

SingleGroupingSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSingleGroupingSet(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CubeContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CubeContext.prototype = Object.create(GroupingElementContext.prototype);
CubeContext.prototype.constructor = CubeContext;

SqlBaseParser.CubeContext = CubeContext;

CubeContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

CubeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};
CubeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCube(this);
	}
};

CubeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCube(this);
	}
};

CubeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCube(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RollupContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RollupContext.prototype = Object.create(GroupingElementContext.prototype);
RollupContext.prototype.constructor = RollupContext;

SqlBaseParser.RollupContext = RollupContext;

RollupContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

RollupContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};
RollupContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRollup(this);
	}
};

RollupContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRollup(this);
	}
};

RollupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRollup(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.GroupingElementContext = GroupingElementContext;

SqlBaseParser.prototype.groupingElement = function() {

    var localctx = new GroupingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlBaseParser.RULE_groupingElement);
    var _la = 0; // Token type
    try {
        this.state = 692;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.T__4:
        case SqlBaseParser.ADD:
        case SqlBaseParser.NOT:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.CURRENT_DATE:
        case SqlBaseParser.CURRENT_TIME:
        case SqlBaseParser.CURRENT_TIMESTAMP:
        case SqlBaseParser.LOCALTIME:
        case SqlBaseParser.LOCALTIMESTAMP:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.CASE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.CAST:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.DOUBLE_PRECISION:
            localctx = new SingleGroupingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 652;
            this.groupingExpressions();
            break;
        case SqlBaseParser.ROLLUP:
            localctx = new RollupContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 653;
            this.match(SqlBaseParser.ROLLUP);
            this.state = 654;
            this.match(SqlBaseParser.T__1);
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ADD || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SqlBaseParser.NO - 33)) | (1 << (SqlBaseParser.SUBSTRING - 33)) | (1 << (SqlBaseParser.POSITION - 33)) | (1 << (SqlBaseParser.TINYINT - 33)) | (1 << (SqlBaseParser.SMALLINT - 33)) | (1 << (SqlBaseParser.INTEGER - 33)) | (1 << (SqlBaseParser.DATE - 33)) | (1 << (SqlBaseParser.TIME - 33)) | (1 << (SqlBaseParser.TIMESTAMP - 33)) | (1 << (SqlBaseParser.INTERVAL - 33)) | (1 << (SqlBaseParser.YEAR - 33)) | (1 << (SqlBaseParser.MONTH - 33)) | (1 << (SqlBaseParser.DAY - 33)) | (1 << (SqlBaseParser.HOUR - 33)) | (1 << (SqlBaseParser.MINUTE - 33)) | (1 << (SqlBaseParser.SECOND - 33)) | (1 << (SqlBaseParser.ZONE - 33)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (SqlBaseParser.FILTER - 85)) | (1 << (SqlBaseParser.OVER - 85)) | (1 << (SqlBaseParser.PARTITION - 85)) | (1 << (SqlBaseParser.RANGE - 85)) | (1 << (SqlBaseParser.ROWS - 85)) | (1 << (SqlBaseParser.PRECEDING - 85)) | (1 << (SqlBaseParser.FOLLOWING - 85)) | (1 << (SqlBaseParser.CURRENT - 85)) | (1 << (SqlBaseParser.ROW - 85)) | (1 << (SqlBaseParser.SCHEMA - 85)) | (1 << (SqlBaseParser.VIEW - 85)) | (1 << (SqlBaseParser.REPLACE - 85)) | (1 << (SqlBaseParser.GRANT - 85)) | (1 << (SqlBaseParser.REVOKE - 85)) | (1 << (SqlBaseParser.PRIVILEGES - 85)) | (1 << (SqlBaseParser.PUBLIC - 85)) | (1 << (SqlBaseParser.OPTION - 85)) | (1 << (SqlBaseParser.EXPLAIN - 85)) | (1 << (SqlBaseParser.ANALYZE - 85)) | (1 << (SqlBaseParser.FORMAT - 85)) | (1 << (SqlBaseParser.TYPE - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (SqlBaseParser.TEXT - 117)) | (1 << (SqlBaseParser.GRAPHVIZ - 117)) | (1 << (SqlBaseParser.LOGICAL - 117)) | (1 << (SqlBaseParser.DISTRIBUTED - 117)) | (1 << (SqlBaseParser.SHOW - 117)) | (1 << (SqlBaseParser.TABLES - 117)) | (1 << (SqlBaseParser.SCHEMAS - 117)) | (1 << (SqlBaseParser.CATALOGS - 117)) | (1 << (SqlBaseParser.COLUMNS - 117)) | (1 << (SqlBaseParser.COLUMN - 117)) | (1 << (SqlBaseParser.USE - 117)) | (1 << (SqlBaseParser.PARTITIONS - 117)) | (1 << (SqlBaseParser.FUNCTIONS - 117)) | (1 << (SqlBaseParser.TO - 117)) | (1 << (SqlBaseParser.SYSTEM - 117)) | (1 << (SqlBaseParser.BERNOULLI - 117)) | (1 << (SqlBaseParser.POISSONIZED - 117)) | (1 << (SqlBaseParser.TABLESAMPLE - 117)) | (1 << (SqlBaseParser.ARRAY - 117)) | (1 << (SqlBaseParser.MAP - 117)) | (1 << (SqlBaseParser.SET - 117)) | (1 << (SqlBaseParser.RESET - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (SqlBaseParser.SESSION - 149)) | (1 << (SqlBaseParser.DATA - 149)) | (1 << (SqlBaseParser.START - 149)) | (1 << (SqlBaseParser.TRANSACTION - 149)) | (1 << (SqlBaseParser.COMMIT - 149)) | (1 << (SqlBaseParser.ROLLBACK - 149)) | (1 << (SqlBaseParser.WORK - 149)) | (1 << (SqlBaseParser.ISOLATION - 149)) | (1 << (SqlBaseParser.LEVEL - 149)) | (1 << (SqlBaseParser.SERIALIZABLE - 149)) | (1 << (SqlBaseParser.REPEATABLE - 149)) | (1 << (SqlBaseParser.COMMITTED - 149)) | (1 << (SqlBaseParser.UNCOMMITTED - 149)) | (1 << (SqlBaseParser.READ - 149)) | (1 << (SqlBaseParser.WRITE - 149)) | (1 << (SqlBaseParser.ONLY - 149)) | (1 << (SqlBaseParser.CALL - 149)) | (1 << (SqlBaseParser.INPUT - 149)) | (1 << (SqlBaseParser.OUTPUT - 149)) | (1 << (SqlBaseParser.CASCADE - 149)) | (1 << (SqlBaseParser.RESTRICT - 149)) | (1 << (SqlBaseParser.INCLUDING - 149)) | (1 << (SqlBaseParser.EXCLUDING - 149)) | (1 << (SqlBaseParser.PROPERTIES - 149)) | (1 << (SqlBaseParser.NFD - 149)) | (1 << (SqlBaseParser.NFC - 149)) | (1 << (SqlBaseParser.NFKD - 149)) | (1 << (SqlBaseParser.NFKC - 149)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (SqlBaseParser.IF - 181)) | (1 << (SqlBaseParser.NULLIF - 181)) | (1 << (SqlBaseParser.COALESCE - 181)) | (1 << (SqlBaseParser.IDENTIFIER - 181)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 181)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 181)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 181)))) !== 0)) {
                this.state = 655;
                this.qualifiedName();
                this.state = 660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 656;
                    this.match(SqlBaseParser.T__2);
                    this.state = 657;
                    this.qualifiedName();
                    this.state = 662;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 665;
            this.match(SqlBaseParser.T__3);
            break;
        case SqlBaseParser.CUBE:
            localctx = new CubeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 666;
            this.match(SqlBaseParser.CUBE);
            this.state = 667;
            this.match(SqlBaseParser.T__1);
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ADD || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SqlBaseParser.NO - 33)) | (1 << (SqlBaseParser.SUBSTRING - 33)) | (1 << (SqlBaseParser.POSITION - 33)) | (1 << (SqlBaseParser.TINYINT - 33)) | (1 << (SqlBaseParser.SMALLINT - 33)) | (1 << (SqlBaseParser.INTEGER - 33)) | (1 << (SqlBaseParser.DATE - 33)) | (1 << (SqlBaseParser.TIME - 33)) | (1 << (SqlBaseParser.TIMESTAMP - 33)) | (1 << (SqlBaseParser.INTERVAL - 33)) | (1 << (SqlBaseParser.YEAR - 33)) | (1 << (SqlBaseParser.MONTH - 33)) | (1 << (SqlBaseParser.DAY - 33)) | (1 << (SqlBaseParser.HOUR - 33)) | (1 << (SqlBaseParser.MINUTE - 33)) | (1 << (SqlBaseParser.SECOND - 33)) | (1 << (SqlBaseParser.ZONE - 33)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (SqlBaseParser.FILTER - 85)) | (1 << (SqlBaseParser.OVER - 85)) | (1 << (SqlBaseParser.PARTITION - 85)) | (1 << (SqlBaseParser.RANGE - 85)) | (1 << (SqlBaseParser.ROWS - 85)) | (1 << (SqlBaseParser.PRECEDING - 85)) | (1 << (SqlBaseParser.FOLLOWING - 85)) | (1 << (SqlBaseParser.CURRENT - 85)) | (1 << (SqlBaseParser.ROW - 85)) | (1 << (SqlBaseParser.SCHEMA - 85)) | (1 << (SqlBaseParser.VIEW - 85)) | (1 << (SqlBaseParser.REPLACE - 85)) | (1 << (SqlBaseParser.GRANT - 85)) | (1 << (SqlBaseParser.REVOKE - 85)) | (1 << (SqlBaseParser.PRIVILEGES - 85)) | (1 << (SqlBaseParser.PUBLIC - 85)) | (1 << (SqlBaseParser.OPTION - 85)) | (1 << (SqlBaseParser.EXPLAIN - 85)) | (1 << (SqlBaseParser.ANALYZE - 85)) | (1 << (SqlBaseParser.FORMAT - 85)) | (1 << (SqlBaseParser.TYPE - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (SqlBaseParser.TEXT - 117)) | (1 << (SqlBaseParser.GRAPHVIZ - 117)) | (1 << (SqlBaseParser.LOGICAL - 117)) | (1 << (SqlBaseParser.DISTRIBUTED - 117)) | (1 << (SqlBaseParser.SHOW - 117)) | (1 << (SqlBaseParser.TABLES - 117)) | (1 << (SqlBaseParser.SCHEMAS - 117)) | (1 << (SqlBaseParser.CATALOGS - 117)) | (1 << (SqlBaseParser.COLUMNS - 117)) | (1 << (SqlBaseParser.COLUMN - 117)) | (1 << (SqlBaseParser.USE - 117)) | (1 << (SqlBaseParser.PARTITIONS - 117)) | (1 << (SqlBaseParser.FUNCTIONS - 117)) | (1 << (SqlBaseParser.TO - 117)) | (1 << (SqlBaseParser.SYSTEM - 117)) | (1 << (SqlBaseParser.BERNOULLI - 117)) | (1 << (SqlBaseParser.POISSONIZED - 117)) | (1 << (SqlBaseParser.TABLESAMPLE - 117)) | (1 << (SqlBaseParser.ARRAY - 117)) | (1 << (SqlBaseParser.MAP - 117)) | (1 << (SqlBaseParser.SET - 117)) | (1 << (SqlBaseParser.RESET - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (SqlBaseParser.SESSION - 149)) | (1 << (SqlBaseParser.DATA - 149)) | (1 << (SqlBaseParser.START - 149)) | (1 << (SqlBaseParser.TRANSACTION - 149)) | (1 << (SqlBaseParser.COMMIT - 149)) | (1 << (SqlBaseParser.ROLLBACK - 149)) | (1 << (SqlBaseParser.WORK - 149)) | (1 << (SqlBaseParser.ISOLATION - 149)) | (1 << (SqlBaseParser.LEVEL - 149)) | (1 << (SqlBaseParser.SERIALIZABLE - 149)) | (1 << (SqlBaseParser.REPEATABLE - 149)) | (1 << (SqlBaseParser.COMMITTED - 149)) | (1 << (SqlBaseParser.UNCOMMITTED - 149)) | (1 << (SqlBaseParser.READ - 149)) | (1 << (SqlBaseParser.WRITE - 149)) | (1 << (SqlBaseParser.ONLY - 149)) | (1 << (SqlBaseParser.CALL - 149)) | (1 << (SqlBaseParser.INPUT - 149)) | (1 << (SqlBaseParser.OUTPUT - 149)) | (1 << (SqlBaseParser.CASCADE - 149)) | (1 << (SqlBaseParser.RESTRICT - 149)) | (1 << (SqlBaseParser.INCLUDING - 149)) | (1 << (SqlBaseParser.EXCLUDING - 149)) | (1 << (SqlBaseParser.PROPERTIES - 149)) | (1 << (SqlBaseParser.NFD - 149)) | (1 << (SqlBaseParser.NFC - 149)) | (1 << (SqlBaseParser.NFKD - 149)) | (1 << (SqlBaseParser.NFKC - 149)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (SqlBaseParser.IF - 181)) | (1 << (SqlBaseParser.NULLIF - 181)) | (1 << (SqlBaseParser.COALESCE - 181)) | (1 << (SqlBaseParser.IDENTIFIER - 181)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 181)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 181)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 181)))) !== 0)) {
                this.state = 668;
                this.qualifiedName();
                this.state = 673;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 669;
                    this.match(SqlBaseParser.T__2);
                    this.state = 670;
                    this.qualifiedName();
                    this.state = 675;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 678;
            this.match(SqlBaseParser.T__3);
            break;
        case SqlBaseParser.GROUPING:
            localctx = new MultipleGroupingSetsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 679;
            this.match(SqlBaseParser.GROUPING);
            this.state = 680;
            this.match(SqlBaseParser.SETS);
            this.state = 681;
            this.match(SqlBaseParser.T__1);
            this.state = 682;
            this.groupingSet();
            this.state = 687;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 683;
                this.match(SqlBaseParser.T__2);
                this.state = 684;
                this.groupingSet();
                this.state = 689;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 690;
            this.match(SqlBaseParser.T__3);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingExpressions;
    // return this;
}

GroupingExpressionsContext.prototype = Object.create(ParserRuleContext.prototype);
GroupingExpressionsContext.prototype.constructor = GroupingExpressionsContext;

GroupingExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupingExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterGroupingExpressions(this);
	}
};

GroupingExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitGroupingExpressions(this);
	}
};

GroupingExpressionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitGroupingExpressions(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.GroupingExpressionsContext = GroupingExpressionsContext;

SqlBaseParser.prototype.groupingExpressions = function() {

    var localctx = new GroupingExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlBaseParser.RULE_groupingExpressions);
    var _la = 0; // Token type
    try {
        this.state = 707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 694;
            this.match(SqlBaseParser.T__1);
            this.state = 703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.SUBSTRING - 32)) | (1 << (SqlBaseParser.POSITION - 32)) | (1 << (SqlBaseParser.TINYINT - 32)) | (1 << (SqlBaseParser.SMALLINT - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (SqlBaseParser.SCHEMA - 99)) | (1 << (SqlBaseParser.VIEW - 99)) | (1 << (SqlBaseParser.REPLACE - 99)) | (1 << (SqlBaseParser.GRANT - 99)) | (1 << (SqlBaseParser.REVOKE - 99)) | (1 << (SqlBaseParser.PRIVILEGES - 99)) | (1 << (SqlBaseParser.PUBLIC - 99)) | (1 << (SqlBaseParser.OPTION - 99)) | (1 << (SqlBaseParser.EXPLAIN - 99)) | (1 << (SqlBaseParser.ANALYZE - 99)) | (1 << (SqlBaseParser.FORMAT - 99)) | (1 << (SqlBaseParser.TYPE - 99)) | (1 << (SqlBaseParser.TEXT - 99)) | (1 << (SqlBaseParser.GRAPHVIZ - 99)) | (1 << (SqlBaseParser.LOGICAL - 99)) | (1 << (SqlBaseParser.DISTRIBUTED - 99)) | (1 << (SqlBaseParser.CAST - 99)) | (1 << (SqlBaseParser.TRY_CAST - 99)) | (1 << (SqlBaseParser.SHOW - 99)) | (1 << (SqlBaseParser.TABLES - 99)) | (1 << (SqlBaseParser.SCHEMAS - 99)) | (1 << (SqlBaseParser.CATALOGS - 99)) | (1 << (SqlBaseParser.COLUMNS - 99)) | (1 << (SqlBaseParser.COLUMN - 99)) | (1 << (SqlBaseParser.USE - 99)) | (1 << (SqlBaseParser.PARTITIONS - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (SqlBaseParser.FUNCTIONS - 131)) | (1 << (SqlBaseParser.TO - 131)) | (1 << (SqlBaseParser.SYSTEM - 131)) | (1 << (SqlBaseParser.BERNOULLI - 131)) | (1 << (SqlBaseParser.POISSONIZED - 131)) | (1 << (SqlBaseParser.TABLESAMPLE - 131)) | (1 << (SqlBaseParser.ARRAY - 131)) | (1 << (SqlBaseParser.MAP - 131)) | (1 << (SqlBaseParser.SET - 131)) | (1 << (SqlBaseParser.RESET - 131)) | (1 << (SqlBaseParser.SESSION - 131)) | (1 << (SqlBaseParser.DATA - 131)) | (1 << (SqlBaseParser.START - 131)) | (1 << (SqlBaseParser.TRANSACTION - 131)) | (1 << (SqlBaseParser.COMMIT - 131)) | (1 << (SqlBaseParser.ROLLBACK - 131)) | (1 << (SqlBaseParser.WORK - 131)) | (1 << (SqlBaseParser.ISOLATION - 131)) | (1 << (SqlBaseParser.LEVEL - 131)) | (1 << (SqlBaseParser.SERIALIZABLE - 131)) | (1 << (SqlBaseParser.REPEATABLE - 131)) | (1 << (SqlBaseParser.COMMITTED - 131)) | (1 << (SqlBaseParser.UNCOMMITTED - 131)) | (1 << (SqlBaseParser.READ - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (SqlBaseParser.WRITE - 163)) | (1 << (SqlBaseParser.ONLY - 163)) | (1 << (SqlBaseParser.CALL - 163)) | (1 << (SqlBaseParser.INPUT - 163)) | (1 << (SqlBaseParser.OUTPUT - 163)) | (1 << (SqlBaseParser.CASCADE - 163)) | (1 << (SqlBaseParser.RESTRICT - 163)) | (1 << (SqlBaseParser.INCLUDING - 163)) | (1 << (SqlBaseParser.EXCLUDING - 163)) | (1 << (SqlBaseParser.PROPERTIES - 163)) | (1 << (SqlBaseParser.NORMALIZE - 163)) | (1 << (SqlBaseParser.NFD - 163)) | (1 << (SqlBaseParser.NFC - 163)) | (1 << (SqlBaseParser.NFKD - 163)) | (1 << (SqlBaseParser.NFKC - 163)) | (1 << (SqlBaseParser.IF - 163)) | (1 << (SqlBaseParser.NULLIF - 163)) | (1 << (SqlBaseParser.COALESCE - 163)) | (1 << (SqlBaseParser.PLUS - 163)) | (1 << (SqlBaseParser.MINUS - 163)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) !== 0)) {
                this.state = 695;
                this.expression();
                this.state = 700;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 696;
                    this.match(SqlBaseParser.T__2);
                    this.state = 697;
                    this.expression();
                    this.state = 702;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 705;
            this.match(SqlBaseParser.T__3);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 706;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    // return this;
}

GroupingSetContext.prototype = Object.create(ParserRuleContext.prototype);
GroupingSetContext.prototype.constructor = GroupingSetContext;

GroupingSetContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

GroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterGroupingSet(this);
	}
};

GroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitGroupingSet(this);
	}
};

GroupingSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitGroupingSet(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.GroupingSetContext = GroupingSetContext;

SqlBaseParser.prototype.groupingSet = function() {

    var localctx = new GroupingSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlBaseParser.RULE_groupingSet);
    var _la = 0; // Token type
    try {
        this.state = 722;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 709;
            this.match(SqlBaseParser.T__1);
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ADD || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SqlBaseParser.NO - 33)) | (1 << (SqlBaseParser.SUBSTRING - 33)) | (1 << (SqlBaseParser.POSITION - 33)) | (1 << (SqlBaseParser.TINYINT - 33)) | (1 << (SqlBaseParser.SMALLINT - 33)) | (1 << (SqlBaseParser.INTEGER - 33)) | (1 << (SqlBaseParser.DATE - 33)) | (1 << (SqlBaseParser.TIME - 33)) | (1 << (SqlBaseParser.TIMESTAMP - 33)) | (1 << (SqlBaseParser.INTERVAL - 33)) | (1 << (SqlBaseParser.YEAR - 33)) | (1 << (SqlBaseParser.MONTH - 33)) | (1 << (SqlBaseParser.DAY - 33)) | (1 << (SqlBaseParser.HOUR - 33)) | (1 << (SqlBaseParser.MINUTE - 33)) | (1 << (SqlBaseParser.SECOND - 33)) | (1 << (SqlBaseParser.ZONE - 33)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (SqlBaseParser.FILTER - 85)) | (1 << (SqlBaseParser.OVER - 85)) | (1 << (SqlBaseParser.PARTITION - 85)) | (1 << (SqlBaseParser.RANGE - 85)) | (1 << (SqlBaseParser.ROWS - 85)) | (1 << (SqlBaseParser.PRECEDING - 85)) | (1 << (SqlBaseParser.FOLLOWING - 85)) | (1 << (SqlBaseParser.CURRENT - 85)) | (1 << (SqlBaseParser.ROW - 85)) | (1 << (SqlBaseParser.SCHEMA - 85)) | (1 << (SqlBaseParser.VIEW - 85)) | (1 << (SqlBaseParser.REPLACE - 85)) | (1 << (SqlBaseParser.GRANT - 85)) | (1 << (SqlBaseParser.REVOKE - 85)) | (1 << (SqlBaseParser.PRIVILEGES - 85)) | (1 << (SqlBaseParser.PUBLIC - 85)) | (1 << (SqlBaseParser.OPTION - 85)) | (1 << (SqlBaseParser.EXPLAIN - 85)) | (1 << (SqlBaseParser.ANALYZE - 85)) | (1 << (SqlBaseParser.FORMAT - 85)) | (1 << (SqlBaseParser.TYPE - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (SqlBaseParser.TEXT - 117)) | (1 << (SqlBaseParser.GRAPHVIZ - 117)) | (1 << (SqlBaseParser.LOGICAL - 117)) | (1 << (SqlBaseParser.DISTRIBUTED - 117)) | (1 << (SqlBaseParser.SHOW - 117)) | (1 << (SqlBaseParser.TABLES - 117)) | (1 << (SqlBaseParser.SCHEMAS - 117)) | (1 << (SqlBaseParser.CATALOGS - 117)) | (1 << (SqlBaseParser.COLUMNS - 117)) | (1 << (SqlBaseParser.COLUMN - 117)) | (1 << (SqlBaseParser.USE - 117)) | (1 << (SqlBaseParser.PARTITIONS - 117)) | (1 << (SqlBaseParser.FUNCTIONS - 117)) | (1 << (SqlBaseParser.TO - 117)) | (1 << (SqlBaseParser.SYSTEM - 117)) | (1 << (SqlBaseParser.BERNOULLI - 117)) | (1 << (SqlBaseParser.POISSONIZED - 117)) | (1 << (SqlBaseParser.TABLESAMPLE - 117)) | (1 << (SqlBaseParser.ARRAY - 117)) | (1 << (SqlBaseParser.MAP - 117)) | (1 << (SqlBaseParser.SET - 117)) | (1 << (SqlBaseParser.RESET - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (SqlBaseParser.SESSION - 149)) | (1 << (SqlBaseParser.DATA - 149)) | (1 << (SqlBaseParser.START - 149)) | (1 << (SqlBaseParser.TRANSACTION - 149)) | (1 << (SqlBaseParser.COMMIT - 149)) | (1 << (SqlBaseParser.ROLLBACK - 149)) | (1 << (SqlBaseParser.WORK - 149)) | (1 << (SqlBaseParser.ISOLATION - 149)) | (1 << (SqlBaseParser.LEVEL - 149)) | (1 << (SqlBaseParser.SERIALIZABLE - 149)) | (1 << (SqlBaseParser.REPEATABLE - 149)) | (1 << (SqlBaseParser.COMMITTED - 149)) | (1 << (SqlBaseParser.UNCOMMITTED - 149)) | (1 << (SqlBaseParser.READ - 149)) | (1 << (SqlBaseParser.WRITE - 149)) | (1 << (SqlBaseParser.ONLY - 149)) | (1 << (SqlBaseParser.CALL - 149)) | (1 << (SqlBaseParser.INPUT - 149)) | (1 << (SqlBaseParser.OUTPUT - 149)) | (1 << (SqlBaseParser.CASCADE - 149)) | (1 << (SqlBaseParser.RESTRICT - 149)) | (1 << (SqlBaseParser.INCLUDING - 149)) | (1 << (SqlBaseParser.EXCLUDING - 149)) | (1 << (SqlBaseParser.PROPERTIES - 149)) | (1 << (SqlBaseParser.NFD - 149)) | (1 << (SqlBaseParser.NFC - 149)) | (1 << (SqlBaseParser.NFKD - 149)) | (1 << (SqlBaseParser.NFKC - 149)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (SqlBaseParser.IF - 181)) | (1 << (SqlBaseParser.NULLIF - 181)) | (1 << (SqlBaseParser.COALESCE - 181)) | (1 << (SqlBaseParser.IDENTIFIER - 181)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 181)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 181)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 181)))) !== 0)) {
                this.state = 710;
                this.qualifiedName();
                this.state = 715;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 711;
                    this.match(SqlBaseParser.T__2);
                    this.state = 712;
                    this.qualifiedName();
                    this.state = 717;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 720;
            this.match(SqlBaseParser.T__3);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.qualifiedName();
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedQuery;
    this.name = null; // IdentifierContext
    // return this;
}

NamedQueryContext.prototype = Object.create(ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;

NamedQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

NamedQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedQueryContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

NamedQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNamedQuery(this);
	}
};

NamedQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNamedQuery(this);
	}
};

NamedQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNamedQuery(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.NamedQueryContext = NamedQueryContext;

SqlBaseParser.prototype.namedQuery = function() {

    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SqlBaseParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        localctx.name = this.identifier();
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__1) {
            this.state = 725;
            this.columnAliases();
        }

        this.state = 728;
        this.match(SqlBaseParser.AS);
        this.state = 729;
        this.match(SqlBaseParser.T__1);
        this.state = 730;
        this.query();
        this.state = 731;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    // return this;
}

SetQuantifierContext.prototype = Object.create(ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

SetQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSetQuantifier(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.SetQuantifierContext = SetQuantifierContext;

SqlBaseParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlBaseParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 733;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_selectItem;
    // return this;
}

SelectItemContext.prototype = Object.create(ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;


 
SelectItemContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectAllContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SelectAllContext.prototype = Object.create(SelectItemContext.prototype);
SelectAllContext.prototype.constructor = SelectAllContext;

SqlBaseParser.SelectAllContext = SelectAllContext;

SelectAllContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

SelectAllContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};
SelectAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSelectAll(this);
	}
};

SelectAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSelectAll(this);
	}
};

SelectAllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSelectAll(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SelectSingleContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SelectSingleContext.prototype = Object.create(SelectItemContext.prototype);
SelectSingleContext.prototype.constructor = SelectSingleContext;

SqlBaseParser.SelectSingleContext = SelectSingleContext;

SelectSingleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectSingleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectSingleContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
SelectSingleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSelectSingle(this);
	}
};

SelectSingleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSelectSingle(this);
	}
};

SelectSingleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSelectSingle(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.SelectItemContext = SelectItemContext;

SqlBaseParser.prototype.selectItem = function() {

    var localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SqlBaseParser.RULE_selectItem);
    var _la = 0; // Token type
    try {
        this.state = 747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectSingleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 735;
            this.expression();
            this.state = 740;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 737;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 736;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 739;
                this.identifier();

            }
            break;

        case 2:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 742;
            this.qualifiedName();
            this.state = 743;
            this.match(SqlBaseParser.T__0);
            this.state = 744;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 3:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 746;
            this.match(SqlBaseParser.ASTERISK);
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relation;
    // return this;
}

RelationContext.prototype = Object.create(ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;


 
RelationContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RelationDefaultContext(parser, ctx) {
	RelationContext.call(this, parser);
    RelationContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RelationDefaultContext.prototype = Object.create(RelationContext.prototype);
RelationDefaultContext.prototype.constructor = RelationDefaultContext;

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

RelationDefaultContext.prototype.sampledRelation = function() {
    return this.getTypedRuleContext(SampledRelationContext,0);
};
RelationDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRelationDefault(this);
	}
};

RelationDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRelationDefault(this);
	}
};

RelationDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRelationDefault(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function JoinRelationContext(parser, ctx) {
	RelationContext.call(this, parser);
    this.left = null; // RelationContext;
    this.right = null; // SampledRelationContext;
    this.rightRelation = null; // RelationContext;
    RelationContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

JoinRelationContext.prototype = Object.create(RelationContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

SqlBaseParser.JoinRelationContext = JoinRelationContext;

JoinRelationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

JoinRelationContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

JoinRelationContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

JoinRelationContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinRelationContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinRelationContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

JoinRelationContext.prototype.sampledRelation = function() {
    return this.getTypedRuleContext(SampledRelationContext,0);
};
JoinRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterJoinRelation(this);
	}
};

JoinRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitJoinRelation(this);
	}
};

JoinRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitJoinRelation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.prototype.relation = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 46;
    this.enterRecursionRule(localctx, 46, SqlBaseParser.RULE_relation, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RelationDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 750;
        this.sampledRelation();
        this._ctx.stop = this._input.LT(-1);
        this.state = 770;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_relation);
                this.state = 752;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 766;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.CROSS:
                    this.state = 753;
                    this.match(SqlBaseParser.CROSS);
                    this.state = 754;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 755;
                    localctx.right = this.sampledRelation();
                    break;
                case SqlBaseParser.JOIN:
                case SqlBaseParser.INNER:
                case SqlBaseParser.LEFT:
                case SqlBaseParser.RIGHT:
                case SqlBaseParser.FULL:
                    this.state = 756;
                    this.joinType();
                    this.state = 757;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 758;
                    localctx.rightRelation = this.relation(0);
                    this.state = 759;
                    this.joinCriteria();
                    break;
                case SqlBaseParser.NATURAL:
                    this.state = 761;
                    this.match(SqlBaseParser.NATURAL);
                    this.state = 762;
                    this.joinType();
                    this.state = 763;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 764;
                    localctx.right = this.sampledRelation();
                    break;
                default:
                    throw new _error.NoViableAltException(this);
                } 
            }
            this.state = 772;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch( error) {
        if(error instanceof _error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinType;
    // return this;
}

JoinTypeContext.prototype = Object.create(ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;

JoinTypeContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

JoinTypeContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

JoinTypeContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

JoinTypeContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

JoinTypeContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

JoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterJoinType(this);
	}
};

JoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitJoinType(this);
	}
};

JoinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitJoinType(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.JoinTypeContext = JoinTypeContext;

SqlBaseParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlBaseParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 788;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.JOIN:
        case SqlBaseParser.INNER:
            this.enterOuterAlt(localctx, 1);
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INNER) {
                this.state = 773;
                this.match(SqlBaseParser.INNER);
            }

            break;
        case SqlBaseParser.LEFT:
            this.enterOuterAlt(localctx, 2);
            this.state = 776;
            this.match(SqlBaseParser.LEFT);
            this.state = 778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 777;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.RIGHT:
            this.enterOuterAlt(localctx, 3);
            this.state = 780;
            this.match(SqlBaseParser.RIGHT);
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 781;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.FULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 784;
            this.match(SqlBaseParser.FULL);
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 785;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    // return this;
}

JoinCriteriaContext.prototype = Object.create(ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

JoinCriteriaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

JoinCriteriaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitJoinCriteria(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext;

SqlBaseParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlBaseParser.RULE_joinCriteria);
    var _la = 0; // Token type
    try {
        this.state = 804;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 790;
            this.match(SqlBaseParser.ON);
            this.state = 791;
            this.booleanExpression(0);
            break;
        case SqlBaseParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 792;
            this.match(SqlBaseParser.USING);
            this.state = 793;
            this.match(SqlBaseParser.T__1);
            this.state = 794;
            this.identifier();
            this.state = 799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 795;
                this.match(SqlBaseParser.T__2);
                this.state = 796;
                this.identifier();
                this.state = 801;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 802;
            this.match(SqlBaseParser.T__3);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampledRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampledRelation;
    this.percentage = null; // ExpressionContext
    // return this;
}

SampledRelationContext.prototype = Object.create(ParserRuleContext.prototype);
SampledRelationContext.prototype.constructor = SampledRelationContext;

SampledRelationContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};

SampledRelationContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

SampledRelationContext.prototype.sampleType = function() {
    return this.getTypedRuleContext(SampleTypeContext,0);
};

SampledRelationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SampledRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSampledRelation(this);
	}
};

SampledRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSampledRelation(this);
	}
};

SampledRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSampledRelation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.SampledRelationContext = SampledRelationContext;

SqlBaseParser.prototype.sampledRelation = function() {

    var localctx = new SampledRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlBaseParser.RULE_sampledRelation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.aliasedRelation();
        this.state = 813;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 807;
            this.match(SqlBaseParser.TABLESAMPLE);
            this.state = 808;
            this.sampleType();
            this.state = 809;
            this.match(SqlBaseParser.T__1);
            this.state = 810;
            localctx.percentage = this.expression();
            this.state = 811;
            this.match(SqlBaseParser.T__3);

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampleTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampleType;
    // return this;
}

SampleTypeContext.prototype = Object.create(ParserRuleContext.prototype);
SampleTypeContext.prototype.constructor = SampleTypeContext;

SampleTypeContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlBaseParser.BERNOULLI, 0);
};

SampleTypeContext.prototype.SYSTEM = function() {
    return this.getToken(SqlBaseParser.SYSTEM, 0);
};

SampleTypeContext.prototype.POISSONIZED = function() {
    return this.getToken(SqlBaseParser.POISSONIZED, 0);
};

SampleTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSampleType(this);
	}
};

SampleTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSampleType(this);
	}
};

SampleTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSampleType(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.SampleTypeContext = SampleTypeContext;

SqlBaseParser.prototype.sampleType = function() {

    var localctx = new SampleTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlBaseParser.RULE_sampleType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 815;
        _la = this._input.LA(1);
        if(!(((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (SqlBaseParser.SYSTEM - 137)) | (1 << (SqlBaseParser.BERNOULLI - 137)) | (1 << (SqlBaseParser.POISSONIZED - 137)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasedRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    this.relationP = null; // RelationPrimaryContext
    this.as = null; // Token
    this.alias = null; // IdentifierContext
    // return this;
}

AliasedRelationContext.prototype = Object.create(ParserRuleContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

AliasedRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

AliasedRelationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AliasedRelationContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

AliasedRelationContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

AliasedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitAliasedRelation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

SqlBaseParser.prototype.aliasedRelation = function() {

    var localctx = new AliasedRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlBaseParser.RULE_aliasedRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        localctx.relationP = this.relationPrimary();
        this.state = 825;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 818;
                localctx.as = this.match(SqlBaseParser.AS);
            }

            this.state = 821;
            localctx.alias = this.identifier();
            this.state = 823;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 822;
                this.columnAliases();

            }

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnAliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_columnAliases;
    // return this;
}

ColumnAliasesContext.prototype = Object.create(ParserRuleContext.prototype);
ColumnAliasesContext.prototype.constructor = ColumnAliasesContext;

ColumnAliasesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnAliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterColumnAliases(this);
	}
};

ColumnAliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitColumnAliases(this);
	}
};

ColumnAliasesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitColumnAliases(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.ColumnAliasesContext = ColumnAliasesContext;

SqlBaseParser.prototype.columnAliases = function() {

    var localctx = new ColumnAliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlBaseParser.RULE_columnAliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 827;
        this.match(SqlBaseParser.T__1);
        this.state = 828;
        this.identifier();
        this.state = 833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 829;
            this.match(SqlBaseParser.T__2);
            this.state = 830;
            this.identifier();
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 836;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    // return this;
}

RelationPrimaryContext.prototype = Object.create(ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;


 
RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SubqueryRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
SubqueryRelationContext.prototype.constructor = SubqueryRelationContext;

SqlBaseParser.SubqueryRelationContext = SubqueryRelationContext;

SubqueryRelationContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSubqueryRelation(this);
	}
};

SubqueryRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSubqueryRelation(this);
	}
};

SubqueryRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSubqueryRelation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ParenthesizedRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ParenthesizedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
ParenthesizedRelationContext.prototype.constructor = ParenthesizedRelationContext;

SqlBaseParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

ParenthesizedRelationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};
ParenthesizedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterParenthesizedRelation(this);
	}
};

ParenthesizedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitParenthesizedRelation(this);
	}
};

ParenthesizedRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitParenthesizedRelation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function UnnestContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

UnnestContext.prototype = Object.create(RelationPrimaryContext.prototype);
UnnestContext.prototype.constructor = UnnestContext;

SqlBaseParser.UnnestContext = UnnestContext;

UnnestContext.prototype.UNNEST = function() {
    return this.getToken(SqlBaseParser.UNNEST, 0);
};

UnnestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

UnnestContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

UnnestContext.prototype.ORDINALITY = function() {
    return this.getToken(SqlBaseParser.ORDINALITY, 0);
};
UnnestContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterUnnest(this);
	}
};

UnnestContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitUnnest(this);
	}
};

UnnestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitUnnest(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlBaseParser.TableNameContext = TableNameContext;

TableNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTableName(this);
	}
};

TableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTableName(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext;

SqlBaseParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlBaseParser.RULE_relationPrimary);
    var _la = 0; // Token type
    try {
        this.state = 862;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 838;
            this.qualifiedName();
            break;

        case 2:
            localctx = new SubqueryRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 839;
            this.match(SqlBaseParser.T__1);
            this.state = 840;
            this.query();
            this.state = 841;
            this.match(SqlBaseParser.T__3);
            break;

        case 3:
            localctx = new UnnestContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 843;
            this.match(SqlBaseParser.UNNEST);
            this.state = 844;
            this.match(SqlBaseParser.T__1);
            this.state = 845;
            this.expression();
            this.state = 850;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 846;
                this.match(SqlBaseParser.T__2);
                this.state = 847;
                this.expression();
                this.state = 852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 853;
            this.match(SqlBaseParser.T__3);
            this.state = 856;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 854;
                this.match(SqlBaseParser.WITH);
                this.state = 855;
                this.match(SqlBaseParser.ORDINALITY);

            }
            break;

        case 4:
            localctx = new ParenthesizedRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 858;
            this.match(SqlBaseParser.T__1);
            this.state = 859;
            this.relation(0);
            this.state = 860;
            this.match(SqlBaseParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_expression;
    // return this;
}

ExpressionContext.prototype = Object.create(ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExpression(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.ExpressionContext = ExpressionContext;

SqlBaseParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SqlBaseParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 864;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    // return this;
}

BooleanExpressionContext.prototype = Object.create(ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlBaseParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitLogicalNot(this);
	}
};

LogicalNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitLogicalNot(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function BooleanDefaultContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

BooleanDefaultContext.prototype = Object.create(BooleanExpressionContext.prototype);
BooleanDefaultContext.prototype.constructor = BooleanDefaultContext;

SqlBaseParser.BooleanDefaultContext = BooleanDefaultContext;

BooleanDefaultContext.prototype.predicated = function() {
    return this.getTypedRuleContext(PredicatedContext,0);
};
BooleanDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBooleanDefault(this);
	}
};

BooleanDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBooleanDefault(this);
	}
};

BooleanDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBooleanDefault(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitLogicalBinary(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 64;
    this.enterRecursionRule(localctx, 64, SqlBaseParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.T__4:
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.CURRENT_DATE:
        case SqlBaseParser.CURRENT_TIME:
        case SqlBaseParser.CURRENT_TIMESTAMP:
        case SqlBaseParser.LOCALTIME:
        case SqlBaseParser.LOCALTIMESTAMP:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.CASE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.CAST:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.DOUBLE_PRECISION:
            localctx = new BooleanDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 867;
            this.predicated();
            break;
        case SqlBaseParser.NOT:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 868;
            this.match(SqlBaseParser.NOT);
            this.state = 869;
            this.booleanExpression(3);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 880;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 878;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 872;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 873;
                    localctx.operator = this.match(SqlBaseParser.AND);
                    this.state = 874;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 875;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 876;
                    localctx.operator = this.match(SqlBaseParser.OR);
                    this.state = 877;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 882;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

    } catch( error) {
        if(error instanceof _error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PredicatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicated;
    this._valueExpression = null; // ValueExpressionContext
    // return this;
}

PredicatedContext.prototype = Object.create(ParserRuleContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitPredicated(this);
	}
};

PredicatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitPredicated(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.PredicatedContext = PredicatedContext;

SqlBaseParser.prototype.predicated = function() {

    var localctx = new PredicatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SqlBaseParser.RULE_predicated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 883;
        localctx._valueExpression = this.valueExpression(0);
        this.state = 885;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        if(la_===1) {
            this.state = 884;
            this.predicate(localctx._valueExpression);

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState, value) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicate;
    this.value = null
    this.value = value || null;
    // return this;
}

PredicateContext.prototype = Object.create(ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
    this.value = ctx.value;
};


function ComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ComparisonContext.prototype = Object.create(PredicateContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlBaseParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitComparison(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function LikeContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.pattern = null; // ValueExpressionContext;
    this.escape = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

LikeContext.prototype = Object.create(PredicateContext.prototype);
LikeContext.prototype.constructor = LikeContext;

SqlBaseParser.LikeContext = LikeContext;

LikeContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

LikeContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

LikeContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LikeContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};
LikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterLike(this);
	}
};

LikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitLike(this);
	}
};

LikeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitLike(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function InSubqueryContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

InSubqueryContext.prototype = Object.create(PredicateContext.prototype);
InSubqueryContext.prototype.constructor = InSubqueryContext;

SqlBaseParser.InSubqueryContext = InSubqueryContext;

InSubqueryContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InSubqueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InSubqueryContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterInSubquery(this);
	}
};

InSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitInSubquery(this);
	}
};

InSubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitInSubquery(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DistinctFromContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DistinctFromContext.prototype = Object.create(PredicateContext.prototype);
DistinctFromContext.prototype.constructor = DistinctFromContext;

SqlBaseParser.DistinctFromContext = DistinctFromContext;

DistinctFromContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

DistinctFromContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

DistinctFromContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DistinctFromContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

DistinctFromContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
DistinctFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDistinctFrom(this);
	}
};

DistinctFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDistinctFrom(this);
	}
};

DistinctFromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDistinctFrom(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function InListContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

InListContext.prototype = Object.create(PredicateContext.prototype);
InListContext.prototype.constructor = InListContext;

SqlBaseParser.InListContext = InListContext;

InListContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InListContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterInList(this);
	}
};

InListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitInList(this);
	}
};

InListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitInList(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function NullPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

NullPredicateContext.prototype = Object.create(PredicateContext.prototype);
NullPredicateContext.prototype.constructor = NullPredicateContext;

SqlBaseParser.NullPredicateContext = NullPredicateContext;

NullPredicateContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

NullPredicateContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

NullPredicateContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
NullPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNullPredicate(this);
	}
};

NullPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNullPredicate(this);
	}
};

NullPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNullPredicate(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function BetweenContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.lower = null; // ValueExpressionContext;
    this.upper = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

BetweenContext.prototype = Object.create(PredicateContext.prototype);
BetweenContext.prototype.constructor = BetweenContext;

SqlBaseParser.BetweenContext = BetweenContext;

BetweenContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

BetweenContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

BetweenContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

BetweenContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
BetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBetween(this);
	}
};

BetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBetween(this);
	}
};

BetweenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBetween(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function QuantifiedComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

QuantifiedComparisonContext.prototype = Object.create(PredicateContext.prototype);
QuantifiedComparisonContext.prototype.constructor = QuantifiedComparisonContext;

SqlBaseParser.QuantifiedComparisonContext = QuantifiedComparisonContext;

QuantifiedComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

QuantifiedComparisonContext.prototype.comparisonQuantifier = function() {
    return this.getTypedRuleContext(ComparisonQuantifierContext,0);
};

QuantifiedComparisonContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
QuantifiedComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQuantifiedComparison(this);
	}
};

QuantifiedComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQuantifiedComparison(this);
	}
};

QuantifiedComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQuantifiedComparison(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.PredicateContext = PredicateContext;

SqlBaseParser.prototype.predicate = function(value) {

    var localctx = new PredicateContext(this, this._ctx, this.state, value);
    this.enterRule(localctx, 68, SqlBaseParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 948;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 887;
            this.comparisonOperator();
            this.state = 888;
            localctx.right = this.valueExpression(0);
            break;

        case 2:
            localctx = new QuantifiedComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 890;
            this.comparisonOperator();
            this.state = 891;
            this.comparisonQuantifier();
            this.state = 892;
            this.match(SqlBaseParser.T__1);
            this.state = 893;
            this.query();
            this.state = 894;
            this.match(SqlBaseParser.T__3);
            break;

        case 3:
            localctx = new BetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 896;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 899;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 900;
            localctx.lower = this.valueExpression(0);
            this.state = 901;
            this.match(SqlBaseParser.AND);
            this.state = 902;
            localctx.upper = this.valueExpression(0);
            break;

        case 4:
            localctx = new InListContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 904;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 907;
            this.match(SqlBaseParser.IN);
            this.state = 908;
            this.match(SqlBaseParser.T__1);
            this.state = 909;
            this.expression();
            this.state = 914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 910;
                this.match(SqlBaseParser.T__2);
                this.state = 911;
                this.expression();
                this.state = 916;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 917;
            this.match(SqlBaseParser.T__3);
            break;

        case 5:
            localctx = new InSubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 920;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 919;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 922;
            this.match(SqlBaseParser.IN);
            this.state = 923;
            this.match(SqlBaseParser.T__1);
            this.state = 924;
            this.query();
            this.state = 925;
            this.match(SqlBaseParser.T__3);
            break;

        case 6:
            localctx = new LikeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 927;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 930;
            this.match(SqlBaseParser.LIKE);
            this.state = 931;
            localctx.pattern = this.valueExpression(0);
            this.state = 934;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
            if(la_===1) {
                this.state = 932;
                this.match(SqlBaseParser.ESCAPE);
                this.state = 933;
                localctx.escape = this.valueExpression(0);

            }
            break;

        case 7:
            localctx = new NullPredicateContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 936;
            this.match(SqlBaseParser.IS);
            this.state = 938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 937;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 940;
            this.match(SqlBaseParser.NULL);
            break;

        case 8:
            localctx = new DistinctFromContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 941;
            this.match(SqlBaseParser.IS);
            this.state = 943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 942;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 945;
            this.match(SqlBaseParser.DISTINCT);
            this.state = 946;
            this.match(SqlBaseParser.FROM);
            this.state = 947;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    // return this;
}

ValueExpressionContext.prototype = Object.create(ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitValueExpressionDefault(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ConcatenationContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ConcatenationContext.prototype = Object.create(ValueExpressionContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

SqlBaseParser.ConcatenationContext = ConcatenationContext;

ConcatenationContext.prototype.CONCAT = function() {
    return this.getToken(SqlBaseParser.CONCAT, 0);
};

ConcatenationContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitConcatenation(this);
	}
};

ConcatenationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitConcatenation(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitArithmeticBinary(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitArithmeticUnary(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function AtTimeZoneContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

AtTimeZoneContext.prototype = Object.create(ValueExpressionContext.prototype);
AtTimeZoneContext.prototype.constructor = AtTimeZoneContext;

SqlBaseParser.AtTimeZoneContext = AtTimeZoneContext;

AtTimeZoneContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

AtTimeZoneContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

AtTimeZoneContext.prototype.timeZoneSpecifier = function() {
    return this.getTypedRuleContext(TimeZoneSpecifierContext,0);
};
AtTimeZoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitAtTimeZone(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, SqlBaseParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.T__4:
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.CURRENT_DATE:
        case SqlBaseParser.CURRENT_TIME:
        case SqlBaseParser.CURRENT_TIMESTAMP:
        case SqlBaseParser.LOCALTIME:
        case SqlBaseParser.LOCALTIMESTAMP:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.CASE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.CAST:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.DOUBLE_PRECISION:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 951;
            this.primaryExpression(0);
            break;
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 952;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 953;
            this.valueExpression(4);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 970;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 968;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 956;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 957;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ASTERISK - 192)) | (1 << (SqlBaseParser.SLASH - 192)) | (1 << (SqlBaseParser.PERCENT - 192)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 958;
                    localctx.right = this.valueExpression(4);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 959;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 960;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 961;
                    localctx.right = this.valueExpression(3);
                    break;

                case 3:
                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 962;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 963;
                    this.match(SqlBaseParser.CONCAT);
                    this.state = 964;
                    localctx.right = this.valueExpression(2);
                    break;

                case 4:
                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 965;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 966;
                    this.match(SqlBaseParser.AT);
                    this.state = 967;
                    this.timeZoneSpecifier();
                    break;

                } 
            }
            this.state = 972;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch( error) {
        if(error instanceof _error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    // return this;
}

PrimaryExpressionContext.prototype = Object.create(ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlBaseParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DereferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDereference(this);
	}
};

DereferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDereference(this);
	}
};

DereferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDereference(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function TypeConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

TypeConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

TypeConstructorContext.prototype.DOUBLE_PRECISION = function() {
    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
};
TypeConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTypeConstructor(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SpecialDateTimeFunctionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.name = null; // Token;
    this.precision = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SpecialDateTimeFunctionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SpecialDateTimeFunctionContext.prototype.constructor = SpecialDateTimeFunctionContext;

SqlBaseParser.SpecialDateTimeFunctionContext = SpecialDateTimeFunctionContext;

SpecialDateTimeFunctionContext.prototype.CURRENT_DATE = function() {
    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
};

SpecialDateTimeFunctionContext.prototype.CURRENT_TIME = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
};

SpecialDateTimeFunctionContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

SpecialDateTimeFunctionContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
};

SpecialDateTimeFunctionContext.prototype.LOCALTIME = function() {
    return this.getToken(SqlBaseParser.LOCALTIME, 0);
};

SpecialDateTimeFunctionContext.prototype.LOCALTIMESTAMP = function() {
    return this.getToken(SqlBaseParser.LOCALTIMESTAMP, 0);
};
SpecialDateTimeFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSpecialDateTimeFunction(this);
	}
};

SpecialDateTimeFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSpecialDateTimeFunction(this);
	}
};

SpecialDateTimeFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSpecialDateTimeFunction(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SubstringContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SubstringContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubstringContext.prototype.constructor = SubstringContext;

SqlBaseParser.SubstringContext = SubstringContext;

SubstringContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

SubstringContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

SubstringContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

SubstringContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};
SubstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSubstring(this);
	}
};

SubstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSubstring(this);
	}
};

SubstringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSubstring(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlBaseParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastContext.prototype.TRY_CAST = function() {
    return this.getToken(SqlBaseParser.TRY_CAST, 0);
};
CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCast(this);
	}
};

CastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCast(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function LambdaContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

LambdaContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LambdaContext.prototype.constructor = LambdaContext;

SqlBaseParser.LambdaContext = LambdaContext;

LambdaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

LambdaContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
LambdaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterLambda(this);
	}
};

LambdaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitLambda(this);
	}
};

LambdaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitLambda(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ParameterContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ParameterContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

SqlBaseParser.ParameterContext = ParameterContext;

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitParameter(this);
	}
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitParameter(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function NormalizeContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

NormalizeContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NormalizeContext.prototype.constructor = NormalizeContext;

SqlBaseParser.NormalizeContext = NormalizeContext;

NormalizeContext.prototype.NORMALIZE = function() {
    return this.getToken(SqlBaseParser.NORMALIZE, 0);
};

NormalizeContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

NormalizeContext.prototype.normalForm = function() {
    return this.getTypedRuleContext(NormalFormContext,0);
};
NormalizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNormalize(this);
	}
};

NormalizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNormalize(this);
	}
};

NormalizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNormalize(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function IntervalLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

IntervalLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

IntervalLiteralContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
IntervalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterIntervalLiteral(this);
	}
};

IntervalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitIntervalLiteral(this);
	}
};

IntervalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitIntervalLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function NumericLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

NumericLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNumericLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function BooleanLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

BooleanLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBooleanLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ImplicitRowConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ImplicitRowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ImplicitRowConstructorContext.prototype.constructor = ImplicitRowConstructorContext;

SqlBaseParser.ImplicitRowConstructorContext = ImplicitRowConstructorContext;

ImplicitRowConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ImplicitRowConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterImplicitRowConstructor(this);
	}
};

ImplicitRowConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitImplicitRowConstructor(this);
	}
};

ImplicitRowConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitImplicitRowConstructor(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SimpleCaseContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SimpleCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSimpleCase(this);
	}
};

SimpleCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSimpleCase(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterColumnReference(this);
	}
};

ColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitColumnReference(this);
	}
};

ColumnReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitColumnReference(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function NullLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

NullLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlBaseParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNullLiteral(this);
	}
};

NullLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNullLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RowConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
RowConstructorContext.prototype.constructor = RowConstructorContext;

SqlBaseParser.RowConstructorContext = RowConstructorContext;

RowConstructorContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

RowConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RowConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRowConstructor(this);
	}
};

RowConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRowConstructor(this);
	}
};

RowConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRowConstructor(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlBaseParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSubscript(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSubqueryExpression(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function BinaryLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

BinaryLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BinaryLiteralContext.prototype.constructor = BinaryLiteralContext;

SqlBaseParser.BinaryLiteralContext = BinaryLiteralContext;

BinaryLiteralContext.prototype.BINARY_LITERAL = function() {
    return this.getToken(SqlBaseParser.BINARY_LITERAL, 0);
};
BinaryLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBinaryLiteral(this);
	}
};

BinaryLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBinaryLiteral(this);
	}
};

BinaryLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBinaryLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ExtractContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;

SqlBaseParser.ExtractContext = ExtractContext;

ExtractContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

ExtractContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExtractContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ExtractContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ExtractContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExtract(this);
	}
};

ExtractContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExtract(this);
	}
};

ExtractContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExtract(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function StringLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

StringLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlBaseParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitStringLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ArrayConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ArrayConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ArrayConstructorContext.prototype.constructor = ArrayConstructorContext;

SqlBaseParser.ArrayConstructorContext = ArrayConstructorContext;

ArrayConstructorContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

ArrayConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ArrayConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitArrayConstructor(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlBaseParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

FunctionCallContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

FunctionCallContext.prototype.filter = function() {
    return this.getTypedRuleContext(FilterContext,0);
};

FunctionCallContext.prototype.over = function() {
    return this.getTypedRuleContext(OverContext,0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionCallContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};
FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitFunctionCall(this);
	}
};

FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitFunctionCall(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ExistsContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ExistsContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

SqlBaseParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

ExistsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExists(this);
	}
};

ExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExists(this);
	}
};

ExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExists(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

SqlBaseParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PositionContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};
PositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterPosition(this);
	}
};

PositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitPosition(this);
	}
};

PositionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitPosition(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSearchedCase(this);
	}
};

SearchedCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSearchedCase(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, SqlBaseParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NullLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 974;
            this.match(SqlBaseParser.NULL);
            break;

        case 2:
            localctx = new IntervalLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 975;
            this.interval();
            break;

        case 3:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 976;
            this.identifier();
            this.state = 977;
            this.match(SqlBaseParser.STRING);
            break;

        case 4:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 979;
            this.match(SqlBaseParser.DOUBLE_PRECISION);
            this.state = 980;
            this.match(SqlBaseParser.STRING);
            break;

        case 5:
            localctx = new NumericLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 981;
            this.number();
            break;

        case 6:
            localctx = new BooleanLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 982;
            this.booleanValue();
            break;

        case 7:
            localctx = new StringLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 983;
            this.match(SqlBaseParser.STRING);
            break;

        case 8:
            localctx = new BinaryLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 984;
            this.match(SqlBaseParser.BINARY_LITERAL);
            break;

        case 9:
            localctx = new ParameterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 985;
            this.match(SqlBaseParser.T__4);
            break;

        case 10:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 986;
            this.match(SqlBaseParser.POSITION);
            this.state = 987;
            this.match(SqlBaseParser.T__1);
            this.state = 988;
            this.valueExpression(0);
            this.state = 989;
            this.match(SqlBaseParser.IN);
            this.state = 990;
            this.valueExpression(0);
            this.state = 991;
            this.match(SqlBaseParser.T__3);
            break;

        case 11:
            localctx = new ImplicitRowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 993;
            this.match(SqlBaseParser.T__1);
            this.state = 994;
            this.expression();
            this.state = 999;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 995;
                this.match(SqlBaseParser.T__2);
                this.state = 996;
                this.expression();
                this.state = 1001;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1002;
            this.match(SqlBaseParser.T__3);
            break;

        case 12:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1004;
            this.match(SqlBaseParser.ROW);
            this.state = 1005;
            this.match(SqlBaseParser.T__1);
            this.state = 1006;
            this.expression();
            this.state = 1011;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1007;
                this.match(SqlBaseParser.T__2);
                this.state = 1008;
                this.expression();
                this.state = 1013;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1014;
            this.match(SqlBaseParser.T__3);
            break;

        case 13:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1016;
            this.qualifiedName();
            this.state = 1017;
            this.match(SqlBaseParser.T__1);
            this.state = 1018;
            this.match(SqlBaseParser.ASTERISK);
            this.state = 1019;
            this.match(SqlBaseParser.T__3);
            this.state = 1021;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
            if(la_===1) {
                this.state = 1020;
                this.filter();

            }
            this.state = 1024;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
            if(la_===1) {
                this.state = 1023;
                this.over();

            }
            break;

        case 14:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1026;
            this.qualifiedName();
            this.state = 1027;
            this.match(SqlBaseParser.T__1);
            this.state = 1039;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.SUBSTRING - 32)) | (1 << (SqlBaseParser.POSITION - 32)) | (1 << (SqlBaseParser.TINYINT - 32)) | (1 << (SqlBaseParser.SMALLINT - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (SqlBaseParser.SCHEMA - 99)) | (1 << (SqlBaseParser.VIEW - 99)) | (1 << (SqlBaseParser.REPLACE - 99)) | (1 << (SqlBaseParser.GRANT - 99)) | (1 << (SqlBaseParser.REVOKE - 99)) | (1 << (SqlBaseParser.PRIVILEGES - 99)) | (1 << (SqlBaseParser.PUBLIC - 99)) | (1 << (SqlBaseParser.OPTION - 99)) | (1 << (SqlBaseParser.EXPLAIN - 99)) | (1 << (SqlBaseParser.ANALYZE - 99)) | (1 << (SqlBaseParser.FORMAT - 99)) | (1 << (SqlBaseParser.TYPE - 99)) | (1 << (SqlBaseParser.TEXT - 99)) | (1 << (SqlBaseParser.GRAPHVIZ - 99)) | (1 << (SqlBaseParser.LOGICAL - 99)) | (1 << (SqlBaseParser.DISTRIBUTED - 99)) | (1 << (SqlBaseParser.CAST - 99)) | (1 << (SqlBaseParser.TRY_CAST - 99)) | (1 << (SqlBaseParser.SHOW - 99)) | (1 << (SqlBaseParser.TABLES - 99)) | (1 << (SqlBaseParser.SCHEMAS - 99)) | (1 << (SqlBaseParser.CATALOGS - 99)) | (1 << (SqlBaseParser.COLUMNS - 99)) | (1 << (SqlBaseParser.COLUMN - 99)) | (1 << (SqlBaseParser.USE - 99)) | (1 << (SqlBaseParser.PARTITIONS - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (SqlBaseParser.FUNCTIONS - 131)) | (1 << (SqlBaseParser.TO - 131)) | (1 << (SqlBaseParser.SYSTEM - 131)) | (1 << (SqlBaseParser.BERNOULLI - 131)) | (1 << (SqlBaseParser.POISSONIZED - 131)) | (1 << (SqlBaseParser.TABLESAMPLE - 131)) | (1 << (SqlBaseParser.ARRAY - 131)) | (1 << (SqlBaseParser.MAP - 131)) | (1 << (SqlBaseParser.SET - 131)) | (1 << (SqlBaseParser.RESET - 131)) | (1 << (SqlBaseParser.SESSION - 131)) | (1 << (SqlBaseParser.DATA - 131)) | (1 << (SqlBaseParser.START - 131)) | (1 << (SqlBaseParser.TRANSACTION - 131)) | (1 << (SqlBaseParser.COMMIT - 131)) | (1 << (SqlBaseParser.ROLLBACK - 131)) | (1 << (SqlBaseParser.WORK - 131)) | (1 << (SqlBaseParser.ISOLATION - 131)) | (1 << (SqlBaseParser.LEVEL - 131)) | (1 << (SqlBaseParser.SERIALIZABLE - 131)) | (1 << (SqlBaseParser.REPEATABLE - 131)) | (1 << (SqlBaseParser.COMMITTED - 131)) | (1 << (SqlBaseParser.UNCOMMITTED - 131)) | (1 << (SqlBaseParser.READ - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (SqlBaseParser.WRITE - 163)) | (1 << (SqlBaseParser.ONLY - 163)) | (1 << (SqlBaseParser.CALL - 163)) | (1 << (SqlBaseParser.INPUT - 163)) | (1 << (SqlBaseParser.OUTPUT - 163)) | (1 << (SqlBaseParser.CASCADE - 163)) | (1 << (SqlBaseParser.RESTRICT - 163)) | (1 << (SqlBaseParser.INCLUDING - 163)) | (1 << (SqlBaseParser.EXCLUDING - 163)) | (1 << (SqlBaseParser.PROPERTIES - 163)) | (1 << (SqlBaseParser.NORMALIZE - 163)) | (1 << (SqlBaseParser.NFD - 163)) | (1 << (SqlBaseParser.NFC - 163)) | (1 << (SqlBaseParser.NFKD - 163)) | (1 << (SqlBaseParser.NFKC - 163)) | (1 << (SqlBaseParser.IF - 163)) | (1 << (SqlBaseParser.NULLIF - 163)) | (1 << (SqlBaseParser.COALESCE - 163)) | (1 << (SqlBaseParser.PLUS - 163)) | (1 << (SqlBaseParser.MINUS - 163)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) !== 0)) {
                this.state = 1029;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                    this.state = 1028;
                    this.setQuantifier();
                }

                this.state = 1031;
                this.expression();
                this.state = 1036;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 1032;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1033;
                    this.expression();
                    this.state = 1038;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1041;
            this.match(SqlBaseParser.T__3);
            this.state = 1043;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
            if(la_===1) {
                this.state = 1042;
                this.filter();

            }
            this.state = 1046;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            if(la_===1) {
                this.state = 1045;
                this.over();

            }
            break;

        case 15:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1048;
            this.identifier();
            this.state = 1049;
            this.match(SqlBaseParser.T__5);
            this.state = 1050;
            this.expression();
            break;

        case 16:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1052;
            this.match(SqlBaseParser.T__1);
            this.state = 1053;
            this.identifier();
            this.state = 1058;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1054;
                this.match(SqlBaseParser.T__2);
                this.state = 1055;
                this.identifier();
                this.state = 1060;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1061;
            this.match(SqlBaseParser.T__3);
            this.state = 1062;
            this.match(SqlBaseParser.T__5);
            this.state = 1063;
            this.expression();
            break;

        case 17:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1065;
            this.match(SqlBaseParser.T__1);
            this.state = 1066;
            this.query();
            this.state = 1067;
            this.match(SqlBaseParser.T__3);
            break;

        case 18:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1069;
            this.match(SqlBaseParser.EXISTS);
            this.state = 1070;
            this.match(SqlBaseParser.T__1);
            this.state = 1071;
            this.query();
            this.state = 1072;
            this.match(SqlBaseParser.T__3);
            break;

        case 19:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1074;
            this.match(SqlBaseParser.CASE);
            this.state = 1075;
            this.valueExpression(0);
            this.state = 1077; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1076;
                this.whenClause();
                this.state = 1079; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 1081;
                this.match(SqlBaseParser.ELSE);
                this.state = 1082;
                localctx.elseExpression = this.expression();
            }

            this.state = 1085;
            this.match(SqlBaseParser.END);
            break;

        case 20:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1087;
            this.match(SqlBaseParser.CASE);
            this.state = 1089; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1088;
                this.whenClause();
                this.state = 1091; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 1095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 1093;
                this.match(SqlBaseParser.ELSE);
                this.state = 1094;
                localctx.elseExpression = this.expression();
            }

            this.state = 1097;
            this.match(SqlBaseParser.END);
            break;

        case 21:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1099;
            this.match(SqlBaseParser.CAST);
            this.state = 1100;
            this.match(SqlBaseParser.T__1);
            this.state = 1101;
            this.expression();
            this.state = 1102;
            this.match(SqlBaseParser.AS);
            this.state = 1103;
            this.type(0);
            this.state = 1104;
            this.match(SqlBaseParser.T__3);
            break;

        case 22:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1106;
            this.match(SqlBaseParser.TRY_CAST);
            this.state = 1107;
            this.match(SqlBaseParser.T__1);
            this.state = 1108;
            this.expression();
            this.state = 1109;
            this.match(SqlBaseParser.AS);
            this.state = 1110;
            this.type(0);
            this.state = 1111;
            this.match(SqlBaseParser.T__3);
            break;

        case 23:
            localctx = new ArrayConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1113;
            this.match(SqlBaseParser.ARRAY);
            this.state = 1114;
            this.match(SqlBaseParser.T__6);
            this.state = 1123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NOT - 32)) | (1 << (SqlBaseParser.NO - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.SUBSTRING - 32)) | (1 << (SqlBaseParser.POSITION - 32)) | (1 << (SqlBaseParser.TINYINT - 32)) | (1 << (SqlBaseParser.SMALLINT - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (SqlBaseParser.SCHEMA - 99)) | (1 << (SqlBaseParser.VIEW - 99)) | (1 << (SqlBaseParser.REPLACE - 99)) | (1 << (SqlBaseParser.GRANT - 99)) | (1 << (SqlBaseParser.REVOKE - 99)) | (1 << (SqlBaseParser.PRIVILEGES - 99)) | (1 << (SqlBaseParser.PUBLIC - 99)) | (1 << (SqlBaseParser.OPTION - 99)) | (1 << (SqlBaseParser.EXPLAIN - 99)) | (1 << (SqlBaseParser.ANALYZE - 99)) | (1 << (SqlBaseParser.FORMAT - 99)) | (1 << (SqlBaseParser.TYPE - 99)) | (1 << (SqlBaseParser.TEXT - 99)) | (1 << (SqlBaseParser.GRAPHVIZ - 99)) | (1 << (SqlBaseParser.LOGICAL - 99)) | (1 << (SqlBaseParser.DISTRIBUTED - 99)) | (1 << (SqlBaseParser.CAST - 99)) | (1 << (SqlBaseParser.TRY_CAST - 99)) | (1 << (SqlBaseParser.SHOW - 99)) | (1 << (SqlBaseParser.TABLES - 99)) | (1 << (SqlBaseParser.SCHEMAS - 99)) | (1 << (SqlBaseParser.CATALOGS - 99)) | (1 << (SqlBaseParser.COLUMNS - 99)) | (1 << (SqlBaseParser.COLUMN - 99)) | (1 << (SqlBaseParser.USE - 99)) | (1 << (SqlBaseParser.PARTITIONS - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (SqlBaseParser.FUNCTIONS - 131)) | (1 << (SqlBaseParser.TO - 131)) | (1 << (SqlBaseParser.SYSTEM - 131)) | (1 << (SqlBaseParser.BERNOULLI - 131)) | (1 << (SqlBaseParser.POISSONIZED - 131)) | (1 << (SqlBaseParser.TABLESAMPLE - 131)) | (1 << (SqlBaseParser.ARRAY - 131)) | (1 << (SqlBaseParser.MAP - 131)) | (1 << (SqlBaseParser.SET - 131)) | (1 << (SqlBaseParser.RESET - 131)) | (1 << (SqlBaseParser.SESSION - 131)) | (1 << (SqlBaseParser.DATA - 131)) | (1 << (SqlBaseParser.START - 131)) | (1 << (SqlBaseParser.TRANSACTION - 131)) | (1 << (SqlBaseParser.COMMIT - 131)) | (1 << (SqlBaseParser.ROLLBACK - 131)) | (1 << (SqlBaseParser.WORK - 131)) | (1 << (SqlBaseParser.ISOLATION - 131)) | (1 << (SqlBaseParser.LEVEL - 131)) | (1 << (SqlBaseParser.SERIALIZABLE - 131)) | (1 << (SqlBaseParser.REPEATABLE - 131)) | (1 << (SqlBaseParser.COMMITTED - 131)) | (1 << (SqlBaseParser.UNCOMMITTED - 131)) | (1 << (SqlBaseParser.READ - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (SqlBaseParser.WRITE - 163)) | (1 << (SqlBaseParser.ONLY - 163)) | (1 << (SqlBaseParser.CALL - 163)) | (1 << (SqlBaseParser.INPUT - 163)) | (1 << (SqlBaseParser.OUTPUT - 163)) | (1 << (SqlBaseParser.CASCADE - 163)) | (1 << (SqlBaseParser.RESTRICT - 163)) | (1 << (SqlBaseParser.INCLUDING - 163)) | (1 << (SqlBaseParser.EXCLUDING - 163)) | (1 << (SqlBaseParser.PROPERTIES - 163)) | (1 << (SqlBaseParser.NORMALIZE - 163)) | (1 << (SqlBaseParser.NFD - 163)) | (1 << (SqlBaseParser.NFC - 163)) | (1 << (SqlBaseParser.NFKD - 163)) | (1 << (SqlBaseParser.NFKC - 163)) | (1 << (SqlBaseParser.IF - 163)) | (1 << (SqlBaseParser.NULLIF - 163)) | (1 << (SqlBaseParser.COALESCE - 163)) | (1 << (SqlBaseParser.PLUS - 163)) | (1 << (SqlBaseParser.MINUS - 163)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) !== 0)) {
                this.state = 1115;
                this.expression();
                this.state = 1120;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 1116;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1117;
                    this.expression();
                    this.state = 1122;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1125;
            this.match(SqlBaseParser.T__7);
            break;

        case 24:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1126;
            this.identifier();
            break;

        case 25:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1127;
            localctx.name = this.match(SqlBaseParser.CURRENT_DATE);
            break;

        case 26:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1128;
            localctx.name = this.match(SqlBaseParser.CURRENT_TIME);
            this.state = 1132;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
            if(la_===1) {
                this.state = 1129;
                this.match(SqlBaseParser.T__1);
                this.state = 1130;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1131;
                this.match(SqlBaseParser.T__3);

            }
            break;

        case 27:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1134;
            localctx.name = this.match(SqlBaseParser.CURRENT_TIMESTAMP);
            this.state = 1138;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
            if(la_===1) {
                this.state = 1135;
                this.match(SqlBaseParser.T__1);
                this.state = 1136;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1137;
                this.match(SqlBaseParser.T__3);

            }
            break;

        case 28:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1140;
            localctx.name = this.match(SqlBaseParser.LOCALTIME);
            this.state = 1144;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
            if(la_===1) {
                this.state = 1141;
                this.match(SqlBaseParser.T__1);
                this.state = 1142;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1143;
                this.match(SqlBaseParser.T__3);

            }
            break;

        case 29:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1146;
            localctx.name = this.match(SqlBaseParser.LOCALTIMESTAMP);
            this.state = 1150;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
            if(la_===1) {
                this.state = 1147;
                this.match(SqlBaseParser.T__1);
                this.state = 1148;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1149;
                this.match(SqlBaseParser.T__3);

            }
            break;

        case 30:
            localctx = new SubstringContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1152;
            this.match(SqlBaseParser.SUBSTRING);
            this.state = 1153;
            this.match(SqlBaseParser.T__1);
            this.state = 1154;
            this.valueExpression(0);
            this.state = 1155;
            this.match(SqlBaseParser.FROM);
            this.state = 1156;
            this.valueExpression(0);
            this.state = 1159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FOR) {
                this.state = 1157;
                this.match(SqlBaseParser.FOR);
                this.state = 1158;
                this.valueExpression(0);
            }

            this.state = 1161;
            this.match(SqlBaseParser.T__3);
            break;

        case 31:
            localctx = new NormalizeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1163;
            this.match(SqlBaseParser.NORMALIZE);
            this.state = 1164;
            this.match(SqlBaseParser.T__1);
            this.state = 1165;
            this.valueExpression(0);
            this.state = 1168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__2) {
                this.state = 1166;
                this.match(SqlBaseParser.T__2);
                this.state = 1167;
                this.normalForm();
            }

            this.state = 1170;
            this.match(SqlBaseParser.T__3);
            break;

        case 32:
            localctx = new ExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1172;
            this.match(SqlBaseParser.EXTRACT);
            this.state = 1173;
            this.match(SqlBaseParser.T__1);
            this.state = 1174;
            this.identifier();
            this.state = 1175;
            this.match(SqlBaseParser.FROM);
            this.state = 1176;
            this.valueExpression(0);
            this.state = 1177;
            this.match(SqlBaseParser.T__3);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1191;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1189;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 1181;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1182;
                    this.match(SqlBaseParser.T__6);
                    this.state = 1183;
                    localctx.index = this.valueExpression(0);
                    this.state = 1184;
                    this.match(SqlBaseParser.T__7);
                    break;

                case 2:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 1186;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1187;
                    this.match(SqlBaseParser.T__0);
                    this.state = 1188;
                    localctx.fieldName = this.identifier();
                    break;

                } 
            }
            this.state = 1193;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
        }

    } catch( error) {
        if(error instanceof _error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TimeZoneSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_timeZoneSpecifier;
    // return this;
}

TimeZoneSpecifierContext.prototype = Object.create(ParserRuleContext.prototype);
TimeZoneSpecifierContext.prototype.constructor = TimeZoneSpecifierContext;


 
TimeZoneSpecifierContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TimeZoneIntervalContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

TimeZoneIntervalContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneIntervalContext.prototype.constructor = TimeZoneIntervalContext;

SqlBaseParser.TimeZoneIntervalContext = TimeZoneIntervalContext;

TimeZoneIntervalContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneIntervalContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneIntervalContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
TimeZoneIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTimeZoneInterval(this);
	}
};

TimeZoneIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTimeZoneInterval(this);
	}
};

TimeZoneIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTimeZoneInterval(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function TimeZoneStringContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

TimeZoneStringContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneStringContext.prototype.constructor = TimeZoneStringContext;

SqlBaseParser.TimeZoneStringContext = TimeZoneStringContext;

TimeZoneStringContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneStringContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneStringContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
TimeZoneStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTimeZoneString(this);
	}
};

TimeZoneStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTimeZoneString(this);
	}
};

TimeZoneStringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTimeZoneString(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.TimeZoneSpecifierContext = TimeZoneSpecifierContext;

SqlBaseParser.prototype.timeZoneSpecifier = function() {

    var localctx = new TimeZoneSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SqlBaseParser.RULE_timeZoneSpecifier);
    try {
        this.state = 1200;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TimeZoneIntervalContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1194;
            this.match(SqlBaseParser.TIME);
            this.state = 1195;
            this.match(SqlBaseParser.ZONE);
            this.state = 1196;
            this.interval();
            break;

        case 2:
            localctx = new TimeZoneStringContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1197;
            this.match(SqlBaseParser.TIME);
            this.state = 1198;
            this.match(SqlBaseParser.ZONE);
            this.state = 1199;
            this.match(SqlBaseParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    // return this;
}

ComparisonOperatorContext.prototype = Object.create(ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlBaseParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlBaseParser.GTE, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitComparisonOperator(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlBaseParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SqlBaseParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1202;
        _la = this._input.LA(1);
        if(!(((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (SqlBaseParser.EQ - 184)) | (1 << (SqlBaseParser.NEQ - 184)) | (1 << (SqlBaseParser.LT - 184)) | (1 << (SqlBaseParser.LTE - 184)) | (1 << (SqlBaseParser.GT - 184)) | (1 << (SqlBaseParser.GTE - 184)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonQuantifier;
    // return this;
}

ComparisonQuantifierContext.prototype = Object.create(ParserRuleContext.prototype);
ComparisonQuantifierContext.prototype.constructor = ComparisonQuantifierContext;

ComparisonQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

ComparisonQuantifierContext.prototype.SOME = function() {
    return this.getToken(SqlBaseParser.SOME, 0);
};

ComparisonQuantifierContext.prototype.ANY = function() {
    return this.getToken(SqlBaseParser.ANY, 0);
};

ComparisonQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterComparisonQuantifier(this);
	}
};

ComparisonQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitComparisonQuantifier(this);
	}
};

ComparisonQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitComparisonQuantifier(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.ComparisonQuantifierContext = ComparisonQuantifierContext;

SqlBaseParser.prototype.comparisonQuantifier = function() {

    var localctx = new ComparisonQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SqlBaseParser.RULE_comparisonQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1204;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.SOME) | (1 << SqlBaseParser.ANY))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    // return this;
}

BooleanValueContext.prototype = Object.create(ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

BooleanValueContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

BooleanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBooleanValue(this);
	}
};

BooleanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBooleanValue(this);
	}
};

BooleanValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBooleanValue(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.BooleanValueContext = BooleanValueContext;

SqlBaseParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SqlBaseParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1206;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.TRUE || _la===SqlBaseParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_interval;
    this.sign = null; // Token
    this.from = null; // IntervalFieldContext
    this.to = null; // IntervalFieldContext
    // return this;
}

IntervalContext.prototype = Object.create(ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

IntervalContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

IntervalContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};

IntervalContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

IntervalContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

IntervalContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitInterval(this);
	}
};

IntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitInterval(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.IntervalContext = IntervalContext;

SqlBaseParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SqlBaseParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1208;
        this.match(SqlBaseParser.INTERVAL);
        this.state = 1210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
            this.state = 1209;
            localctx.sign = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.sign = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1212;
        this.match(SqlBaseParser.STRING);
        this.state = 1213;
        localctx.from = this.intervalField();
        this.state = 1216;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        if(la_===1) {
            this.state = 1214;
            this.match(SqlBaseParser.TO);
            this.state = 1215;
            localctx.to = this.intervalField();

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalField;
    // return this;
}

IntervalFieldContext.prototype = Object.create(ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;

IntervalFieldContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

IntervalFieldContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

IntervalFieldContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

IntervalFieldContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

IntervalFieldContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

IntervalFieldContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

IntervalFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterIntervalField(this);
	}
};

IntervalFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitIntervalField(this);
	}
};

IntervalFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitIntervalField(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.IntervalFieldContext = IntervalFieldContext;

SqlBaseParser.prototype.intervalField = function() {

    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlBaseParser.RULE_intervalField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1218;
        _la = this._input.LA(1);
        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SqlBaseParser.YEAR - 57)) | (1 << (SqlBaseParser.MONTH - 57)) | (1 << (SqlBaseParser.DAY - 57)) | (1 << (SqlBaseParser.HOUR - 57)) | (1 << (SqlBaseParser.MINUTE - 57)) | (1 << (SqlBaseParser.SECOND - 57)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_type;
    // return this;
}

TypeContext.prototype = Object.create(ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

TypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

TypeContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

TypeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitType(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, SqlBaseParser.RULE_type, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1221;
            this.match(SqlBaseParser.ARRAY);
            this.state = 1222;
            this.match(SqlBaseParser.LT);
            this.state = 1223;
            this.type(0);
            this.state = 1224;
            this.match(SqlBaseParser.GT);
            break;

        case 2:
            this.state = 1226;
            this.match(SqlBaseParser.MAP);
            this.state = 1227;
            this.match(SqlBaseParser.LT);
            this.state = 1228;
            this.type(0);
            this.state = 1229;
            this.match(SqlBaseParser.T__2);
            this.state = 1230;
            this.type(0);
            this.state = 1231;
            this.match(SqlBaseParser.GT);
            break;

        case 3:
            this.state = 1233;
            this.match(SqlBaseParser.ROW);
            this.state = 1234;
            this.match(SqlBaseParser.T__1);
            this.state = 1235;
            this.identifier();
            this.state = 1236;
            this.type(0);
            this.state = 1243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1237;
                this.match(SqlBaseParser.T__2);
                this.state = 1238;
                this.identifier();
                this.state = 1239;
                this.type(0);
                this.state = 1245;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1246;
            this.match(SqlBaseParser.T__3);
            break;

        case 4:
            this.state = 1248;
            this.baseType();
            this.state = 1260;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            if(la_===1) {
                this.state = 1249;
                this.match(SqlBaseParser.T__1);
                this.state = 1250;
                this.typeParameter();
                this.state = 1255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 1251;
                    this.match(SqlBaseParser.T__2);
                    this.state = 1252;
                    this.typeParameter();
                    this.state = 1257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1258;
                this.match(SqlBaseParser.T__3);

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1268;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,154,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_type);
                this.state = 1264;
                if (!( this.precpred(this._ctx, 5))) {
                    throw new _error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                }
                this.state = 1265;
                this.match(SqlBaseParser.ARRAY); 
            }
            this.state = 1270;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,154,this._ctx);
        }

    } catch( error) {
        if(error instanceof _error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_typeParameter;
    // return this;
}

TypeParameterContext.prototype = Object.create(ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

TypeParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTypeParameter(this);
	}
};

TypeParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTypeParameter(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.TypeParameterContext = TypeParameterContext;

SqlBaseParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlBaseParser.RULE_typeParameter);
    try {
        this.state = 1273;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1271;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.TIME_WITH_TIME_ZONE:
        case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
        case SqlBaseParser.DOUBLE_PRECISION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1272;
            this.type(0);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_baseType;
    // return this;
}

BaseTypeContext.prototype = Object.create(ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.TIME_WITH_TIME_ZONE = function() {
    return this.getToken(SqlBaseParser.TIME_WITH_TIME_ZONE, 0);
};

BaseTypeContext.prototype.TIMESTAMP_WITH_TIME_ZONE = function() {
    return this.getToken(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, 0);
};

BaseTypeContext.prototype.DOUBLE_PRECISION = function() {
    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
};

BaseTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBaseType(this);
	}
};

BaseTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBaseType(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.BaseTypeContext = BaseTypeContext;

SqlBaseParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlBaseParser.RULE_baseType);
    try {
        this.state = 1279;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.TIME_WITH_TIME_ZONE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1275;
            this.match(SqlBaseParser.TIME_WITH_TIME_ZONE);
            break;
        case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1276;
            this.match(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE);
            break;
        case SqlBaseParser.DOUBLE_PRECISION:
            this.enterOuterAlt(localctx, 3);
            this.state = 1277;
            this.match(SqlBaseParser.DOUBLE_PRECISION);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 4);
            this.state = 1278;
            this.identifier();
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    // return this;
}

WhenClauseContext.prototype = Object.create(ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitWhenClause(this);
	}
};

WhenClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitWhenClause(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.WhenClauseContext = WhenClauseContext;

SqlBaseParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlBaseParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1281;
        this.match(SqlBaseParser.WHEN);
        this.state = 1282;
        localctx.condition = this.expression();
        this.state = 1283;
        this.match(SqlBaseParser.THEN);
        this.state = 1284;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_filter;
    // return this;
}

FilterContext.prototype = Object.create(ParserRuleContext.prototype);
FilterContext.prototype.constructor = FilterContext;

FilterContext.prototype.FILTER = function() {
    return this.getToken(SqlBaseParser.FILTER, 0);
};

FilterContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

FilterContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

FilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterFilter(this);
	}
};

FilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitFilter(this);
	}
};

FilterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitFilter(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.FilterContext = FilterContext;

SqlBaseParser.prototype.filter = function() {

    var localctx = new FilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlBaseParser.RULE_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1286;
        this.match(SqlBaseParser.FILTER);
        this.state = 1287;
        this.match(SqlBaseParser.T__1);
        this.state = 1288;
        this.match(SqlBaseParser.WHERE);
        this.state = 1289;
        this.booleanExpression(0);
        this.state = 1290;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_over;
    this._expression = null; // ExpressionContext
    this.partition = []; // of ExpressionContexts
    // return this;
}

OverContext.prototype = Object.create(ParserRuleContext.prototype);
OverContext.prototype.constructor = OverContext;

OverContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

OverContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

OverContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


OverContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

OverContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

OverContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

OverContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OverContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterOver(this);
	}
};

OverContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitOver(this);
	}
};

OverContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitOver(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.OverContext = OverContext;

SqlBaseParser.prototype.over = function() {

    var localctx = new OverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlBaseParser.RULE_over);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1292;
        this.match(SqlBaseParser.OVER);
        this.state = 1293;
        this.match(SqlBaseParser.T__1);
        this.state = 1304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PARTITION) {
            this.state = 1294;
            this.match(SqlBaseParser.PARTITION);
            this.state = 1295;
            this.match(SqlBaseParser.BY);
            this.state = 1296;
            localctx._expression = this.expression();
            localctx.partition.push(localctx._expression);
            this.state = 1301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1297;
                this.match(SqlBaseParser.T__2);
                this.state = 1298;
                localctx._expression = this.expression();
                localctx.partition.push(localctx._expression);
                this.state = 1303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ORDER) {
            this.state = 1306;
            this.match(SqlBaseParser.ORDER);
            this.state = 1307;
            this.match(SqlBaseParser.BY);
            this.state = 1308;
            this.sortItem();
            this.state = 1313;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1309;
                this.match(SqlBaseParser.T__2);
                this.state = 1310;
                this.sortItem();
                this.state = 1315;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
            this.state = 1318;
            this.windowFrame();
        }

        this.state = 1321;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    // return this;
}

WindowFrameContext.prototype = Object.create(ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    } else {
        return this.getTypedRuleContext(FrameBoundContext,i);
    }
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

WindowFrameContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

WindowFrameContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

WindowFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterWindowFrame(this);
	}
};

WindowFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitWindowFrame(this);
	}
};

WindowFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitWindowFrame(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.WindowFrameContext = WindowFrameContext;

SqlBaseParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlBaseParser.RULE_windowFrame);
    try {
        this.state = 1339;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1323;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 1324;
            localctx.start = this.frameBound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1325;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 1326;
            localctx.start = this.frameBound();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1327;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 1328;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1329;
            localctx.start = this.frameBound();
            this.state = 1330;
            this.match(SqlBaseParser.AND);
            this.state = 1331;
            localctx.end = this.frameBound();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1333;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 1334;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1335;
            localctx.start = this.frameBound();
            this.state = 1336;
            this.match(SqlBaseParser.AND);
            this.state = 1337;
            localctx.end = this.frameBound();
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_frameBound;
    // return this;
}

FrameBoundContext.prototype = Object.create(ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;


 
FrameBoundContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BoundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

BoundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
BoundedFrameContext.prototype.constructor = BoundedFrameContext;

SqlBaseParser.BoundedFrameContext = BoundedFrameContext;

BoundedFrameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BoundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

BoundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};
BoundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBoundedFrame(this);
	}
};

BoundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBoundedFrame(this);
	}
};

BoundedFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBoundedFrame(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function UnboundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

UnboundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
UnboundedFrameContext.prototype.constructor = UnboundedFrameContext;

SqlBaseParser.UnboundedFrameContext = UnboundedFrameContext;

UnboundedFrameContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

UnboundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

UnboundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};
UnboundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterUnboundedFrame(this);
	}
};

UnboundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitUnboundedFrame(this);
	}
};

UnboundedFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitUnboundedFrame(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function CurrentRowBoundContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

CurrentRowBoundContext.prototype = Object.create(FrameBoundContext.prototype);
CurrentRowBoundContext.prototype.constructor = CurrentRowBoundContext;

SqlBaseParser.CurrentRowBoundContext = CurrentRowBoundContext;

CurrentRowBoundContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

CurrentRowBoundContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};
CurrentRowBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterCurrentRowBound(this);
	}
};

CurrentRowBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitCurrentRowBound(this);
	}
};

CurrentRowBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitCurrentRowBound(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.FrameBoundContext = FrameBoundContext;

SqlBaseParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlBaseParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 1350;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1341;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 1342;
            localctx.boundType = this.match(SqlBaseParser.PRECEDING);
            break;

        case 2:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1343;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 1344;
            localctx.boundType = this.match(SqlBaseParser.FOLLOWING);
            break;

        case 3:
            localctx = new CurrentRowBoundContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1345;
            this.match(SqlBaseParser.CURRENT);
            this.state = 1346;
            this.match(SqlBaseParser.ROW);
            break;

        case 4:
            localctx = new BoundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1347;
            this.expression();
            this.state = 1348;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PRECEDING || _la===SqlBaseParser.FOLLOWING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplainOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_explainOption;
    // return this;
}

ExplainOptionContext.prototype = Object.create(ParserRuleContext.prototype);
ExplainOptionContext.prototype.constructor = ExplainOptionContext;


 
ExplainOptionContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainFormatContext(parser, ctx) {
	ExplainOptionContext.call(this, parser);
    this.value = null; // Token;
    ExplainOptionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ExplainFormatContext.prototype = Object.create(ExplainOptionContext.prototype);
ExplainFormatContext.prototype.constructor = ExplainFormatContext;

SqlBaseParser.ExplainFormatContext = ExplainFormatContext;

ExplainFormatContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

ExplainFormatContext.prototype.TEXT = function() {
    return this.getToken(SqlBaseParser.TEXT, 0);
};

ExplainFormatContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
};
ExplainFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExplainFormat(this);
	}
};

ExplainFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExplainFormat(this);
	}
};

ExplainFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExplainFormat(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ExplainTypeContext(parser, ctx) {
	ExplainOptionContext.call(this, parser);
    this.value = null; // Token;
    ExplainOptionContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ExplainTypeContext.prototype = Object.create(ExplainOptionContext.prototype);
ExplainTypeContext.prototype.constructor = ExplainTypeContext;

SqlBaseParser.ExplainTypeContext = ExplainTypeContext;

ExplainTypeContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

ExplainTypeContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

ExplainTypeContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
};
ExplainTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterExplainType(this);
	}
};

ExplainTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitExplainType(this);
	}
};

ExplainTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitExplainType(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.ExplainOptionContext = ExplainOptionContext;

SqlBaseParser.prototype.explainOption = function() {

    var localctx = new ExplainOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlBaseParser.RULE_explainOption);
    var _la = 0; // Token type
    try {
        this.state = 1356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.FORMAT:
            localctx = new ExplainFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1352;
            this.match(SqlBaseParser.FORMAT);
            this.state = 1353;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TEXT || _la===SqlBaseParser.GRAPHVIZ)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SqlBaseParser.TYPE:
            localctx = new ExplainTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1354;
            this.match(SqlBaseParser.TYPE);
            this.state = 1355;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.LOGICAL || _la===SqlBaseParser.DISTRIBUTED)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TransactionModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_transactionMode;
    // return this;
}

TransactionModeContext.prototype = Object.create(ParserRuleContext.prototype);
TransactionModeContext.prototype.constructor = TransactionModeContext;


 
TransactionModeContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TransactionAccessModeContext(parser, ctx) {
	TransactionModeContext.call(this, parser);
    this.accessMode = null; // Token;
    TransactionModeContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

TransactionAccessModeContext.prototype = Object.create(TransactionModeContext.prototype);
TransactionAccessModeContext.prototype.constructor = TransactionAccessModeContext;

SqlBaseParser.TransactionAccessModeContext = TransactionAccessModeContext;

TransactionAccessModeContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

TransactionAccessModeContext.prototype.ONLY = function() {
    return this.getToken(SqlBaseParser.ONLY, 0);
};

TransactionAccessModeContext.prototype.WRITE = function() {
    return this.getToken(SqlBaseParser.WRITE, 0);
};
TransactionAccessModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterTransactionAccessMode(this);
	}
};

TransactionAccessModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitTransactionAccessMode(this);
	}
};

TransactionAccessModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitTransactionAccessMode(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function IsolationLevelContext(parser, ctx) {
	TransactionModeContext.call(this, parser);
    TransactionModeContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

IsolationLevelContext.prototype = Object.create(TransactionModeContext.prototype);
IsolationLevelContext.prototype.constructor = IsolationLevelContext;

SqlBaseParser.IsolationLevelContext = IsolationLevelContext;

IsolationLevelContext.prototype.ISOLATION = function() {
    return this.getToken(SqlBaseParser.ISOLATION, 0);
};

IsolationLevelContext.prototype.LEVEL = function() {
    return this.getToken(SqlBaseParser.LEVEL, 0);
};

IsolationLevelContext.prototype.levelOfIsolation = function() {
    return this.getTypedRuleContext(LevelOfIsolationContext,0);
};
IsolationLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterIsolationLevel(this);
	}
};

IsolationLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitIsolationLevel(this);
	}
};

IsolationLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitIsolationLevel(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.TransactionModeContext = TransactionModeContext;

SqlBaseParser.prototype.transactionMode = function() {

    var localctx = new TransactionModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SqlBaseParser.RULE_transactionMode);
    var _la = 0; // Token type
    try {
        this.state = 1363;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ISOLATION:
            localctx = new IsolationLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1358;
            this.match(SqlBaseParser.ISOLATION);
            this.state = 1359;
            this.match(SqlBaseParser.LEVEL);
            this.state = 1360;
            this.levelOfIsolation();
            break;
        case SqlBaseParser.READ:
            localctx = new TransactionAccessModeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1361;
            this.match(SqlBaseParser.READ);
            this.state = 1362;
            localctx.accessMode = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.WRITE || _la===SqlBaseParser.ONLY)) {
                localctx.accessMode = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LevelOfIsolationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_levelOfIsolation;
    // return this;
}

LevelOfIsolationContext.prototype = Object.create(ParserRuleContext.prototype);
LevelOfIsolationContext.prototype.constructor = LevelOfIsolationContext;


 
LevelOfIsolationContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ReadUncommittedContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ReadUncommittedContext.prototype = Object.create(LevelOfIsolationContext.prototype);
ReadUncommittedContext.prototype.constructor = ReadUncommittedContext;

SqlBaseParser.ReadUncommittedContext = ReadUncommittedContext;

ReadUncommittedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

ReadUncommittedContext.prototype.UNCOMMITTED = function() {
    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
};
ReadUncommittedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterReadUncommitted(this);
	}
};

ReadUncommittedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitReadUncommitted(this);
	}
};

ReadUncommittedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitReadUncommitted(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function SerializableContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

SerializableContext.prototype = Object.create(LevelOfIsolationContext.prototype);
SerializableContext.prototype.constructor = SerializableContext;

SqlBaseParser.SerializableContext = SerializableContext;

SerializableContext.prototype.SERIALIZABLE = function() {
    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
};
SerializableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterSerializable(this);
	}
};

SerializableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitSerializable(this);
	}
};

SerializableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitSerializable(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function ReadCommittedContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

ReadCommittedContext.prototype = Object.create(LevelOfIsolationContext.prototype);
ReadCommittedContext.prototype.constructor = ReadCommittedContext;

SqlBaseParser.ReadCommittedContext = ReadCommittedContext;

ReadCommittedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

ReadCommittedContext.prototype.COMMITTED = function() {
    return this.getToken(SqlBaseParser.COMMITTED, 0);
};
ReadCommittedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterReadCommitted(this);
	}
};

ReadCommittedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitReadCommitted(this);
	}
};

ReadCommittedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitReadCommitted(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function RepeatableReadContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

RepeatableReadContext.prototype = Object.create(LevelOfIsolationContext.prototype);
RepeatableReadContext.prototype.constructor = RepeatableReadContext;

SqlBaseParser.RepeatableReadContext = RepeatableReadContext;

RepeatableReadContext.prototype.REPEATABLE = function() {
    return this.getToken(SqlBaseParser.REPEATABLE, 0);
};

RepeatableReadContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};
RepeatableReadContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterRepeatableRead(this);
	}
};

RepeatableReadContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitRepeatableRead(this);
	}
};

RepeatableReadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitRepeatableRead(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.LevelOfIsolationContext = LevelOfIsolationContext;

SqlBaseParser.prototype.levelOfIsolation = function() {

    var localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SqlBaseParser.RULE_levelOfIsolation);
    try {
        this.state = 1372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ReadUncommittedContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1365;
            this.match(SqlBaseParser.READ);
            this.state = 1366;
            this.match(SqlBaseParser.UNCOMMITTED);
            break;

        case 2:
            localctx = new ReadCommittedContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1367;
            this.match(SqlBaseParser.READ);
            this.state = 1368;
            this.match(SqlBaseParser.COMMITTED);
            break;

        case 3:
            localctx = new RepeatableReadContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1369;
            this.match(SqlBaseParser.REPEATABLE);
            this.state = 1370;
            this.match(SqlBaseParser.READ);
            break;

        case 4:
            localctx = new SerializableContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1371;
            this.match(SqlBaseParser.SERIALIZABLE);
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_callArgument;
    // return this;
}

CallArgumentContext.prototype = Object.create(ParserRuleContext.prototype);
CallArgumentContext.prototype.constructor = CallArgumentContext;


 
CallArgumentContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PositionalArgumentContext(parser, ctx) {
	CallArgumentContext.call(this, parser);
    CallArgumentContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

PositionalArgumentContext.prototype = Object.create(CallArgumentContext.prototype);
PositionalArgumentContext.prototype.constructor = PositionalArgumentContext;

SqlBaseParser.PositionalArgumentContext = PositionalArgumentContext;

PositionalArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PositionalArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterPositionalArgument(this);
	}
};

PositionalArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitPositionalArgument(this);
	}
};

PositionalArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitPositionalArgument(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function NamedArgumentContext(parser, ctx) {
	CallArgumentContext.call(this, parser);
    CallArgumentContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

NamedArgumentContext.prototype = Object.create(CallArgumentContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

SqlBaseParser.NamedArgumentContext = NamedArgumentContext;

NamedArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNamedArgument(this);
	}
};

NamedArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNamedArgument(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.CallArgumentContext = CallArgumentContext;

SqlBaseParser.prototype.callArgument = function() {

    var localctx = new CallArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SqlBaseParser.RULE_callArgument);
    try {
        this.state = 1379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PositionalArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1374;
            this.expression();
            break;

        case 2:
            localctx = new NamedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1375;
            this.identifier();
            this.state = 1376;
            this.match(SqlBaseParser.T__8);
            this.state = 1377;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_privilege;
    // return this;
}

PrivilegeContext.prototype = Object.create(ParserRuleContext.prototype);
PrivilegeContext.prototype.constructor = PrivilegeContext;

PrivilegeContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

PrivilegeContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

PrivilegeContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

PrivilegeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterPrivilege(this);
	}
};

PrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitPrivilege(this);
	}
};

PrivilegeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitPrivilege(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.PrivilegeContext = PrivilegeContext;

SqlBaseParser.prototype.privilege = function() {

    var localctx = new PrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SqlBaseParser.RULE_privilege);
    try {
        this.state = 1385;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1381;
            this.match(SqlBaseParser.SELECT);
            break;
        case SqlBaseParser.DELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1382;
            this.match(SqlBaseParser.DELETE);
            break;
        case SqlBaseParser.INSERT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1383;
            this.match(SqlBaseParser.INSERT);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 4);
            this.state = 1384;
            this.identifier();
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    // return this;
}

QualifiedNameContext.prototype = Object.create(ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQualifiedName(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.QualifiedNameContext = QualifiedNameContext;

SqlBaseParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SqlBaseParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1387;
        this.identifier();
        this.state = 1392;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
        while(_alt!=2 && _alt!=_atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1388;
                this.match(SqlBaseParser.T__0);
                this.state = 1389;
                this.identifier(); 
            }
            this.state = 1394;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
        }

    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifier;
    // return this;
}

IdentifierContext.prototype = Object.create(ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BackQuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

BackQuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
BackQuotedIdentifierContext.prototype.constructor = BackQuotedIdentifierContext;

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

BackQuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
};
BackQuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitBackQuotedIdentifier(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(IdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

SqlBaseParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function() {
    return this.getTypedRuleContext(QuotedIdentifierContext,0);
};
QuotedIdentifierAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQuotedIdentifierAlternative(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function DigitIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DigitIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
DigitIdentifierContext.prototype.constructor = DigitIdentifierContext;

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

DigitIdentifierContext.prototype.DIGIT_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
};
DigitIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDigitIdentifier(this);
	}
};

DigitIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDigitIdentifier(this);
	}
};

DigitIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDigitIdentifier(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function UnquotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

UnquotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitUnquotedIdentifier(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.IdentifierContext = IdentifierContext;

SqlBaseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SqlBaseParser.RULE_identifier);
    try {
        this.state = 1400;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.IDENTIFIER:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1395;
            this.match(SqlBaseParser.IDENTIFIER);
            break;
        case SqlBaseParser.QUOTED_IDENTIFIER:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1396;
            this.quotedIdentifier();
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1397;
            this.nonReserved();
            break;
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new BackQuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1398;
            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
            break;
        case SqlBaseParser.DIGIT_IDENTIFIER:
            localctx = new DigitIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1399;
            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_quotedIdentifier;
    // return this;
}

QuotedIdentifierContext.prototype = Object.create(ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
};

QuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitQuotedIdentifier(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

SqlBaseParser.prototype.quotedIdentifier = function() {

    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SqlBaseParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1402;
        this.match(SqlBaseParser.QUOTED_IDENTIFIER);
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_number;
    // return this;
}

NumberContext.prototype = Object.create(ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;


 
NumberContext.prototype.copyFrom = function(ctx) {
    ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitDecimalLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};


function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    // return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitIntegerLiteral(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};



SqlBaseParser.NumberContext = NumberContext;

SqlBaseParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SqlBaseParser.RULE_number);
    try {
        this.state = 1406;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.DECIMAL_VALUE:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1404;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;
        case SqlBaseParser.INTEGER_VALUE:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1405;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    // return this;
}

NonReservedContext.prototype = Object.create(ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.SCHEMAS = function() {
    return this.getToken(SqlBaseParser.SCHEMAS, 0);
};

NonReservedContext.prototype.CATALOGS = function() {
    return this.getToken(SqlBaseParser.CATALOGS, 0);
};

NonReservedContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

NonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

NonReservedContext.prototype.FILTER = function() {
    return this.getToken(SqlBaseParser.FILTER, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

NonReservedContext.prototype.TINYINT = function() {
    return this.getToken(SqlBaseParser.TINYINT, 0);
};

NonReservedContext.prototype.SMALLINT = function() {
    return this.getToken(SqlBaseParser.SMALLINT, 0);
};

NonReservedContext.prototype.INTEGER = function() {
    return this.getToken(SqlBaseParser.INTEGER, 0);
};

NonReservedContext.prototype.DATE = function() {
    return this.getToken(SqlBaseParser.DATE, 0);
};

NonReservedContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

NonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

NonReservedContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

NonReservedContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

NonReservedContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

NonReservedContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

NonReservedContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

NonReservedContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

NonReservedContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

NonReservedContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

NonReservedContext.prototype.TEXT = function() {
    return this.getToken(SqlBaseParser.TEXT, 0);
};

NonReservedContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

NonReservedContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.SYSTEM = function() {
    return this.getToken(SqlBaseParser.SYSTEM, 0);
};

NonReservedContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlBaseParser.BERNOULLI, 0);
};

NonReservedContext.prototype.POISSONIZED = function() {
    return this.getToken(SqlBaseParser.POISSONIZED, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

NonReservedContext.prototype.NULLIF = function() {
    return this.getToken(SqlBaseParser.NULLIF, 0);
};

NonReservedContext.prototype.COALESCE = function() {
    return this.getToken(SqlBaseParser.COALESCE, 0);
};

NonReservedContext.prototype.normalForm = function() {
    return this.getTypedRuleContext(NormalFormContext,0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

NonReservedContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};

NonReservedContext.prototype.ISOLATION = function() {
    return this.getToken(SqlBaseParser.ISOLATION, 0);
};

NonReservedContext.prototype.LEVEL = function() {
    return this.getToken(SqlBaseParser.LEVEL, 0);
};

NonReservedContext.prototype.SERIALIZABLE = function() {
    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
};

NonReservedContext.prototype.REPEATABLE = function() {
    return this.getToken(SqlBaseParser.REPEATABLE, 0);
};

NonReservedContext.prototype.COMMITTED = function() {
    return this.getToken(SqlBaseParser.COMMITTED, 0);
};

NonReservedContext.prototype.UNCOMMITTED = function() {
    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
};

NonReservedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

NonReservedContext.prototype.WRITE = function() {
    return this.getToken(SqlBaseParser.WRITE, 0);
};

NonReservedContext.prototype.ONLY = function() {
    return this.getToken(SqlBaseParser.ONLY, 0);
};

NonReservedContext.prototype.CALL = function() {
    return this.getToken(SqlBaseParser.CALL, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

NonReservedContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

NonReservedContext.prototype.PUBLIC = function() {
    return this.getToken(SqlBaseParser.PUBLIC, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

NonReservedContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

NonReservedContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

NonReservedContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

NonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

NonReservedContext.prototype.INPUT = function() {
    return this.getToken(SqlBaseParser.INPUT, 0);
};

NonReservedContext.prototype.OUTPUT = function() {
    return this.getToken(SqlBaseParser.OUTPUT, 0);
};

NonReservedContext.prototype.INCLUDING = function() {
    return this.getToken(SqlBaseParser.INCLUDING, 0);
};

NonReservedContext.prototype.EXCLUDING = function() {
    return this.getToken(SqlBaseParser.EXCLUDING, 0);
};

NonReservedContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlBaseParser.PROPERTIES, 0);
};

NonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNonReserved(this);
	}
};

NonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNonReserved(this);
	}
};

NonReservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNonReserved(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.NonReservedContext = NonReservedContext;

SqlBaseParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SqlBaseParser.RULE_nonReserved);
    try {
        this.state = 1497;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SHOW:
            this.enterOuterAlt(localctx, 1);
            this.state = 1408;
            this.match(SqlBaseParser.SHOW);
            break;
        case SqlBaseParser.TABLES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1409;
            this.match(SqlBaseParser.TABLES);
            break;
        case SqlBaseParser.COLUMNS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1410;
            this.match(SqlBaseParser.COLUMNS);
            break;
        case SqlBaseParser.COLUMN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1411;
            this.match(SqlBaseParser.COLUMN);
            break;
        case SqlBaseParser.PARTITIONS:
            this.enterOuterAlt(localctx, 5);
            this.state = 1412;
            this.match(SqlBaseParser.PARTITIONS);
            break;
        case SqlBaseParser.FUNCTIONS:
            this.enterOuterAlt(localctx, 6);
            this.state = 1413;
            this.match(SqlBaseParser.FUNCTIONS);
            break;
        case SqlBaseParser.SCHEMAS:
            this.enterOuterAlt(localctx, 7);
            this.state = 1414;
            this.match(SqlBaseParser.SCHEMAS);
            break;
        case SqlBaseParser.CATALOGS:
            this.enterOuterAlt(localctx, 8);
            this.state = 1415;
            this.match(SqlBaseParser.CATALOGS);
            break;
        case SqlBaseParser.SESSION:
            this.enterOuterAlt(localctx, 9);
            this.state = 1416;
            this.match(SqlBaseParser.SESSION);
            break;
        case SqlBaseParser.ADD:
            this.enterOuterAlt(localctx, 10);
            this.state = 1417;
            this.match(SqlBaseParser.ADD);
            break;
        case SqlBaseParser.FILTER:
            this.enterOuterAlt(localctx, 11);
            this.state = 1418;
            this.match(SqlBaseParser.FILTER);
            break;
        case SqlBaseParser.OVER:
            this.enterOuterAlt(localctx, 12);
            this.state = 1419;
            this.match(SqlBaseParser.OVER);
            break;
        case SqlBaseParser.PARTITION:
            this.enterOuterAlt(localctx, 13);
            this.state = 1420;
            this.match(SqlBaseParser.PARTITION);
            break;
        case SqlBaseParser.RANGE:
            this.enterOuterAlt(localctx, 14);
            this.state = 1421;
            this.match(SqlBaseParser.RANGE);
            break;
        case SqlBaseParser.ROWS:
            this.enterOuterAlt(localctx, 15);
            this.state = 1422;
            this.match(SqlBaseParser.ROWS);
            break;
        case SqlBaseParser.PRECEDING:
            this.enterOuterAlt(localctx, 16);
            this.state = 1423;
            this.match(SqlBaseParser.PRECEDING);
            break;
        case SqlBaseParser.FOLLOWING:
            this.enterOuterAlt(localctx, 17);
            this.state = 1424;
            this.match(SqlBaseParser.FOLLOWING);
            break;
        case SqlBaseParser.CURRENT:
            this.enterOuterAlt(localctx, 18);
            this.state = 1425;
            this.match(SqlBaseParser.CURRENT);
            break;
        case SqlBaseParser.ROW:
            this.enterOuterAlt(localctx, 19);
            this.state = 1426;
            this.match(SqlBaseParser.ROW);
            break;
        case SqlBaseParser.MAP:
            this.enterOuterAlt(localctx, 20);
            this.state = 1427;
            this.match(SqlBaseParser.MAP);
            break;
        case SqlBaseParser.ARRAY:
            this.enterOuterAlt(localctx, 21);
            this.state = 1428;
            this.match(SqlBaseParser.ARRAY);
            break;
        case SqlBaseParser.TINYINT:
            this.enterOuterAlt(localctx, 22);
            this.state = 1429;
            this.match(SqlBaseParser.TINYINT);
            break;
        case SqlBaseParser.SMALLINT:
            this.enterOuterAlt(localctx, 23);
            this.state = 1430;
            this.match(SqlBaseParser.SMALLINT);
            break;
        case SqlBaseParser.INTEGER:
            this.enterOuterAlt(localctx, 24);
            this.state = 1431;
            this.match(SqlBaseParser.INTEGER);
            break;
        case SqlBaseParser.DATE:
            this.enterOuterAlt(localctx, 25);
            this.state = 1432;
            this.match(SqlBaseParser.DATE);
            break;
        case SqlBaseParser.TIME:
            this.enterOuterAlt(localctx, 26);
            this.state = 1433;
            this.match(SqlBaseParser.TIME);
            break;
        case SqlBaseParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 27);
            this.state = 1434;
            this.match(SqlBaseParser.TIMESTAMP);
            break;
        case SqlBaseParser.INTERVAL:
            this.enterOuterAlt(localctx, 28);
            this.state = 1435;
            this.match(SqlBaseParser.INTERVAL);
            break;
        case SqlBaseParser.ZONE:
            this.enterOuterAlt(localctx, 29);
            this.state = 1436;
            this.match(SqlBaseParser.ZONE);
            break;
        case SqlBaseParser.YEAR:
            this.enterOuterAlt(localctx, 30);
            this.state = 1437;
            this.match(SqlBaseParser.YEAR);
            break;
        case SqlBaseParser.MONTH:
            this.enterOuterAlt(localctx, 31);
            this.state = 1438;
            this.match(SqlBaseParser.MONTH);
            break;
        case SqlBaseParser.DAY:
            this.enterOuterAlt(localctx, 32);
            this.state = 1439;
            this.match(SqlBaseParser.DAY);
            break;
        case SqlBaseParser.HOUR:
            this.enterOuterAlt(localctx, 33);
            this.state = 1440;
            this.match(SqlBaseParser.HOUR);
            break;
        case SqlBaseParser.MINUTE:
            this.enterOuterAlt(localctx, 34);
            this.state = 1441;
            this.match(SqlBaseParser.MINUTE);
            break;
        case SqlBaseParser.SECOND:
            this.enterOuterAlt(localctx, 35);
            this.state = 1442;
            this.match(SqlBaseParser.SECOND);
            break;
        case SqlBaseParser.EXPLAIN:
            this.enterOuterAlt(localctx, 36);
            this.state = 1443;
            this.match(SqlBaseParser.EXPLAIN);
            break;
        case SqlBaseParser.ANALYZE:
            this.enterOuterAlt(localctx, 37);
            this.state = 1444;
            this.match(SqlBaseParser.ANALYZE);
            break;
        case SqlBaseParser.FORMAT:
            this.enterOuterAlt(localctx, 38);
            this.state = 1445;
            this.match(SqlBaseParser.FORMAT);
            break;
        case SqlBaseParser.TYPE:
            this.enterOuterAlt(localctx, 39);
            this.state = 1446;
            this.match(SqlBaseParser.TYPE);
            break;
        case SqlBaseParser.TEXT:
            this.enterOuterAlt(localctx, 40);
            this.state = 1447;
            this.match(SqlBaseParser.TEXT);
            break;
        case SqlBaseParser.GRAPHVIZ:
            this.enterOuterAlt(localctx, 41);
            this.state = 1448;
            this.match(SqlBaseParser.GRAPHVIZ);
            break;
        case SqlBaseParser.LOGICAL:
            this.enterOuterAlt(localctx, 42);
            this.state = 1449;
            this.match(SqlBaseParser.LOGICAL);
            break;
        case SqlBaseParser.DISTRIBUTED:
            this.enterOuterAlt(localctx, 43);
            this.state = 1450;
            this.match(SqlBaseParser.DISTRIBUTED);
            break;
        case SqlBaseParser.TABLESAMPLE:
            this.enterOuterAlt(localctx, 44);
            this.state = 1451;
            this.match(SqlBaseParser.TABLESAMPLE);
            break;
        case SqlBaseParser.SYSTEM:
            this.enterOuterAlt(localctx, 45);
            this.state = 1452;
            this.match(SqlBaseParser.SYSTEM);
            break;
        case SqlBaseParser.BERNOULLI:
            this.enterOuterAlt(localctx, 46);
            this.state = 1453;
            this.match(SqlBaseParser.BERNOULLI);
            break;
        case SqlBaseParser.POISSONIZED:
            this.enterOuterAlt(localctx, 47);
            this.state = 1454;
            this.match(SqlBaseParser.POISSONIZED);
            break;
        case SqlBaseParser.USE:
            this.enterOuterAlt(localctx, 48);
            this.state = 1455;
            this.match(SqlBaseParser.USE);
            break;
        case SqlBaseParser.TO:
            this.enterOuterAlt(localctx, 49);
            this.state = 1456;
            this.match(SqlBaseParser.TO);
            break;
        case SqlBaseParser.SET:
            this.enterOuterAlt(localctx, 50);
            this.state = 1457;
            this.match(SqlBaseParser.SET);
            break;
        case SqlBaseParser.RESET:
            this.enterOuterAlt(localctx, 51);
            this.state = 1458;
            this.match(SqlBaseParser.RESET);
            break;
        case SqlBaseParser.VIEW:
            this.enterOuterAlt(localctx, 52);
            this.state = 1459;
            this.match(SqlBaseParser.VIEW);
            break;
        case SqlBaseParser.REPLACE:
            this.enterOuterAlt(localctx, 53);
            this.state = 1460;
            this.match(SqlBaseParser.REPLACE);
            break;
        case SqlBaseParser.IF:
            this.enterOuterAlt(localctx, 54);
            this.state = 1461;
            this.match(SqlBaseParser.IF);
            break;
        case SqlBaseParser.NULLIF:
            this.enterOuterAlt(localctx, 55);
            this.state = 1462;
            this.match(SqlBaseParser.NULLIF);
            break;
        case SqlBaseParser.COALESCE:
            this.enterOuterAlt(localctx, 56);
            this.state = 1463;
            this.match(SqlBaseParser.COALESCE);
            break;
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
            this.enterOuterAlt(localctx, 57);
            this.state = 1464;
            this.normalForm();
            break;
        case SqlBaseParser.POSITION:
            this.enterOuterAlt(localctx, 58);
            this.state = 1465;
            this.match(SqlBaseParser.POSITION);
            break;
        case SqlBaseParser.NO:
            this.enterOuterAlt(localctx, 59);
            this.state = 1466;
            this.match(SqlBaseParser.NO);
            break;
        case SqlBaseParser.DATA:
            this.enterOuterAlt(localctx, 60);
            this.state = 1467;
            this.match(SqlBaseParser.DATA);
            break;
        case SqlBaseParser.START:
            this.enterOuterAlt(localctx, 61);
            this.state = 1468;
            this.match(SqlBaseParser.START);
            break;
        case SqlBaseParser.TRANSACTION:
            this.enterOuterAlt(localctx, 62);
            this.state = 1469;
            this.match(SqlBaseParser.TRANSACTION);
            break;
        case SqlBaseParser.COMMIT:
            this.enterOuterAlt(localctx, 63);
            this.state = 1470;
            this.match(SqlBaseParser.COMMIT);
            break;
        case SqlBaseParser.ROLLBACK:
            this.enterOuterAlt(localctx, 64);
            this.state = 1471;
            this.match(SqlBaseParser.ROLLBACK);
            break;
        case SqlBaseParser.WORK:
            this.enterOuterAlt(localctx, 65);
            this.state = 1472;
            this.match(SqlBaseParser.WORK);
            break;
        case SqlBaseParser.ISOLATION:
            this.enterOuterAlt(localctx, 66);
            this.state = 1473;
            this.match(SqlBaseParser.ISOLATION);
            break;
        case SqlBaseParser.LEVEL:
            this.enterOuterAlt(localctx, 67);
            this.state = 1474;
            this.match(SqlBaseParser.LEVEL);
            break;
        case SqlBaseParser.SERIALIZABLE:
            this.enterOuterAlt(localctx, 68);
            this.state = 1475;
            this.match(SqlBaseParser.SERIALIZABLE);
            break;
        case SqlBaseParser.REPEATABLE:
            this.enterOuterAlt(localctx, 69);
            this.state = 1476;
            this.match(SqlBaseParser.REPEATABLE);
            break;
        case SqlBaseParser.COMMITTED:
            this.enterOuterAlt(localctx, 70);
            this.state = 1477;
            this.match(SqlBaseParser.COMMITTED);
            break;
        case SqlBaseParser.UNCOMMITTED:
            this.enterOuterAlt(localctx, 71);
            this.state = 1478;
            this.match(SqlBaseParser.UNCOMMITTED);
            break;
        case SqlBaseParser.READ:
            this.enterOuterAlt(localctx, 72);
            this.state = 1479;
            this.match(SqlBaseParser.READ);
            break;
        case SqlBaseParser.WRITE:
            this.enterOuterAlt(localctx, 73);
            this.state = 1480;
            this.match(SqlBaseParser.WRITE);
            break;
        case SqlBaseParser.ONLY:
            this.enterOuterAlt(localctx, 74);
            this.state = 1481;
            this.match(SqlBaseParser.ONLY);
            break;
        case SqlBaseParser.CALL:
            this.enterOuterAlt(localctx, 75);
            this.state = 1482;
            this.match(SqlBaseParser.CALL);
            break;
        case SqlBaseParser.GRANT:
            this.enterOuterAlt(localctx, 76);
            this.state = 1483;
            this.match(SqlBaseParser.GRANT);
            break;
        case SqlBaseParser.REVOKE:
            this.enterOuterAlt(localctx, 77);
            this.state = 1484;
            this.match(SqlBaseParser.REVOKE);
            break;
        case SqlBaseParser.PRIVILEGES:
            this.enterOuterAlt(localctx, 78);
            this.state = 1485;
            this.match(SqlBaseParser.PRIVILEGES);
            break;
        case SqlBaseParser.PUBLIC:
            this.enterOuterAlt(localctx, 79);
            this.state = 1486;
            this.match(SqlBaseParser.PUBLIC);
            break;
        case SqlBaseParser.OPTION:
            this.enterOuterAlt(localctx, 80);
            this.state = 1487;
            this.match(SqlBaseParser.OPTION);
            break;
        case SqlBaseParser.SUBSTRING:
            this.enterOuterAlt(localctx, 81);
            this.state = 1488;
            this.match(SqlBaseParser.SUBSTRING);
            break;
        case SqlBaseParser.SCHEMA:
            this.enterOuterAlt(localctx, 82);
            this.state = 1489;
            this.match(SqlBaseParser.SCHEMA);
            break;
        case SqlBaseParser.CASCADE:
            this.enterOuterAlt(localctx, 83);
            this.state = 1490;
            this.match(SqlBaseParser.CASCADE);
            break;
        case SqlBaseParser.RESTRICT:
            this.enterOuterAlt(localctx, 84);
            this.state = 1491;
            this.match(SqlBaseParser.RESTRICT);
            break;
        case SqlBaseParser.INPUT:
            this.enterOuterAlt(localctx, 85);
            this.state = 1492;
            this.match(SqlBaseParser.INPUT);
            break;
        case SqlBaseParser.OUTPUT:
            this.enterOuterAlt(localctx, 86);
            this.state = 1493;
            this.match(SqlBaseParser.OUTPUT);
            break;
        case SqlBaseParser.INCLUDING:
            this.enterOuterAlt(localctx, 87);
            this.state = 1494;
            this.match(SqlBaseParser.INCLUDING);
            break;
        case SqlBaseParser.EXCLUDING:
            this.enterOuterAlt(localctx, 88);
            this.state = 1495;
            this.match(SqlBaseParser.EXCLUDING);
            break;
        case SqlBaseParser.PROPERTIES:
            this.enterOuterAlt(localctx, 89);
            this.state = 1496;
            this.match(SqlBaseParser.PROPERTIES);
            break;
        default:
            throw new _error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NormalFormContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_normalForm;
    // return this;
}

NormalFormContext.prototype = Object.create(ParserRuleContext.prototype);
NormalFormContext.prototype.constructor = NormalFormContext;

NormalFormContext.prototype.NFD = function() {
    return this.getToken(SqlBaseParser.NFD, 0);
};

NormalFormContext.prototype.NFC = function() {
    return this.getToken(SqlBaseParser.NFC, 0);
};

NormalFormContext.prototype.NFKD = function() {
    return this.getToken(SqlBaseParser.NFKD, 0);
};

NormalFormContext.prototype.NFKC = function() {
    return this.getToken(SqlBaseParser.NFKC, 0);
};

NormalFormContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).enterNormalForm(this);
	}
};

NormalFormContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        (listener as any).exitNormalForm(this);
	}
};

NormalFormContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SqlBaseVisitor ) {
        return (visitor as any).visitNormalForm(this);
    } else {
        return (visitor as any).visitChildren(this);
    }
};




SqlBaseParser.NormalFormContext = NormalFormContext;

SqlBaseParser.prototype.normalForm = function() {

    var localctx = new NormalFormContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SqlBaseParser.RULE_normalForm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        _la = this._input.LA(1);
        if(!(((((_la - 177)) & ~0x1f) == 0 && ((1 << (_la - 177)) & ((1 << (SqlBaseParser.NFD - 177)) | (1 << (SqlBaseParser.NFC - 177)) | (1 << (SqlBaseParser.NFKD - 177)) | (1 << (SqlBaseParser.NFKC - 177)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof _error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlBaseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 12:
			return this.queryTerm_sempred(localctx, predIndex);
	case 23:
			return this.relation_sempred(localctx, predIndex);
	case 32:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 35:
			return this.valueExpression_sempred(localctx, predIndex);
	case 36:
			return this.primaryExpression_sempred(localctx, predIndex);
	case 43:
			return this.type_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlBaseParser.prototype.queryTerm_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.relation_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		case 8:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 11);
		case 10:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};
